
spiSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000002da  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000c8  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000805  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000263  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000679  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017d  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  00001e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000074  00000000  00000000  0000204d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 19 01 	call	0x232	; 0x232 <main>
  88:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <LCD_comando>:

void LCD_comando(unsigned char c, char cd)
{
	unsigned char i = 2;

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c >> 4) << LCD_D4);
  90:	9b b1       	in	r25, 0x0b	; 11
  92:	28 2f       	mov	r18, r24
  94:	22 95       	swap	r18
  96:	2f 70       	andi	r18, 0x0F	; 15
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b b9       	out	0x0b, r25	; 11
//				ou texto (quando cd = 1)
// -----------------------------------------------------------------------------

void LCD_comando(unsigned char c, char cd)
{
	unsigned char i = 2;
  9e:	92 e0       	ldi	r25, 0x02	; 2
		
		pulso_enable;
		
		if((cd == 0) && (c < 4))
			_delay_ms(2);
		LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c & 0x0F) << LCD_D4);
  a0:	38 2f       	mov	r19, r24
  a2:	3f 70       	andi	r19, 0x0F	; 15
	unsigned char i = 2;

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c >> 4) << LCD_D4);
	do
	{
		if(cd == 0)
  a4:	66 23       	and	r22, r22
  a6:	89 f4       	brne	.+34     	; 0xca <LCD_comando+0x3a>
			__lcd_clr_bit(LCD_CONTROLE,LCD_RS);
  a8:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	22 e0       	ldi	r18, 0x02	; 2
  ac:	2a 95       	dec	r18
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_comando+0x1c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_comando+0x22>
		else
			__lcd_set_bit(LCD_CONTROLE,LCD_RS);
		
		pulso_enable;
  b2:	5c 9a       	sbi	0x0b, 4	; 11
  b4:	e2 e0       	ldi	r30, 0x02	; 2
  b6:	ea 95       	dec	r30
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_comando+0x26>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_comando+0x2c>
  bc:	5c 98       	cbi	0x0b, 4	; 11
  be:	f8 e7       	ldi	r31, 0x78	; 120
  c0:	fa 95       	dec	r31
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_comando+0x30>
		
		if((cd == 0) && (c < 4))
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	b0 f4       	brcc	.+44     	; 0xf4 <LCD_comando+0x64>
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <LCD_comando+0x58>
	do
	{
		if(cd == 0)
			__lcd_clr_bit(LCD_CONTROLE,LCD_RS);
		else
			__lcd_set_bit(LCD_CONTROLE,LCD_RS);
  ca:	5d 9a       	sbi	0x0b, 5	; 11
  cc:	22 e0       	ldi	r18, 0x02	; 2
  ce:	2a 95       	dec	r18
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_comando+0x3e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_comando+0x44>
		
		pulso_enable;
  d4:	5c 9a       	sbi	0x0b, 4	; 11
  d6:	e2 e0       	ldi	r30, 0x02	; 2
  d8:	ea 95       	dec	r30
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_comando+0x48>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_comando+0x4e>
  de:	5c 98       	cbi	0x0b, 4	; 11
  e0:	f8 e7       	ldi	r31, 0x78	; 120
  e2:	fa 95       	dec	r31
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_comando+0x52>
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <LCD_comando+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	ef e9       	ldi	r30, 0x9F	; 159
  ea:	ff e0       	ldi	r31, 0x0F	; 15
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_comando+0x5c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_comando+0x62>
  f2:	00 00       	nop
		
		if((cd == 0) && (c < 4))
			_delay_ms(2);
		LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c & 0x0F) << LCD_D4);
  f4:	2b b1       	in	r18, 0x0b	; 11
  f6:	20 7f       	andi	r18, 0xF0	; 240
  f8:	23 2b       	or	r18, r19
  fa:	2b b9       	out	0x0b, r18	; 11
		i--;
  fc:	91 50       	subi	r25, 0x01	; 1
	}while(i > 0);
  fe:	91 f6       	brne	.-92     	; 0xa4 <LCD_comando+0x14>
}
 100:	08 95       	ret

00000102 <LCD_inicia_4bits>:
// Objetivo:	Executa ações para incialização do LCD
// -----------------------------------------------------------------------------

void LCD_inicia_4bits(void)
{
	LCD_DDR	|= ( 1 << LCD_RS) | (1 << LCD_E) | (1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7);
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	8f 63       	ori	r24, 0x3F	; 63
 106:	8a b9       	out	0x0a, r24	; 10
	
	__lcd_clr_bit(LCD_CONTROLE,LCD_RS);
 108:	5d 98       	cbi	0x0b, 5	; 11
	__lcd_clr_bit(LCD_CONTROLE,LCD_E);
 10a:	5c 98       	cbi	0x0b, 4	; 11
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	9c e9       	ldi	r25, 0x9C	; 156
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_inicia_4bits+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_inicia_4bits+0x14>
 116:	00 00       	nop

	_delay_ms(20);

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | (0x03 << LCD_D4);
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	9a 95       	dec	r25
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_inicia_4bits+0x20>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_inicia_4bits+0x26>
	pulso_enable;
 128:	5c 9a       	sbi	0x0b, 4	; 11
 12a:	a2 e0       	ldi	r26, 0x02	; 2
 12c:	aa 95       	dec	r26
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_inicia_4bits+0x2a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_inicia_4bits+0x30>
 132:	5c 98       	cbi	0x0b, 4	; 11
 134:	b8 e7       	ldi	r27, 0x78	; 120
 136:	ba 95       	dec	r27
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_inicia_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	97 e2       	ldi	r25, 0x27	; 39
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_inicia_4bits+0x3c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_inicia_4bits+0x42>
 144:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_inicia_4bits+0x46>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_inicia_4bits+0x4c>
	_delay_ms(5);
	pulso_enable;
 14e:	5c 9a       	sbi	0x0b, 4	; 11
 150:	a2 e0       	ldi	r26, 0x02	; 2
 152:	aa 95       	dec	r26
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_inicia_4bits+0x50>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_inicia_4bits+0x56>
 158:	5c 98       	cbi	0x0b, 4	; 11
 15a:	b8 e7       	ldi	r27, 0x78	; 120
 15c:	ba 95       	dec	r27
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_inicia_4bits+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	91 ee       	ldi	r25, 0xE1	; 225
 164:	a4 e0       	ldi	r26, 0x04	; 4
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <LCD_inicia_4bits+0x64>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_inicia_4bits+0x6e>
 170:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_inicia_4bits+0x72>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_inicia_4bits+0x78>
	_delay_ms(200);
	pulso_enable;
 17a:	5c 9a       	sbi	0x0b, 4	; 11
 17c:	a2 e0       	ldi	r26, 0x02	; 2
 17e:	aa 95       	dec	r26
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_inicia_4bits+0x7c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_inicia_4bits+0x82>
 184:	5c 98       	cbi	0x0b, 4	; 11
 186:	b8 e7       	ldi	r27, 0x78	; 120
 188:	ba 95       	dec	r27
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_inicia_4bits+0x86>

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | (0x02 << LCD_D4);
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	82 60       	ori	r24, 0x02	; 2
 192:	8b b9       	out	0x0b, r24	; 11
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_inicia_4bits+0x94>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_inicia_4bits+0x9a>

	pulso_enable;
 19c:	5c 9a       	sbi	0x0b, 4	; 11
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_inicia_4bits+0x9e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_inicia_4bits+0xa4>
 1a6:	5c 98       	cbi	0x0b, 4	; 11
 1a8:	a8 e7       	ldi	r26, 0x78	; 120
 1aa:	aa 95       	dec	r26
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_inicia_4bits+0xa8>


   	LCD_comando(0x28,0);	//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 1ae:	88 e2       	ldi	r24, 0x28	; 40
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
						//são enviados os 2 nibbles (0x2 e 0x8)
   	
   	LCD_comando(0x08,0);	//desliga o display
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
   	LCD_display_limpa();
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
   	LCD_display_liga();   
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
   	LCD_move_primeira_linha();
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
}
 1d6:	08 95       	ret

000001d8 <LCD_escreve>:
// Retono:		Nenhum
// Objetivo:	Escreve a string de caracteres no LCD
// -----------------------------------------------------------------------------

void LCD_escreve(char *c)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	for (;*c != 0;c++)  LCD_comando(*c,1);
 1de:	88 81       	ld	r24, Y
 1e0:	88 23       	and	r24, r24
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <LCD_escreve+0x1a>
// Argumentos:	string de texto
// Retono:		Nenhum
// Objetivo:	Escreve a string de caracteres no LCD
// -----------------------------------------------------------------------------

void LCD_escreve(char *c)
 1e4:	21 96       	adiw	r28, 0x01	; 1
{
	for (;*c != 0;c++)  LCD_comando(*c,1);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
 1ec:	89 91       	ld	r24, Y+
 1ee:	88 23       	and	r24, r24
 1f0:	d1 f7       	brne	.-12     	; 0x1e6 <LCD_escreve+0xe>
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <SPI_SlaveInit>:
//--------------------------------------------------------------

void SPI_SlaveInit()
{
	/* Seta MISO como saída, todos os outros como entrada automaticamente */
	SPI_DDR = (1 << SPI_DD_MISO);
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	84 b9       	out	0x04, r24	; 4
		
	/*SS deve ser mantido em baixo para ativar SPI no modo slave*/
	SPI_PORT &= (~(1 << SPI_DD_SS));
 1fc:	2a 98       	cbi	0x05, 2	; 5
	
	/* Habilita SPI */
	SPCR = (1 << SPE);
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	8c bd       	out	0x2c, r24	; 44
}
 202:	08 95       	ret

00000204 <SPI_Receive>:
//--------------------------------------------------------------

char SPI_Receive()
{
	/* Wait for reception complete */
	while(!(SPSR & (1 << SPIF)));
 204:	0d b4       	in	r0, 0x2d	; 45
 206:	07 fe       	sbrs	r0, 7
 208:	fd cf       	rjmp	.-6      	; 0x204 <SPI_Receive>
	
	/* Return Data Register */
	return SPDR;
 20a:	8e b5       	in	r24, 0x2e	; 46
}
 20c:	08 95       	ret

0000020e <__vector_17>:
volatile char podeImprimir = 0;

//--------------------------------------------------------------

ISR(SPI_STC_vect)
 {	 
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
	dadoRecebido = SPDR;
 21a:	8e b5       	in	r24, 0x2e	; 46
 21c:	80 93 01 01 	sts	0x0101, r24
	podeImprimir = 1;	
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 00 01 	sts	0x0100, r24
}
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <main>:

//--------------------------------------------------------------

int main(void)
{
	UCSR0B=0x00;	//desabilita os pinos de RX e TX
 232:	10 92 c1 00 	sts	0x00C1, r1
	
	SPI_SlaveInit();
 236:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_SlaveInit>
	LCD_inicia_4bits();
 23a:	0e 94 81 00 	call	0x102	; 0x102 <LCD_inicia_4bits>

	SPI_SlaveInit();
 23e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_SlaveInit>
	
	SPI_HABILITA_INTERRUPCAO_SPI();
 242:	8c b5       	in	r24, 0x2c	; 44
 244:	80 68       	ori	r24, 0x80	; 128
 246:	8c bd       	out	0x2c, r24	; 44
	sei();
 248:	78 94       	sei

    while(1)
    {		
		if(podeImprimir) {
 24a:	80 91 00 01 	lds	r24, 0x0100
 24e:	88 23       	and	r24, r24
 250:	e1 f3       	breq	.-8      	; 0x24a <main+0x18>
			LCD_comando(dadoRecebido, 1);
 252:	80 91 01 01 	lds	r24, 0x0101
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	0e 94 48 00 	call	0x90	; 0x90 <LCD_comando>
			podeImprimir = 0;
 25c:	10 92 00 01 	sts	0x0100, r1
 260:	f4 cf       	rjmp	.-24     	; 0x24a <main+0x18>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
