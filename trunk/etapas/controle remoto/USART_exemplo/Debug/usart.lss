
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000079  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ec  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000148  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027f  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011b  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000088  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000030  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_18>:
unsigned char Usart_Receive();

//----------------------------------------------------------------------

ISR(USART_RX_vect)							
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <__vector_18+0x28>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char dataReceived;
	unsigned char echo[2];

	dataReceived = Usart_Receive();	
  c2:	0e 94 ab 00 	call	0x156	; 0x156 <Usart_Receive>
	echo[0] = dataReceived;
  c6:	89 83       	std	Y+1, r24	; 0x01
	echo[1] = '\0';							
  c8:	1a 82       	std	Y+2, r1	; 0x02
	
	Usart_transmit(echo);
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 96 00 	call	0x12c	; 0x12c <Usart_transmit>
				
}//ISR(USART_RX_vect)
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:

//----------------------------------------------------------------------

int main(void)
{
	Usart_Init(MYUBRR);
  fc:	89 e0       	ldi	r24, 0x09	; 9
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 88 00 	call	0x110	; 0x110 <Usart_Init>
	
	sei();
 104:	78 94       	sei
	
	Usart_transmit("DYGPS Veiculo Solar\0");
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 96 00 	call	0x12c	; 0x12c <Usart_transmit>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x12>

00000110 <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 110:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 114:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00100000;
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 93 c0 00 	sts	0x00C0, r24
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b10011000;
 11e:	88 e9       	ldi	r24, 0x98	; 152
 120:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;	
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24
	
}//Usart_Init
 12a:	08 95       	ret

0000012c <Usart_transmit>:

//----------------------------------------------------------------------

void Usart_transmit(unsigned char* dado)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	dc 01       	movw	r26, r24
	while(*dado){
 132:	9c 91       	ld	r25, X
 134:	99 23       	and	r25, r25
 136:	61 f0       	breq	.+24     	; 0x150 <Usart_transmit+0x24>
	
}//Usart_Init

//----------------------------------------------------------------------

void Usart_transmit(unsigned char* dado)
 138:	11 96       	adiw	r26, 0x01	; 1
{
	while(*dado){
		/*wait for empty transmit buffer*/
		while (!( UCSR0A & (1 << UDRE0)));    
 13a:	e0 ec       	ldi	r30, 0xC0	; 192
 13c:	f0 e0       	ldi	r31, 0x00	; 0
	   	
		/*put data into buffer, sends the data*/
		UDR0 = *dado++;
 13e:	c6 ec       	ldi	r28, 0xC6	; 198
 140:	d0 e0       	ldi	r29, 0x00	; 0

void Usart_transmit(unsigned char* dado)
{
	while(*dado){
		/*wait for empty transmit buffer*/
		while (!( UCSR0A & (1 << UDRE0)));    
 142:	80 81       	ld	r24, Z
 144:	85 ff       	sbrs	r24, 5
 146:	fd cf       	rjmp	.-6      	; 0x142 <Usart_transmit+0x16>
	   	
		/*put data into buffer, sends the data*/
		UDR0 = *dado++;
 148:	98 83       	st	Y, r25

//----------------------------------------------------------------------

void Usart_transmit(unsigned char* dado)
{
	while(*dado){
 14a:	9d 91       	ld	r25, X+
 14c:	99 23       	and	r25, r25
 14e:	c9 f7       	brne	.-14     	; 0x142 <Usart_transmit+0x16>
	   	
		/*put data into buffer, sends the data*/
		UDR0 = *dado++;
	}	  
	        
}//Usart_transmit
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <Usart_Receive>:
//----------------------------------------------------------------------

unsigned char Usart_Receive()
{
	/*wait for data to be receive*/
	while (!(UCSR0A & (1<<RXC0)));
 156:	e0 ec       	ldi	r30, 0xC0	; 192
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	ec f7       	brge	.-6      	; 0x15a <Usart_Receive+0x4>
	          	
	return UDR0; 
 160:	80 91 c6 00 	lds	r24, 0x00C6
	   	
}//Usart_Receive
 164:	08 95       	ret

00000166 <ISR>:
unsigned char Usart_Receive();

//----------------------------------------------------------------------

ISR(USART_RX_vect)							
{
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	00 d0       	rcall	.+0      	; 0x16c <ISR+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	unsigned char dataReceived;
	unsigned char echo[2];

	dataReceived = Usart_Receive();	
 170:	0e 94 ab 00 	call	0x156	; 0x156 <Usart_Receive>
	echo[0] = dataReceived;
 174:	89 83       	std	Y+1, r24	; 0x01
	echo[1] = '\0';							
 176:	1a 82       	std	Y+2, r1	; 0x02
	
	Usart_transmit(echo);
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 96 00 	call	0x12c	; 0x12c <Usart_transmit>
				
}//ISR(USART_RX_vect)
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
