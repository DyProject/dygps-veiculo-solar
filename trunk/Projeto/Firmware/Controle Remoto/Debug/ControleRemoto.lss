
ControleRemoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000af8  00000b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080011e  0080011e  00000baa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ac  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000141c  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000062a  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000122a  00000000  00000000  000031ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  000043e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007ce  00000000  00000000  00004634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096d  00000000  00000000  00004e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000162  00000000  00000000  0000576f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  000058d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9e:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
	* bit 4		 0:	 R:	    -:			Não usado deve ser sempre lido zero
	* bit 3:0 0000:	 R/W:	MUX[3:0]:	0000=ADC0, 0001=ADC1, 0010==ADC2, 0011=ADC3, 0100=ADC4, 0101=ADC5,
										0110=ADC6, 0111=ADC7, 1000=ADC8, 1001:1101=Reservado, 1110=1.1V(VBG)
										1111=0v(GND)
	*/
	ADMUX = 0b01000000; 
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	Exemplo: prescaler de 128: 20MHz/128 = 156,250KHz
	OBS: ADC[ADCL-ADCH] Registrado que armazena o resultado. Se o ADCL é lido o registrador 
	não é atualizado até ADCH ser lido. Se ADLAR for setado(ajuste a esquerda) e a precisão
	não for maior que 8bits apenas a leitura do ADCH é o suficiente.
	*/	
	ADCSRA = 0b10101111;  
  ac:	8f ea       	ldi	r24, 0xAF	; 175
  ae:	80 93 7a 00 	sts	0x007A, r24
										000=Free Running mode,  001==Analog Comparator, 
										010=External Interrupt Request 0, 011=Timer/Counter0 Compare Match A,  
										100=Timer/Counter0 Overflow, 101=Timer/Counter1 Compare Match B
										110=Timer/Counter1 Overflow, 111=Timer/Counter1 Capture Even
	*/	
	ADCSRB = 0b00000100;  
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 7b 00 	sts	0x007B, r24
	/* DIDR0 - Digital Input Disable Register 0
	* bit 7:6	00:		R:		-:				Reservado. Para uso futuro. Dever ser sempre escirto zero.
	* bit 5:0	111111:	R/W:	ADCnD[5:0]:		0=Habilita, 1=Entrada digital desabilitada

	*/	
	DIDR0 = 0b00111111;  
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	80 93 7e 00 	sts	0x007E, r24
	//        ||||||||
	//		  76543210
}
  be:	08 95       	ret

000000c0 <ADC_Read>:
uint16_t ADC_Read(
	uint8_t canal
)
{
	/*Máscara para definir o canal. Bits2:0*/
	ADMUX = (ADMUX & 0b11111000)  | (canal & 0b0000111);
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	87 70       	andi	r24, 0x07	; 7
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	98 2b       	or	r25, r24
  cc:	90 83       	st	Z, r25
	
	/*Inicia conversão*/
	ADCSRA |= (1<<ADSC);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	
	/*Aguarda conversão ser concluída*/
	while(ADCSRA & (1<<ADSC));
  d8:	80 81       	ld	r24, Z
  da:	86 fd       	sbrc	r24, 6
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <ADC_Read+0x18>
	
	return (ADC);
  de:	20 91 78 00 	lds	r18, 0x0078
  e2:	30 91 79 00 	lds	r19, 0x0079
}
  e6:	82 2f       	mov	r24, r18
  e8:	93 2f       	mov	r25, r19
  ea:	08 95       	ret

000000ec <__vector_21>:
void ValoresIniciaisBuffer();

//----------------------------------------------------------------------------

ISR(ADC_vect)			
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	static uint8_t contador = 0;
		
	/*Envia o valor lido do ADC a cada 1s aproximadamente*/
	if(contador > 16 && (bufferDados_g.podeIniciarTransmissao == 'y')) {
 116:	80 91 1e 01 	lds	r24, 0x011E
 11a:	81 31       	cpi	r24, 0x11	; 17
 11c:	c8 f0       	brcs	.+50     	; 0x150 <__vector_21+0x64>
 11e:	80 91 2f 01 	lds	r24, 0x012F
 122:	89 37       	cpi	r24, 0x79	; 121
 124:	a9 f4       	brne	.+42     	; 0x150 <__vector_21+0x64>
		ADMUX &= ~(1 << ADIE);
 126:	cc e7       	ldi	r28, 0x7C	; 124
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	88 81       	ld	r24, Y
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	88 83       	st	Y, r24
			
		TransmitiBuffer(&bufferDados_g);
 130:	0f e1       	ldi	r16, 0x1F	; 31
 132:	11 e0       	ldi	r17, 0x01	; 1
 134:	c8 01       	movw	r24, r16
 136:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TransmitiBuffer>
		//Limpa_matriz_LCD(1, 6, 1);
		//Limpa_matriz_LCD(2, 6, 1);
		MostraDadosLCD(&bufferDados_g);
 13a:	c8 01       	movw	r24, r16
 13c:	0e 94 94 02 	call	0x528	; 0x528 <MostraDadosLCD>
		bufferDados_g.podeIniciarTransmissao = 'n';
 140:	8e e6       	ldi	r24, 0x6E	; 110
 142:	80 93 2f 01 	sts	0x012F, r24
		contador = 0;
 146:	10 92 1e 01 	sts	0x011E, r1
		
		ADMUX |= (1 << ADIE);
 14a:	88 81       	ld	r24, Y
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	88 83       	st	Y, r24
	}		
	
	contador++;
 150:	80 91 1e 01 	lds	r24, 0x011E
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 1e 01 	sts	0x011E, r24
	/*Limpa o flag de overflow do Timer0. Esse flag indica que houve um estouro do timer.
	limpar para habilitar um novo estouro para gerar a interrupção do ADC.*/
	TIFR0 |= TOV0;
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	85 bb       	out	0x15, r24	; 21
}	
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_18>:

//----------------------------------------------------------------------------

ISR(USART_RX_vect)							
{	
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	RecebeProtocolo(&bufferDados_g);
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 0f 02 	call	0x41e	; 0x41e <RecebeProtocolo>
	if(bufferDados_g.completo == 'y') 
 1b2:	80 91 23 01 	lds	r24, 0x0123
 1b6:	89 37       	cpi	r24, 0x79	; 121
 1b8:	11 f4       	brne	.+4      	; 0x1be <__vector_18+0x36>
		bufferDados_g.podeIniciarTransmissao = 'y';
 1ba:	80 93 2f 01 	sts	0x012F, r24
	/*uint16_t recebido = UDR0;
	
	/*Recebe a letra 'z' indicando que o controle carro recebeu os dados*//*
	if (recebido == 'z')
		podeIniciarNovaTrasmissao = 1;*/
}	
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <ValoresIniciaisBuffer>:

//----------------------------------------------------------------------------

void ValoresIniciaisBuffer()
{
	bufferDados_g.qntdDadosLido = 0;
 1e0:	10 92 21 01 	sts	0x0121, r1
 1e4:	10 92 20 01 	sts	0x0120, r1
	bufferDados_g.iniciado = 'n';
 1e8:	8e e6       	ldi	r24, 0x6E	; 110
 1ea:	80 93 22 01 	sts	0x0122, r24
	bufferDados_g.completo = 'n';
 1ee:	80 93 23 01 	sts	0x0123, r24
	bufferDados_g.podeIniciarTransmissao = 'y';
 1f2:	89 e7       	ldi	r24, 0x79	; 121
 1f4:	80 93 2f 01 	sts	0x012F, r24
	bufferDados_g.fonteAlimentacao = 'B';
 1f8:	82 e4       	ldi	r24, 0x42	; 66
 1fa:	80 93 1f 01 	sts	0x011F, r24
}	
 1fe:	08 95       	ret

00000200 <main>:

//----------------------------------------------------------------------------

int main()
{	
	ValoresIniciaisBuffer();
 200:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ValoresIniciaisBuffer>
	Usart_Init(MYUBRR);
 204:	87 e6       	ldi	r24, 0x67	; 103
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 26 05 	call	0xa4c	; 0xa4c <Usart_Init>
	/*Prescaler do Timer0, usado para fazer uma leitura do ADC.*/
	TCCR0B = (1<<CS02) | (1<<CS00);
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	85 bd       	out	0x25, r24	; 37
	inic_LCD_4bits();					
 210:	0e 94 4b 01 	call	0x296	; 0x296 <inic_LCD_4bits>
	ADC_Init();
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	sei();
 218:	78 94       	sei
	
	/*Para teste*/		
	TransmitiBuffer(&bufferDados_g);
 21a:	8f e1       	ldi	r24, 0x1F	; 31
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TransmitiBuffer>
 222:	ff cf       	rjmp	.-2      	; 0x222 <main+0x22>

00000224 <cmd_LCD>:
//----------------------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)		//c é o dado  e cd indica se é instrução ou caractere
{
	unsigned char i=2;

	DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	//primeiro os 4 MSB. (PA0 - PA1 - PA2 - PA3) -> (D4 - D5 - D6 - D7 LCD)
 224:	95 b1       	in	r25, 0x05	; 5
 226:	28 2f       	mov	r18, r24
 228:	22 95       	swap	r18
 22a:	2f 70       	andi	r18, 0x0F	; 15
 22c:	90 7f       	andi	r25, 0xF0	; 240
 22e:	92 2b       	or	r25, r18
 230:	95 b9       	out	0x05, r25	; 5
//----------------------------------------------------------------------------------------------------------
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//----------------------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)		//c é o dado  e cd indica se é instrução ou caractere
{
	unsigned char i=2;
 232:	92 e0       	ldi	r25, 0x02	; 2
		pulso_enable;

		if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza, gasta mais tempo
		  	_delay_ms(2);
	
		DADOS_LCD = (DADOS_LCD & 0xF0) | (c & 0x0F);//segundo nibble, 4 LSB
 234:	38 2f       	mov	r19, r24
 236:	3f 70       	andi	r19, 0x0F	; 15
	unsigned char i=2;

	DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	//primeiro os 4 MSB. (PA0 - PA1 - PA2 - PA3) -> (D4 - D5 - D6 - D7 LCD)
											//como a outra metade da porta pode ser utilizada para outros fins, não 
	do										//se pode alterar o seu conteúdo
	{	if(cd==0)
 238:	66 23       	and	r22, r22
 23a:	89 f4       	brne	.+34     	; 0x25e <cmd_LCD+0x3a>
			clr_bit(CONTR_LCD,RS);
 23c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	25 e0       	ldi	r18, 0x05	; 5
 240:	2a 95       	dec	r18
 242:	f1 f7       	brne	.-4      	; 0x240 <cmd_LCD+0x1c>
 244:	00 00       	nop
		else
			set_bit(CONTR_LCD,RS);

		pulso_enable;
 246:	2d 9a       	sbi	0x05, 5	; 5
 248:	e5 e0       	ldi	r30, 0x05	; 5
 24a:	ea 95       	dec	r30
 24c:	f1 f7       	brne	.-4      	; 0x24a <cmd_LCD+0x26>
 24e:	00 00       	nop
 250:	2d 98       	cbi	0x05, 5	; 5
 252:	f0 ef       	ldi	r31, 0xF0	; 240
 254:	fa 95       	dec	r31
 256:	f1 f7       	brne	.-4      	; 0x254 <cmd_LCD+0x30>

		if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza, gasta mais tempo
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	b0 f4       	brcc	.+44     	; 0x288 <cmd_LCD+0x64>
 25c:	0f c0       	rjmp	.+30     	; 0x27c <cmd_LCD+0x58>
											//como a outra metade da porta pode ser utilizada para outros fins, não 
	do										//se pode alterar o seu conteúdo
	{	if(cd==0)
			clr_bit(CONTR_LCD,RS);
		else
			set_bit(CONTR_LCD,RS);
 25e:	2c 9a       	sbi	0x05, 4	; 5
 260:	25 e0       	ldi	r18, 0x05	; 5
 262:	2a 95       	dec	r18
 264:	f1 f7       	brne	.-4      	; 0x262 <cmd_LCD+0x3e>
 266:	00 00       	nop

		pulso_enable;
 268:	2d 9a       	sbi	0x05, 5	; 5
 26a:	e5 e0       	ldi	r30, 0x05	; 5
 26c:	ea 95       	dec	r30
 26e:	f1 f7       	brne	.-4      	; 0x26c <cmd_LCD+0x48>
 270:	00 00       	nop
 272:	2d 98       	cbi	0x05, 5	; 5
 274:	f0 ef       	ldi	r31, 0xF0	; 240
 276:	fa 95       	dec	r31
 278:	f1 f7       	brne	.-4      	; 0x276 <cmd_LCD+0x52>
 27a:	06 c0       	rjmp	.+12     	; 0x288 <cmd_LCD+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	ef e3       	ldi	r30, 0x3F	; 63
 27e:	ff e1       	ldi	r31, 0x1F	; 31
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <cmd_LCD+0x5c>
 284:	00 c0       	rjmp	.+0      	; 0x286 <cmd_LCD+0x62>
 286:	00 00       	nop

		if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza, gasta mais tempo
		  	_delay_ms(2);
	
		DADOS_LCD = (DADOS_LCD & 0xF0) | (c & 0x0F);//segundo nibble, 4 LSB
 288:	25 b1       	in	r18, 0x05	; 5
 28a:	20 7f       	andi	r18, 0xF0	; 240
 28c:	23 2b       	or	r18, r19
 28e:	25 b9       	out	0x05, r18	; 5
		
		i--;
 290:	91 50       	subi	r25, 0x01	; 1
	
	}while(i>0);
 292:	91 f6       	brne	.-92     	; 0x238 <cmd_LCD+0x14>
}
 294:	08 95       	ret

00000296 <inic_LCD_4bits>:
//-----------------------------------------------------------------------------------------------------------
void inic_LCD_4bits()		//sequência ditada pelo fabricando do circuito integrado HD44780
{							//o LCD será só escrito. Então, R/W é sempre zero.

	//configuração a direção de dados das portas
	DDR_DADOS_LCD = 0x0F;	//configura 4 bits menos significativos da DDR como saida
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	84 b9       	out	0x04, r24	; 4
	DDR_CONTR_LCD = (DDR_CONTR_LCD|(1<<E)|(1<<RS)); //Configura pinos de controle como saida
 29a:	84 b1       	in	r24, 0x04	; 4
 29c:	80 63       	ori	r24, 0x30	; 48
 29e:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <inic_LCD_4bits+0xc>
 2a6:	00 00       	nop
	_delay_us(1);						//ajuste dos pinos

	clr_bit(CONTR_LCD,RS);	//RS em zero indicando que o dado para o LCD será uma instrução	
 2a8:	2c 98       	cbi	0x05, 4	; 5
	clr_bit(CONTR_LCD,E);	//pino de habilitação em zero
 2aa:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	99 ef       	ldi	r25, 0xF9	; 249
 2b0:	a0 e0       	ldi	r26, 0x00	; 0
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	a0 40       	sbci	r26, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <inic_LCD_4bits+0x1c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <inic_LCD_4bits+0x26>
 2bc:	00 00       	nop
	
	_delay_ms(20);	 		//tempo para estabilizar a tensão do LCD, após VCC ultrapassar 4.5 V (na prática pode
							//ser maior). 
	DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;//interface de 8 bits (é importante utilizar este comando para não
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	80 7f       	andi	r24, 0xF0	; 240
 2c2:	83 60       	ori	r24, 0x03	; 3
 2c4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	95 e0       	ldi	r25, 0x05	; 5
 2c8:	9a 95       	dec	r25
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <inic_LCD_4bits+0x32>
 2cc:	00 00       	nop
							//haver problemas na inicialização seguida do LCD (reset do microcontrolador)
	pulso_enable;			//enable respeitando os tempos de resposta do LCD
 2ce:	2d 9a       	sbi	0x05, 5	; 5
 2d0:	a5 e0       	ldi	r26, 0x05	; 5
 2d2:	aa 95       	dec	r26
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <inic_LCD_4bits+0x3c>
 2d6:	00 00       	nop
 2d8:	2d 98       	cbi	0x05, 5	; 5
 2da:	b0 ef       	ldi	r27, 0xF0	; 240
 2dc:	ba 95       	dec	r27
 2de:	f1 f7       	brne	.-4      	; 0x2dc <inic_LCD_4bits+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	8f e1       	ldi	r24, 0x1F	; 31
 2e2:	9e e4       	ldi	r25, 0x4E	; 78
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <inic_LCD_4bits+0x4e>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <inic_LCD_4bits+0x54>
 2ea:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	95 e0       	ldi	r25, 0x05	; 5
 2ee:	9a 95       	dec	r25
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <inic_LCD_4bits+0x58>
 2f2:	00 00       	nop
	_delay_ms(5);		
	pulso_enable;
 2f4:	2d 9a       	sbi	0x05, 5	; 5
 2f6:	a5 e0       	ldi	r26, 0x05	; 5
 2f8:	aa 95       	dec	r26
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <inic_LCD_4bits+0x62>
 2fc:	00 00       	nop
 2fe:	2d 98       	cbi	0x05, 5	; 5
 300:	b0 ef       	ldi	r27, 0xF0	; 240
 302:	ba 95       	dec	r27
 304:	f1 f7       	brne	.-4      	; 0x302 <inic_LCD_4bits+0x6c>
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	93 e0       	ldi	r25, 0x03	; 3
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <inic_LCD_4bits+0x74>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <inic_LCD_4bits+0x7a>
 310:	00 00       	nop
 312:	95 e0       	ldi	r25, 0x05	; 5
 314:	9a 95       	dec	r25
 316:	f1 f7       	brne	.-4      	; 0x314 <inic_LCD_4bits+0x7e>
 318:	00 00       	nop
	_delay_us(200);
	pulso_enable;			//até aqui ainda é uma interface de 8 bits.
 31a:	2d 9a       	sbi	0x05, 5	; 5
 31c:	a5 e0       	ldi	r26, 0x05	; 5
 31e:	aa 95       	dec	r26
 320:	f1 f7       	brne	.-4      	; 0x31e <inic_LCD_4bits+0x88>
 322:	00 00       	nop
 324:	2d 98       	cbi	0x05, 5	; 5
 326:	b0 ef       	ldi	r27, 0xF0	; 240
 328:	ba 95       	dec	r27
 32a:	f1 f7       	brne	.-4      	; 0x328 <inic_LCD_4bits+0x92>
							//Muitos programadores desprezam os comandos acima, respeitando apenas o tempo de
							//estabilização da tensão (geralmente funciona). Se o LCD não for inicializado primeiro no 
							//modo de 8 bits, haverá problemas se o microcontrolador for inicializado e o display já o //tiver sido.

	DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;//interface de 4 bits, deve ser enviado duas vezes (a outra esta abaixo)
 32c:	85 b1       	in	r24, 0x05	; 5
 32e:	80 7f       	andi	r24, 0xF0	; 240
 330:	82 60       	ori	r24, 0x02	; 2
 332:	85 b9       	out	0x05, r24	; 5
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	8a 95       	dec	r24
 338:	f1 f7       	brne	.-4      	; 0x336 <inic_LCD_4bits+0xa0>
 33a:	00 00       	nop
	
	pulso_enable;		
 33c:	2d 9a       	sbi	0x05, 5	; 5
 33e:	95 e0       	ldi	r25, 0x05	; 5
 340:	9a 95       	dec	r25
 342:	f1 f7       	brne	.-4      	; 0x340 <inic_LCD_4bits+0xaa>
 344:	00 00       	nop
 346:	2d 98       	cbi	0x05, 5	; 5
 348:	a0 ef       	ldi	r26, 0xF0	; 240
 34a:	aa 95       	dec	r26
 34c:	f1 f7       	brne	.-4      	; 0x34a <inic_LCD_4bits+0xb4>

   	cmd_LCD(LCD_4BIT,0); 	//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
						//são enviados os 2 nibbles (0x2 e 0x8)
   	cmd_LCD(LCD_OFF_DISPLAY,0);	//desliga o display
 356:	88 e0       	ldi	r24, 0x08	; 8
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
   	cmd_LCD(LCD_CLR,0);	//limpa todo o display
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
   	cmd_LCD(LCD_OFF_CURSOR,0);	//mensagem aparente cursor ativo não piscando   
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
   	cmd_LCD(LCD_LINHA1,0);	//escreve na primeira posição a esquerda - 1a linha
 36e:	80 e8       	ldi	r24, 0x80	; 128
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
}
 376:	08 95       	ret

00000378 <escreve_LCD>:
//-----------------------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD
//-----------------------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) cmd_LCD(*c,1);
 37e:	88 81       	ld	r24, Y
 380:	88 23       	and	r24, r24
 382:	39 f0       	breq	.+14     	; 0x392 <escreve_LCD+0x1a>
   	cmd_LCD(LCD_LINHA1,0);	//escreve na primeira posição a esquerda - 1a linha
}
//-----------------------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD
//-----------------------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
 384:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) cmd_LCD(*c,1);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
 38c:	89 91       	ld	r24, Y+
 38e:	88 23       	and	r24, r24
 390:	d1 f7       	brne	.-12     	; 0x386 <escreve_LCD+0xe>
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <EscreveCaracterLCD>:

//-----------------------------------------------------------------------------------------------

void EscreveCaracterLCD(char caracter)
{
	cmd_LCD(caracter, 1);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
}
 39e:	08 95       	ret

000003a0 <LCD_setPos>:
//-----------------------------------------------------------------------------------------------
//FUNCIONA APENAS PARA DUAS LINHAS
void LCD_setPos(int posx, int posy) {
	int posiciona=0;

	if(posx==1) posiciona=LCD_LINHA1+posy;
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	91 05       	cpc	r25, r1
 3a4:	21 f4       	brne	.+8      	; 0x3ae <LCD_setPos+0xe>
 3a6:	cb 01       	movw	r24, r22
 3a8:	80 58       	subi	r24, 0x80	; 128
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <LCD_setPos+0x20>
	if(posx==2) posiciona=LCD_LINHA2+posy;
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	21 f4       	brne	.+8      	; 0x3bc <LCD_setPos+0x1c>
 3b4:	cb 01       	movw	r24, r22
 3b6:	80 54       	subi	r24, 0x40	; 64
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <LCD_setPos+0x20>
//-----------------------------------------------------------------------------------------------
//Sub-rotina de posicionar LCD
//-----------------------------------------------------------------------------------------------
//FUNCIONA APENAS PARA DUAS LINHAS
void LCD_setPos(int posx, int posy) {
	int posiciona=0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0

	if(posx==1) posiciona=LCD_LINHA1+posy;
	if(posx==2) posiciona=LCD_LINHA2+posy;

	cmd_LCD(posiciona,0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
}
 3c6:	08 95       	ret

000003c8 <Limpa_matriz_LCD>:
//-----------------------------------------------------------------------------------------------
//Sub-rotina de limpeza de matriz selecionável LCD
//-----------------------------------------------------------------------------------------------
void Limpa_matriz_LCD(int posx,int posy,int limpa) {
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	8c 01       	movw	r16, r24
 3d6:	7b 01       	movw	r14, r22
 3d8:	ea 01       	movw	r28, r20
	unsigned char x;
	if(limpa==0)	cmd_LCD(LCD_CLR,0);
 3da:	20 97       	sbiw	r28, 0x00	; 0
 3dc:	49 f4       	brne	.+18     	; 0x3f0 <Limpa_matriz_LCD+0x28>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
	LCD_setPos(posx,posy);
 3e6:	c8 01       	movw	r24, r16
 3e8:	b7 01       	movw	r22, r14
 3ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
 3ee:	10 c0       	rjmp	.+32     	; 0x410 <Limpa_matriz_LCD+0x48>
 3f0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
	for(x=0;x<limpa;x++){
 3f4:	1c 16       	cp	r1, r28
 3f6:	1d 06       	cpc	r1, r29
 3f8:	5c f4       	brge	.+22     	; 0x410 <Limpa_matriz_LCD+0x48>
 3fa:	00 e0       	ldi	r16, 0x00	; 0
		cmd_LCD(0x20,1);
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	0e 94 12 01 	call	0x224	; 0x224 <cmd_LCD>
//-----------------------------------------------------------------------------------------------
void Limpa_matriz_LCD(int posx,int posy,int limpa) {
	unsigned char x;
	if(limpa==0)	cmd_LCD(LCD_CLR,0);
	LCD_setPos(posx,posy);
	for(x=0;x<limpa;x++){
 404:	0f 5f       	subi	r16, 0xFF	; 255
 406:	80 2f       	mov	r24, r16
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	8c 17       	cp	r24, r28
 40c:	9d 07       	cpc	r25, r29
 40e:	b4 f3       	brlt	.-20     	; 0x3fc <Limpa_matriz_LCD+0x34>
		cmd_LCD(0x20,1);
	}
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	ff 90       	pop	r15
 41a:	ef 90       	pop	r14
 41c:	08 95       	ret

0000041e <RecebeProtocolo>:
//----------------------------------------------------------------------------

uint8_t RecebeProtocolo(
	BufferDados* bufferRecepcao
)
{	
 41e:	fc 01       	movw	r30, r24
	uint8_t dadoRecebido = UDR0;	
 420:	20 91 c6 00 	lds	r18, 0x00C6
	bufferRecepcao->completo = 'n';
 424:	8e e6       	ldi	r24, 0x6E	; 110
 426:	84 83       	std	Z+4, r24	; 0x04
	/*Inicia recepção*/
	if(dadoRecebido == 'z') {
 428:	2a 37       	cpi	r18, 0x7A	; 122
 42a:	41 f4       	brne	.+16     	; 0x43c <RecebeProtocolo+0x1e>
		bufferRecepcao->iniciado = 'y';		
 42c:	89 e7       	ldi	r24, 0x79	; 121
 42e:	83 83       	std	Z+3, r24	; 0x03
		bufferRecepcao->qntdDadosLido++;
 430:	81 81       	ldd	r24, Z+1	; 0x01
 432:	92 81       	ldd	r25, Z+2	; 0x02
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	92 83       	std	Z+2, r25	; 0x02
 438:	81 83       	std	Z+1, r24	; 0x01
 43a:	32 c0       	rjmp	.+100    	; 0x4a0 <RecebeProtocolo+0x82>
	}		
	else if(bufferRecepcao->iniciado == 'y') {
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	89 37       	cpi	r24, 0x79	; 121
 440:	79 f5       	brne	.+94     	; 0x4a0 <RecebeProtocolo+0x82>
						
		if(bufferRecepcao->qntdDadosLido == 1) {
 442:	81 81       	ldd	r24, Z+1	; 0x01
 444:	92 81       	ldd	r25, Z+2	; 0x02
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	91 05       	cpc	r25, r1
 44a:	39 f4       	brne	.+14     	; 0x45a <RecebeProtocolo+0x3c>
			bufferRecepcao->fonteAlimentacao = dadoRecebido;
 44c:	20 83       	st	Z, r18
			bufferRecepcao->qntdDadosLido++;
 44e:	81 81       	ldd	r24, Z+1	; 0x01
 450:	92 81       	ldd	r25, Z+2	; 0x02
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	92 83       	std	Z+2, r25	; 0x02
 456:	81 83       	std	Z+1, r24	; 0x01
 458:	23 c0       	rjmp	.+70     	; 0x4a0 <RecebeProtocolo+0x82>
		}
		else if(bufferRecepcao->qntdDadosLido == 2) {		
 45a:	81 81       	ldd	r24, Z+1	; 0x01
 45c:	92 81       	ldd	r25, Z+2	; 0x02
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	91 05       	cpc	r25, r1
 462:	51 f4       	brne	.+20     	; 0x478 <RecebeProtocolo+0x5a>
			bufferRecepcao->tensaoBateria = dadoRecebido;
 464:	82 2f       	mov	r24, r18
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	96 83       	std	Z+6, r25	; 0x06
 46a:	85 83       	std	Z+5, r24	; 0x05
			bufferRecepcao->qntdDadosLido++;
 46c:	81 81       	ldd	r24, Z+1	; 0x01
 46e:	92 81       	ldd	r25, Z+2	; 0x02
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	92 83       	std	Z+2, r25	; 0x02
 474:	81 83       	std	Z+1, r24	; 0x01
 476:	14 c0       	rjmp	.+40     	; 0x4a0 <RecebeProtocolo+0x82>
		}			
		else if(bufferRecepcao->qntdDadosLido == 3) {
 478:	81 81       	ldd	r24, Z+1	; 0x01
 47a:	92 81       	ldd	r25, Z+2	; 0x02
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	91 05       	cpc	r25, r1
 480:	79 f4       	brne	.+30     	; 0x4a0 <RecebeProtocolo+0x82>
			bufferRecepcao->tensaoPainel = dadoRecebido;
 482:	82 2f       	mov	r24, r18
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 87       	std	Z+8, r25	; 0x08
 488:	87 83       	std	Z+7, r24	; 0x07
			bufferRecepcao->qntdDadosLido++;			
 48a:	81 81       	ldd	r24, Z+1	; 0x01
 48c:	92 81       	ldd	r25, Z+2	; 0x02
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	92 83       	std	Z+2, r25	; 0x02
 492:	81 83       	std	Z+1, r24	; 0x01
			bufferRecepcao->iniciado = 'n';
 494:	8e e6       	ldi	r24, 0x6E	; 110
 496:	83 83       	std	Z+3, r24	; 0x03
			bufferRecepcao->completo = 'y';
 498:	89 e7       	ldi	r24, 0x79	; 121
 49a:	84 83       	std	Z+4, r24	; 0x04
			bufferRecepcao->qntdDadosLido = 0;
 49c:	12 82       	std	Z+2, r1	; 0x02
 49e:	11 82       	std	Z+1, r1	; 0x01
		}
	}		
			
	return bufferRecepcao->completo;
 4a0:	84 81       	ldd	r24, Z+4	; 0x04
}	
 4a2:	08 95       	ret

000004a4 <TransmitiBuffer>:
//----------------------------------------------------------------------------

void TransmitiBuffer(
	BufferDados* bufferDados
)
{
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	df 93       	push	r29
 4aa:	cf 93       	push	r28
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <TransmitiBuffer+0xa>
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <TransmitiBuffer+0xc>
 4b0:	0f 92       	push	r0
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	8c 01       	movw	r16, r24
	volatile uint8_t indicaInicioTransmissao = 'S';
 4b8:	83 e5       	ldi	r24, 0x53	; 83
 4ba:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t direcao;
	volatile uint8_t dutyLadoEsq;
	volatile uint8_t dutyLadoDir;
	volatile uint8_t sentido;
	
	sentido = CalculaSentido();
 4bc:	0e 94 a9 03 	call	0x752	; 0x752 <CalculaSentido>
 4c0:	8d 83       	std	Y+5, r24	; 0x05
	bufferDados->sentido = sentido;
 4c2:	8d 81       	ldd	r24, Y+5	; 0x05
 4c4:	f8 01       	movw	r30, r16
 4c6:	86 87       	std	Z+14, r24	; 0x0e
	
	direcao = DirecaoCarro(sentido);
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	0e 94 24 04 	call	0x848	; 0x848 <DirecaoCarro>
 4ce:	8a 83       	std	Y+2, r24	; 0x02
	bufferDados->direcao = direcao;
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	f8 01       	movw	r30, r16
 4d4:	85 87       	std	Z+13, r24	; 0x0d
	dutyLadoEsq = CalculaDutyCycleLadoEsq();
 4d6:	0e 94 c6 04 	call	0x98c	; 0x98c <CalculaDutyCycleLadoEsq>
 4da:	8b 83       	std	Y+3, r24	; 0x03
	bufferDados->dutyLadoEsq = dutyLadoEsq;
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	f8 01       	movw	r30, r16
 4e2:	92 87       	std	Z+10, r25	; 0x0a
 4e4:	81 87       	std	Z+9, r24	; 0x09
	dutyLadoDir = CalculaDutyCycleLadoDir();
 4e6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <CalculaDutyCycleLadoDir>
 4ea:	8c 83       	std	Y+4, r24	; 0x04
	bufferDados->dutyLadoDir = dutyLadoDir;
 4ec:	8c 81       	ldd	r24, Y+4	; 0x04
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	f8 01       	movw	r30, r16
 4f2:	94 87       	std	Z+12, r25	; 0x0c
 4f4:	83 87       	std	Z+11, r24	; 0x0b
	
	/*Indica o inicio do protocolo*/
	Usart_Transmit(indicaInicioTransmissao);
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
	/*Indica a direcao do carro*/
	Usart_Transmit(direcao);
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
	/*Indica o duty cicle motor 1*/
	Usart_Transmit(dutyLadoEsq);
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
	/*Indica o duty cicle motor 1*/
	Usart_Transmit(dutyLadoDir);
 508:	8c 81       	ldd	r24, Y+4	; 0x04
 50a:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
	/*Indica se deve alterar a fonte de alimentacao*/
	Usart_Transmit('0');//falta ajustar para enviar 1 quando o botão for pressionado
 50e:	80 e3       	ldi	r24, 0x30	; 48
 510:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
}
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	cf 91       	pop	r28
 520:	df 91       	pop	r29
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	08 95       	ret

00000528 <MostraDadosLCD>:
//----------------------------------------------------------------------------

void MostraDadosLCD(
	BufferDados* bufferDados
)
{
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	df 93       	push	r29
 532:	cf 93       	push	r28
 534:	00 d0       	rcall	.+0      	; 0x536 <MostraDadosLCD+0xe>
 536:	0f 92       	push	r0
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	7c 01       	movw	r14, r24
	/*Imprimi tudo na primeira vez*/
	static uint8_t contador = 20;
	unsigned char caracConvertido[3];
			
	LCD_setPos(1,3);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	63 e0       	ldi	r22, 0x03	; 3
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
	CvrtNum2CaracterIndividual(bufferDados->dutyLadoEsq	, caracConvertido, 3);
 54a:	f7 01       	movw	r30, r14
 54c:	81 85       	ldd	r24, Z+9	; 0x09
 54e:	92 85       	ldd	r25, Z+10	; 0x0a
 550:	8e 01       	movw	r16, r28
 552:	0f 5f       	subi	r16, 0xFF	; 255
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	b8 01       	movw	r22, r16
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	0e 94 3b 03 	call	0x676	; 0x676 <CvrtNum2CaracterIndividual>
	escreve_LCD(caracConvertido);
 55e:	c8 01       	movw	r24, r16
 560:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
	
	LCD_setPos(2,3);
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
	CvrtNum2CaracterIndividual(bufferDados->dutyLadoDir,  caracConvertido, 3);
 570:	f7 01       	movw	r30, r14
 572:	83 85       	ldd	r24, Z+11	; 0x0b
 574:	94 85       	ldd	r25, Z+12	; 0x0c
 576:	b8 01       	movw	r22, r16
 578:	43 e0       	ldi	r20, 0x03	; 3
 57a:	0e 94 3b 03 	call	0x676	; 0x676 <CvrtNum2CaracterIndividual>
	escreve_LCD(caracConvertido);
 57e:	c8 01       	movw	r24, r16
 580:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
	
	/*Para o display não ficar piscando*/
	if(contador > 16){				
 584:	80 91 10 01 	lds	r24, 0x0110
 588:	81 31       	cpi	r24, 0x11	; 17
 58a:	08 f4       	brcc	.+2      	; 0x58e <MostraDadosLCD+0x66>
 58c:	65 c0       	rjmp	.+202    	; 0x658 <MostraDadosLCD+0x130>
		LCD_setPos(1,0);
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
		escreve_LCD("M1:");
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
	
		LCD_setPos(1,7);
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	67 e0       	ldi	r22, 0x07	; 7
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
		escreve_LCD("B:");
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
		CvrtNum2CaracterIndividual(bufferDados->tensaoBateria, caracConvertido, 2);
 5b6:	f7 01       	movw	r30, r14
 5b8:	85 81       	ldd	r24, Z+5	; 0x05
 5ba:	96 81       	ldd	r25, Z+6	; 0x06
 5bc:	8e 01       	movw	r16, r28
 5be:	0f 5f       	subi	r16, 0xFF	; 255
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255
 5c2:	b8 01       	movw	r22, r16
 5c4:	42 e0       	ldi	r20, 0x02	; 2
 5c6:	0e 94 3b 03 	call	0x676	; 0x676 <CvrtNum2CaracterIndividual>
		escreve_LCD(caracConvertido);
 5ca:	c8 01       	movw	r24, r16
 5cc:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
		EscreveCaracterLCD('V');
 5d0:	86 e5       	ldi	r24, 0x56	; 86
 5d2:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
	
		LCD_setPos(1,13);
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	6d e0       	ldi	r22, 0x0D	; 13
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
		EscreveCaracterLCD('[');
 5e2:	8b e5       	ldi	r24, 0x5B	; 91
 5e4:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
		EscreveCaracterLCD(bufferDados->direcao);
 5e8:	f7 01       	movw	r30, r14
 5ea:	85 85       	ldd	r24, Z+13	; 0x0d
 5ec:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
		EscreveCaracterLCD(']');
 5f0:	8d e5       	ldi	r24, 0x5D	; 93
 5f2:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
	
		LCD_setPos(2,0);
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
		escreve_LCD("M2:");
 602:	88 e0       	ldi	r24, 0x08	; 8
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
		
		LCD_setPos(2,7);
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	67 e0       	ldi	r22, 0x07	; 7
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
		escreve_LCD("P:");
 616:	8c e0       	ldi	r24, 0x0C	; 12
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
		CvrtNum2CaracterIndividual(bufferDados->tensaoPainel, caracConvertido, 2);
 61e:	f7 01       	movw	r30, r14
 620:	87 81       	ldd	r24, Z+7	; 0x07
 622:	90 85       	ldd	r25, Z+8	; 0x08
 624:	b8 01       	movw	r22, r16
 626:	42 e0       	ldi	r20, 0x02	; 2
 628:	0e 94 3b 03 	call	0x676	; 0x676 <CvrtNum2CaracterIndividual>
		escreve_LCD(caracConvertido);
 62c:	c8 01       	movw	r24, r16
 62e:	0e 94 bc 01 	call	0x378	; 0x378 <escreve_LCD>
		EscreveCaracterLCD('V');
 632:	86 e5       	ldi	r24, 0x56	; 86
 634:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
	
		LCD_setPos(2,13);
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	6d e0       	ldi	r22, 0x0D	; 13
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_setPos>
		EscreveCaracterLCD('F');
 644:	86 e4       	ldi	r24, 0x46	; 70
 646:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
		EscreveCaracterLCD(':');
 64a:	8a e3       	ldi	r24, 0x3A	; 58
 64c:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
		EscreveCaracterLCD(bufferDados->fonteAlimentacao);	
 650:	f7 01       	movw	r30, r14
 652:	80 81       	ld	r24, Z
 654:	0e 94 cc 01 	call	0x398	; 0x398 <EscreveCaracterLCD>
	}
		
	contador++;
 658:	80 91 10 01 	lds	r24, 0x0110
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 10 01 	sts	0x0110, r24
}
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	ff 90       	pop	r15
 672:	ef 90       	pop	r14
 674:	08 95       	ret

00000676 <CvrtNum2CaracterIndividual>:
void CvrtNum2CaracterIndividual(
	uint16_t valor, 
	unsigned char* caracterConvertido,
	uint8_t tamanho
)		
{											
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	9b 01       	movw	r18, r22
	uint8_t contIni;
	for(contIni = 0; contIni < (tamanho - 1); contIni++)
 67e:	a4 2f       	mov	r26, r20
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	11 97       	sbiw	r26, 0x01	; 1
 684:	1a 16       	cp	r1, r26
 686:	1b 06       	cpc	r1, r27
 688:	6c f4       	brge	.+26     	; 0x6a4 <CvrtNum2CaracterIndividual+0x2e>
 68a:	50 e0       	ldi	r21, 0x00	; 0
		*(caracterConvertido + contIni) = 0x30; 
 68c:	10 e3       	ldi	r17, 0x30	; 48
 68e:	f9 01       	movw	r30, r18
 690:	e5 0f       	add	r30, r21
 692:	f1 1d       	adc	r31, r1
 694:	10 83       	st	Z, r17
	unsigned char* caracterConvertido,
	uint8_t tamanho
)		
{											
	uint8_t contIni;
	for(contIni = 0; contIni < (tamanho - 1); contIni++)
 696:	5f 5f       	subi	r21, 0xFF	; 255
 698:	65 2f       	mov	r22, r21
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	6a 17       	cp	r22, r26
 69e:	7b 07       	cpc	r23, r27
 6a0:	b4 f3       	brlt	.-20     	; 0x68e <CvrtNum2CaracterIndividual+0x18>
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <CvrtNum2CaracterIndividual+0x30>
 6a4:	50 e0       	ldi	r21, 0x00	; 0
		*(caracterConvertido + contIni) = 0x30; 
	*(caracterConvertido + contIni + 1) = '\0';
 6a6:	f9 01       	movw	r30, r18
 6a8:	e5 0f       	add	r30, r21
 6aa:	f1 1d       	adc	r31, r1
 6ac:	11 82       	std	Z+1, r1	; 0x01
	
	unsigned char cont = tamanho - 1;
 6ae:	41 50       	subi	r20, 0x01	; 1
	do{
		/*+0x30 para converter de caracter para número*/
		caracterConvertido[cont--] = (valor % 10) + 0x30;											
 6b0:	ca e0       	ldi	r28, 0x0A	; 10
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
 6b4:	f9 01       	movw	r30, r18
 6b6:	e4 0f       	add	r30, r20
 6b8:	f1 1d       	adc	r31, r1
 6ba:	be 01       	movw	r22, r28
 6bc:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodhi4>
 6c0:	80 5d       	subi	r24, 0xD0	; 208
 6c2:	80 83       	st	Z, r24
 6c4:	41 50       	subi	r20, 0x01	; 1
		valor /= 10;								
 6c6:	86 2f       	mov	r24, r22
 6c8:	97 2f       	mov	r25, r23
	}while (valor != 0);
 6ca:	00 97       	sbiw	r24, 0x00	; 0
 6cc:	99 f7       	brne	.-26     	; 0x6b4 <CvrtNum2CaracterIndividual+0x3e>
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	08 95       	ret

000006d6 <ValorLidoADEixoX>:

//---------------------------------------------------------------------------

uint16_t ValorLidoADEixoX()
{
	uint16_t adcX = ADC_Read(AD_EIXO_X);
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_Read>
		
	return adcX;	
}
 6dc:	08 95       	ret

000006de <ValorLidoADEixoY>:

//---------------------------------------------------------------------------

uint16_t ValorLidoADEixoY()
{
	uint16_t adcY = ADC_Read(AD_EIXO_Y);
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_Read>
	
	return adcY;	
}
 6e4:	08 95       	ret

000006e6 <PontoXNaPosInic>:

//---------------------------------------------------------------------------

uint8_t PontoXNaPosInic()
{
	return ((ValorLidoADEixoX() >= limInfPontoInicX_g ) && (ValorLidoADEixoX() <= limSupPontoInicX_g));
 6e6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ValorLidoADEixoX>
 6ea:	20 91 13 01 	lds	r18, 0x0113
 6ee:	30 91 14 01 	lds	r19, 0x0114
 6f2:	82 17       	cp	r24, r18
 6f4:	93 07       	cpc	r25, r19
 6f6:	78 f0       	brcs	.+30     	; 0x716 <PontoXNaPosInic+0x30>
 6f8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ValorLidoADEixoX>
	return adcY;	
}

//---------------------------------------------------------------------------

uint8_t PontoXNaPosInic()
 6fc:	21 e0       	ldi	r18, 0x01	; 1
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	40 91 15 01 	lds	r20, 0x0115
 704:	50 91 16 01 	lds	r21, 0x0116
 708:	48 17       	cp	r20, r24
 70a:	59 07       	cpc	r21, r25
 70c:	10 f4       	brcc	.+4      	; 0x712 <PontoXNaPosInic+0x2c>
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	30 e0       	ldi	r19, 0x00	; 0
{
	return ((ValorLidoADEixoX() >= limInfPontoInicX_g ) && (ValorLidoADEixoX() <= limSupPontoInicX_g));
 712:	c9 01       	movw	r24, r18
 714:	08 95       	ret
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
}
 71a:	08 95       	ret

0000071c <PontoYNaPosInic>:

//---------------------------------------------------------------------------

uint8_t PontoYNaPosInic()
{
	return ((ValorLidoADEixoY() >= limInfPontoInicY_g ) && (ValorLidoADEixoY() <= limSupPontoInicY_g));	
 71c:	0e 94 6f 03 	call	0x6de	; 0x6de <ValorLidoADEixoY>
 720:	20 91 19 01 	lds	r18, 0x0119
 724:	30 91 1a 01 	lds	r19, 0x011A
 728:	82 17       	cp	r24, r18
 72a:	93 07       	cpc	r25, r19
 72c:	78 f0       	brcs	.+30     	; 0x74c <PontoYNaPosInic+0x30>
 72e:	0e 94 6f 03 	call	0x6de	; 0x6de <ValorLidoADEixoY>
	return ((ValorLidoADEixoX() >= limInfPontoInicX_g ) && (ValorLidoADEixoX() <= limSupPontoInicX_g));
}

//---------------------------------------------------------------------------

uint8_t PontoYNaPosInic()
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	40 91 1b 01 	lds	r20, 0x011B
 73a:	50 91 1c 01 	lds	r21, 0x011C
 73e:	48 17       	cp	r20, r24
 740:	59 07       	cpc	r21, r25
 742:	10 f4       	brcc	.+4      	; 0x748 <PontoYNaPosInic+0x2c>
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	30 e0       	ldi	r19, 0x00	; 0
{
	return ((ValorLidoADEixoY() >= limInfPontoInicY_g ) && (ValorLidoADEixoY() <= limSupPontoInicY_g));	
 748:	c9 01       	movw	r24, r18
 74a:	08 95       	ret
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
}
 750:	08 95       	ret

00000752 <CalculaSentido>:
}

//---------------------------------------------------------------------------

unsigned char CalculaSentido()
{
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
	unsigned char direcao = 'P';
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
 75a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ValorLidoADEixoX>
 75e:	8c 01       	movw	r16, r24
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
 760:	0e 94 6f 03 	call	0x6de	; 0x6de <ValorLidoADEixoY>
 764:	ec 01       	movw	r28, r24
	
	/*Andando Frente*/		
	if((valorLidoADEixoY > limSupPontoInicY_g) && PontoXNaPosInic())
 766:	80 91 1b 01 	lds	r24, 0x011B
 76a:	90 91 1c 01 	lds	r25, 0x011C
 76e:	8c 17       	cp	r24, r28
 770:	9d 07       	cpc	r25, r29
 772:	28 f4       	brcc	.+10     	; 0x77e <CalculaSentido+0x2c>
 774:	0e 94 73 03 	call	0x6e6	; 0x6e6 <PontoXNaPosInic>
 778:	88 23       	and	r24, r24
 77a:	09 f0       	breq	.+2      	; 0x77e <CalculaSentido+0x2c>
 77c:	4f c0       	rjmp	.+158    	; 0x81c <CalculaSentido+0xca>
		direcao = 'F';
	
	/*Andando Frente Direita*/
	else if((valorLidoADEixoX > limSupPontoInicX_g) && 
 77e:	80 91 15 01 	lds	r24, 0x0115
 782:	90 91 16 01 	lds	r25, 0x0116
 786:	80 17       	cp	r24, r16
 788:	91 07       	cpc	r25, r17
 78a:	68 f4       	brcc	.+26     	; 0x7a6 <CalculaSentido+0x54>
 78c:	80 91 1b 01 	lds	r24, 0x011B
 790:	90 91 1c 01 	lds	r25, 0x011C
 794:	8c 17       	cp	r24, r28
 796:	9d 07       	cpc	r25, r29
 798:	08 f4       	brcc	.+2      	; 0x79c <CalculaSentido+0x4a>
 79a:	42 c0       	rjmp	.+132    	; 0x820 <CalculaSentido+0xce>
			((valorLidoADEixoY > limSupPontoInicY_g) || PontoYNaPosInic()))
 79c:	0e 94 8e 03 	call	0x71c	; 0x71c <PontoYNaPosInic>
 7a0:	88 23       	and	r24, r24
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <CalculaSentido+0x54>
 7a4:	3f c0       	rjmp	.+126    	; 0x824 <CalculaSentido+0xd2>
		direcao = 'D';
		
	/*Andando Frente Esquerda*/	
	else if((valorLidoADEixoX < limInfPontoInicX_g) && 
 7a6:	80 91 13 01 	lds	r24, 0x0113
 7aa:	90 91 14 01 	lds	r25, 0x0114
 7ae:	08 17       	cp	r16, r24
 7b0:	19 07       	cpc	r17, r25
 7b2:	58 f4       	brcc	.+22     	; 0x7ca <CalculaSentido+0x78>
 7b4:	80 91 1b 01 	lds	r24, 0x011B
 7b8:	90 91 1c 01 	lds	r25, 0x011C
 7bc:	8c 17       	cp	r24, r28
 7be:	9d 07       	cpc	r25, r29
 7c0:	98 f1       	brcs	.+102    	; 0x828 <CalculaSentido+0xd6>
			((valorLidoADEixoY > limSupPontoInicY_g) ||  PontoYNaPosInic()))
 7c2:	0e 94 8e 03 	call	0x71c	; 0x71c <PontoYNaPosInic>
 7c6:	88 23       	and	r24, r24
 7c8:	89 f5       	brne	.+98     	; 0x82c <CalculaSentido+0xda>
		direcao = 'E';	
		
	/*Andando Tras*/
	else if((valorLidoADEixoY < limInfPontoInicY_g) && PontoXNaPosInic())
 7ca:	80 91 19 01 	lds	r24, 0x0119
 7ce:	90 91 1a 01 	lds	r25, 0x011A
 7d2:	c8 17       	cp	r28, r24
 7d4:	d9 07       	cpc	r29, r25
 7d6:	20 f4       	brcc	.+8      	; 0x7e0 <CalculaSentido+0x8e>
 7d8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <PontoXNaPosInic>
 7dc:	88 23       	and	r24, r24
 7de:	41 f5       	brne	.+80     	; 0x830 <CalculaSentido+0xde>
		direcao = 'T';
		
	/*Andando Tras Direita*/
	else if((valorLidoADEixoX > limSupPontoInicX_g) && (valorLidoADEixoY < limInfPontoInicY_g))
 7e0:	80 91 15 01 	lds	r24, 0x0115
 7e4:	90 91 16 01 	lds	r25, 0x0116
 7e8:	80 17       	cp	r24, r16
 7ea:	91 07       	cpc	r25, r17
 7ec:	38 f4       	brcc	.+14     	; 0x7fc <CalculaSentido+0xaa>
 7ee:	80 91 19 01 	lds	r24, 0x0119
 7f2:	90 91 1a 01 	lds	r25, 0x011A
 7f6:	c8 17       	cp	r28, r24
 7f8:	d9 07       	cpc	r29, r25
 7fa:	e0 f0       	brcs	.+56     	; 0x834 <CalculaSentido+0xe2>
		direcao = 'R';
		
	/*Andando Tras Esquerda*/	
	else if((valorLidoADEixoX < limInfPontoInicX_g) && (valorLidoADEixoY < limInfPontoInicY_g))
 7fc:	80 91 13 01 	lds	r24, 0x0113
 800:	90 91 14 01 	lds	r25, 0x0114
 804:	08 17       	cp	r16, r24
 806:	19 07       	cpc	r17, r25
 808:	b8 f4       	brcc	.+46     	; 0x838 <CalculaSentido+0xe6>
 80a:	80 91 19 01 	lds	r24, 0x0119
 80e:	90 91 1a 01 	lds	r25, 0x011A
 812:	c8 17       	cp	r28, r24
 814:	d9 07       	cpc	r29, r25
 816:	90 f0       	brcs	.+36     	; 0x83c <CalculaSentido+0xea>
		direcao = 'L';	
		
	else 
		direcao = 'P';
 818:	80 e5       	ldi	r24, 0x50	; 80
 81a:	11 c0       	rjmp	.+34     	; 0x83e <CalculaSentido+0xec>
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
	
	/*Andando Frente*/		
	if((valorLidoADEixoY > limSupPontoInicY_g) && PontoXNaPosInic())
		direcao = 'F';
 81c:	86 e4       	ldi	r24, 0x46	; 70
 81e:	0f c0       	rjmp	.+30     	; 0x83e <CalculaSentido+0xec>
	
	/*Andando Frente Direita*/
	else if((valorLidoADEixoX > limSupPontoInicX_g) && 
			((valorLidoADEixoY > limSupPontoInicY_g) || PontoYNaPosInic()))
		direcao = 'D';
 820:	84 e4       	ldi	r24, 0x44	; 68
 822:	0d c0       	rjmp	.+26     	; 0x83e <CalculaSentido+0xec>
 824:	84 e4       	ldi	r24, 0x44	; 68
 826:	0b c0       	rjmp	.+22     	; 0x83e <CalculaSentido+0xec>
		
	/*Andando Frente Esquerda*/	
	else if((valorLidoADEixoX < limInfPontoInicX_g) && 
			((valorLidoADEixoY > limSupPontoInicY_g) ||  PontoYNaPosInic()))
		direcao = 'E';	
 828:	85 e4       	ldi	r24, 0x45	; 69
 82a:	09 c0       	rjmp	.+18     	; 0x83e <CalculaSentido+0xec>
 82c:	85 e4       	ldi	r24, 0x45	; 69
 82e:	07 c0       	rjmp	.+14     	; 0x83e <CalculaSentido+0xec>
		
	/*Andando Tras*/
	else if((valorLidoADEixoY < limInfPontoInicY_g) && PontoXNaPosInic())
		direcao = 'T';
 830:	84 e5       	ldi	r24, 0x54	; 84
 832:	05 c0       	rjmp	.+10     	; 0x83e <CalculaSentido+0xec>
		
	/*Andando Tras Direita*/
	else if((valorLidoADEixoX > limSupPontoInicX_g) && (valorLidoADEixoY < limInfPontoInicY_g))
		direcao = 'R';
 834:	82 e5       	ldi	r24, 0x52	; 82
 836:	03 c0       	rjmp	.+6      	; 0x83e <CalculaSentido+0xec>
	/*Andando Tras Esquerda*/	
	else if((valorLidoADEixoX < limInfPontoInicX_g) && (valorLidoADEixoY < limInfPontoInicY_g))
		direcao = 'L';	
		
	else 
		direcao = 'P';
 838:	80 e5       	ldi	r24, 0x50	; 80
 83a:	01 c0       	rjmp	.+2      	; 0x83e <CalculaSentido+0xec>
	else if((valorLidoADEixoX > limSupPontoInicX_g) && (valorLidoADEixoY < limInfPontoInicY_g))
		direcao = 'R';
		
	/*Andando Tras Esquerda*/	
	else if((valorLidoADEixoX < limInfPontoInicX_g) && (valorLidoADEixoY < limInfPontoInicY_g))
		direcao = 'L';	
 83c:	8c e4       	ldi	r24, 0x4C	; 76
		
	else 
		direcao = 'P';
		
	return direcao;
}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	08 95       	ret

00000848 <DirecaoCarro>:
//---------------------------------------------------------------------------

unsigned char DirecaoCarro()
{
	static TEstadoCarro estadoCarro_g = PARADO;
	unsigned char sentido = CalculaSentido();
 848:	0e 94 a9 03 	call	0x752	; 0x752 <CalculaSentido>
		
	unsigned char direcao = 'P';
	switch(estadoCarro_g) {
 84c:	90 91 1d 01 	lds	r25, 0x011D
 850:	92 30       	cpi	r25, 0x02	; 2
 852:	d1 f0       	breq	.+52     	; 0x888 <DirecaoCarro+0x40>
 854:	95 30       	cpi	r25, 0x05	; 5
 856:	29 f1       	breq	.+74     	; 0x8a2 <DirecaoCarro+0x5a>
 858:	91 30       	cpi	r25, 0x01	; 1
 85a:	81 f5       	brne	.+96     	; 0x8bc <DirecaoCarro+0x74>
		case PARADO:
			if((sentido == 'F') || (sentido == 'D') || (sentido == 'E')) {
 85c:	86 34       	cpi	r24, 0x46	; 70
 85e:	21 f0       	breq	.+8      	; 0x868 <DirecaoCarro+0x20>
 860:	84 34       	cpi	r24, 0x44	; 68
 862:	11 f0       	breq	.+4      	; 0x868 <DirecaoCarro+0x20>
 864:	85 34       	cpi	r24, 0x45	; 69
 866:	29 f4       	brne	.+10     	; 0x872 <DirecaoCarro+0x2a>
				direcao = 'F';
				estadoCarro_g = ANDANDO_FRENTE;
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	80 93 1d 01 	sts	0x011D, r24
		
	unsigned char direcao = 'P';
	switch(estadoCarro_g) {
		case PARADO:
			if((sentido == 'F') || (sentido == 'D') || (sentido == 'E')) {
				direcao = 'F';
 86e:	86 e4       	ldi	r24, 0x46	; 70
				estadoCarro_g = ANDANDO_FRENTE;
 870:	08 95       	ret
			}				
			else if((sentido == 'T') || (sentido == 'R') || (sentido == 'L')) {
 872:	84 35       	cpi	r24, 0x54	; 84
 874:	21 f0       	breq	.+8      	; 0x87e <DirecaoCarro+0x36>
 876:	82 35       	cpi	r24, 0x52	; 82
 878:	11 f0       	breq	.+4      	; 0x87e <DirecaoCarro+0x36>
 87a:	8c 34       	cpi	r24, 0x4C	; 76
 87c:	09 f5       	brne	.+66     	; 0x8c0 <DirecaoCarro+0x78>
				direcao = 'T';
				estadoCarro_g = ANDANDO_TRAS;
 87e:	85 e0       	ldi	r24, 0x05	; 5
 880:	80 93 1d 01 	sts	0x011D, r24
			if((sentido == 'F') || (sentido == 'D') || (sentido == 'E')) {
				direcao = 'F';
				estadoCarro_g = ANDANDO_FRENTE;
			}				
			else if((sentido == 'T') || (sentido == 'R') || (sentido == 'L')) {
				direcao = 'T';
 884:	84 e5       	ldi	r24, 0x54	; 84
				estadoCarro_g = ANDANDO_TRAS;
 886:	08 95       	ret
			}else direcao = 'P';
			break;	
		
		case ANDANDO_FRENTE:
			if ((sentido == 'T') || (sentido == 'R') || (sentido == 'L') || (sentido == 'P')) {
 888:	84 35       	cpi	r24, 0x54	; 84
 88a:	31 f0       	breq	.+12     	; 0x898 <DirecaoCarro+0x50>
 88c:	82 35       	cpi	r24, 0x52	; 82
 88e:	21 f0       	breq	.+8      	; 0x898 <DirecaoCarro+0x50>
 890:	8c 34       	cpi	r24, 0x4C	; 76
 892:	11 f0       	breq	.+4      	; 0x898 <DirecaoCarro+0x50>
 894:	80 35       	cpi	r24, 0x50	; 80
 896:	b1 f4       	brne	.+44     	; 0x8c4 <DirecaoCarro+0x7c>
				direcao = 'P';
				estadoCarro_g = PARADO;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 93 1d 01 	sts	0x011D, r24
			}else direcao = 'P';
			break;	
		
		case ANDANDO_FRENTE:
			if ((sentido == 'T') || (sentido == 'R') || (sentido == 'L') || (sentido == 'P')) {
				direcao = 'P';
 89e:	80 e5       	ldi	r24, 0x50	; 80
				estadoCarro_g = PARADO;
 8a0:	08 95       	ret
			}else direcao = 'F';	
			break;			
		
		case ANDANDO_TRAS:
			if ((sentido == 'F') || (sentido == 'D') || (sentido == 'E') || (sentido == 'P')) {
 8a2:	86 34       	cpi	r24, 0x46	; 70
 8a4:	31 f0       	breq	.+12     	; 0x8b2 <DirecaoCarro+0x6a>
 8a6:	84 34       	cpi	r24, 0x44	; 68
 8a8:	21 f0       	breq	.+8      	; 0x8b2 <DirecaoCarro+0x6a>
 8aa:	85 34       	cpi	r24, 0x45	; 69
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <DirecaoCarro+0x6a>
 8ae:	80 35       	cpi	r24, 0x50	; 80
 8b0:	59 f4       	brne	.+22     	; 0x8c8 <DirecaoCarro+0x80>
				direcao = 'P';
				estadoCarro_g = PARADO;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 93 1d 01 	sts	0x011D, r24
			}else direcao = 'F';	
			break;			
		
		case ANDANDO_TRAS:
			if ((sentido == 'F') || (sentido == 'D') || (sentido == 'E') || (sentido == 'P')) {
				direcao = 'P';
 8b8:	80 e5       	ldi	r24, 0x50	; 80
				estadoCarro_g = PARADO;
 8ba:	08 95       	ret
			}else direcao = 'T';	
			break;		
			
		default:
			direcao = 'P';
 8bc:	80 e5       	ldi	r24, 0x50	; 80
 8be:	08 95       	ret
				estadoCarro_g = ANDANDO_FRENTE;
			}				
			else if((sentido == 'T') || (sentido == 'R') || (sentido == 'L')) {
				direcao = 'T';
				estadoCarro_g = ANDANDO_TRAS;
			}else direcao = 'P';
 8c0:	80 e5       	ldi	r24, 0x50	; 80
 8c2:	08 95       	ret
		
		case ANDANDO_FRENTE:
			if ((sentido == 'T') || (sentido == 'R') || (sentido == 'L') || (sentido == 'P')) {
				direcao = 'P';
				estadoCarro_g = PARADO;
			}else direcao = 'F';	
 8c4:	86 e4       	ldi	r24, 0x46	; 70
 8c6:	08 95       	ret
		
		case ANDANDO_TRAS:
			if ((sentido == 'F') || (sentido == 'D') || (sentido == 'E') || (sentido == 'P')) {
				direcao = 'P';
				estadoCarro_g = PARADO;
			}else direcao = 'T';	
 8c8:	84 e5       	ldi	r24, 0x54	; 84
		default:
			direcao = 'P';
	}
	
	return direcao;
}
 8ca:	08 95       	ret

000008cc <CalculaPorcentoPosicaoEixoY>:
			 posYTras25PorCento = 480,
			 posY0PorCento = 522;		
		 
	uint8_t valorPorCentoEixoY; 
	
	if ((valorLidoADEixoY > posYFrente75PorCento) || (valorLidoADEixoY < posYTras75PorCento)) 
 8cc:	23 e0       	ldi	r18, 0x03	; 3
 8ce:	85 38       	cpi	r24, 0x85	; 133
 8d0:	92 07       	cpc	r25, r18
 8d2:	d0 f4       	brcc	.+52     	; 0x908 <__stack+0x9>
 8d4:	21 e0       	ldi	r18, 0x01	; 1
 8d6:	8c 32       	cpi	r24, 0x2C	; 44
 8d8:	92 07       	cpc	r25, r18
 8da:	c0 f0       	brcs	.+48     	; 0x90c <__stack+0xd>
		valorPorCentoEixoY = 100;
				
	else if((valorLidoADEixoY > posYFrente50PorCento) || (valorLidoADEixoY < posYTras50PorCento)) 
 8dc:	23 e0       	ldi	r18, 0x03	; 3
 8de:	88 30       	cpi	r24, 0x08	; 8
 8e0:	92 07       	cpc	r25, r18
 8e2:	b0 f4       	brcc	.+44     	; 0x910 <__stack+0x11>
 8e4:	21 e0       	ldi	r18, 0x01	; 1
 8e6:	86 38       	cpi	r24, 0x86	; 134
 8e8:	92 07       	cpc	r25, r18
 8ea:	a0 f0       	brcs	.+40     	; 0x914 <__stack+0x15>
		valorPorCentoEixoY = 75;
		
	else if((valorLidoADEixoY > posYFrente25PorCento) || (valorLidoADEixoY < posYTras25PorCento)) 
 8ec:	22 e0       	ldi	r18, 0x02	; 2
 8ee:	8b 38       	cpi	r24, 0x8B	; 139
 8f0:	92 07       	cpc	r25, r18
 8f2:	90 f4       	brcc	.+36     	; 0x918 <__stack+0x19>
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	80 3e       	cpi	r24, 0xE0	; 224
 8f8:	92 07       	cpc	r25, r18
 8fa:	80 f0       	brcs	.+32     	; 0x91c <__stack+0x1d>
		valorPorCentoEixoY = 50;
	
	else if(PontoYNaPosInic())
 8fc:	0e 94 8e 03 	call	0x71c	; 0x71c <PontoYNaPosInic>
 900:	88 23       	and	r24, r24
 902:	71 f0       	breq	.+28     	; 0x920 <__stack+0x21>
		valorPorCentoEixoY = 0;
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	08 95       	ret
			 posY0PorCento = 522;		
		 
	uint8_t valorPorCentoEixoY; 
	
	if ((valorLidoADEixoY > posYFrente75PorCento) || (valorLidoADEixoY < posYTras75PorCento)) 
		valorPorCentoEixoY = 100;
 908:	84 e6       	ldi	r24, 0x64	; 100
 90a:	08 95       	ret
 90c:	84 e6       	ldi	r24, 0x64	; 100
 90e:	08 95       	ret
				
	else if((valorLidoADEixoY > posYFrente50PorCento) || (valorLidoADEixoY < posYTras50PorCento)) 
		valorPorCentoEixoY = 75;
 910:	8b e4       	ldi	r24, 0x4B	; 75
 912:	08 95       	ret
 914:	8b e4       	ldi	r24, 0x4B	; 75
 916:	08 95       	ret
		
	else if((valorLidoADEixoY > posYFrente25PorCento) || (valorLidoADEixoY < posYTras25PorCento)) 
		valorPorCentoEixoY = 50;
 918:	82 e3       	ldi	r24, 0x32	; 50
 91a:	08 95       	ret
 91c:	82 e3       	ldi	r24, 0x32	; 50
 91e:	08 95       	ret
	
	else if(PontoYNaPosInic())
		valorPorCentoEixoY = 0;
			
	else  
		valorPorCentoEixoY = 25;
 920:	89 e1       	ldi	r24, 0x19	; 25
				
	return valorPorCentoEixoY;
}
 922:	08 95       	ret

00000924 <CalculaPorcentoPosicaoEixoX>:
			 posXTras25PorCento = 480,
			 posX0PorCento = 498;
		 
	uint16_t valorPorCentoEixoX; 
	
	if ((valorLidoADEixoX > posXFrente75PorCento) ||  (valorLidoADEixoX < posXTras75PorCento) ) 
 924:	23 e0       	ldi	r18, 0x03	; 3
 926:	85 38       	cpi	r24, 0x85	; 133
 928:	92 07       	cpc	r25, r18
 92a:	d8 f4       	brcc	.+54     	; 0x962 <CalculaPorcentoPosicaoEixoX+0x3e>
 92c:	21 e0       	ldi	r18, 0x01	; 1
 92e:	8c 32       	cpi	r24, 0x2C	; 44
 930:	92 07       	cpc	r25, r18
 932:	d0 f0       	brcs	.+52     	; 0x968 <CalculaPorcentoPosicaoEixoX+0x44>
		valorPorCentoEixoX = 100;
				
	else if((valorLidoADEixoX > posXFrente50PorCento) || (valorLidoADEixoX < posXTras50PorCento)) 
 934:	23 e0       	ldi	r18, 0x03	; 3
 936:	88 30       	cpi	r24, 0x08	; 8
 938:	92 07       	cpc	r25, r18
 93a:	c8 f4       	brcc	.+50     	; 0x96e <CalculaPorcentoPosicaoEixoX+0x4a>
 93c:	21 e0       	ldi	r18, 0x01	; 1
 93e:	86 38       	cpi	r24, 0x86	; 134
 940:	92 07       	cpc	r25, r18
 942:	c0 f0       	brcs	.+48     	; 0x974 <CalculaPorcentoPosicaoEixoX+0x50>
		valorPorCentoEixoX = 75;
		
	else if((valorLidoADEixoX > posXFrente25PorCento) || (valorLidoADEixoX < posXTras25PorCento) ) 
 944:	22 e0       	ldi	r18, 0x02	; 2
 946:	8b 38       	cpi	r24, 0x8B	; 139
 948:	92 07       	cpc	r25, r18
 94a:	b8 f4       	brcc	.+46     	; 0x97a <CalculaPorcentoPosicaoEixoX+0x56>
 94c:	21 e0       	ldi	r18, 0x01	; 1
 94e:	80 3e       	cpi	r24, 0xE0	; 224
 950:	92 07       	cpc	r25, r18
 952:	b0 f0       	brcs	.+44     	; 0x980 <CalculaPorcentoPosicaoEixoX+0x5c>
		valorPorCentoEixoX = 50;
				
	else if(PontoXNaPosInic())
 954:	0e 94 73 03 	call	0x6e6	; 0x6e6 <PontoXNaPosInic>
 958:	88 23       	and	r24, r24
 95a:	a9 f0       	breq	.+42     	; 0x986 <CalculaPorcentoPosicaoEixoX+0x62>
		valorPorCentoEixoX = 0;
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	08 95       	ret
			 posX0PorCento = 498;
		 
	uint16_t valorPorCentoEixoX; 
	
	if ((valorLidoADEixoX > posXFrente75PorCento) ||  (valorLidoADEixoX < posXTras75PorCento) ) 
		valorPorCentoEixoX = 100;
 962:	84 e6       	ldi	r24, 0x64	; 100
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	08 95       	ret
 968:	84 e6       	ldi	r24, 0x64	; 100
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	08 95       	ret
				
	else if((valorLidoADEixoX > posXFrente50PorCento) || (valorLidoADEixoX < posXTras50PorCento)) 
		valorPorCentoEixoX = 75;
 96e:	8b e4       	ldi	r24, 0x4B	; 75
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	08 95       	ret
 974:	8b e4       	ldi	r24, 0x4B	; 75
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	08 95       	ret
		
	else if((valorLidoADEixoX > posXFrente25PorCento) || (valorLidoADEixoX < posXTras25PorCento) ) 
		valorPorCentoEixoX = 50;
 97a:	82 e3       	ldi	r24, 0x32	; 50
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	08 95       	ret
 980:	82 e3       	ldi	r24, 0x32	; 50
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	08 95       	ret
				
	else if(PontoXNaPosInic())
		valorPorCentoEixoX = 0;
	
	else 
		valorPorCentoEixoX = 25;
 986:	89 e1       	ldi	r24, 0x19	; 25
 988:	90 e0       	ldi	r25, 0x00	; 0
	
	return valorPorCentoEixoX;
}
 98a:	08 95       	ret

0000098c <CalculaDutyCycleLadoEsq>:
}

//---------------------------------------------------------------------------

uint8_t CalculaDutyCycleLadoEsq()
{
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
 994:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ValorLidoADEixoX>
 998:	8c 01       	movw	r16, r24
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
 99a:	0e 94 6f 03 	call	0x6de	; 0x6de <ValorLidoADEixoY>
 99e:	ec 01       	movw	r28, r24
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
 9a0:	0e 94 66 04 	call	0x8cc	; 0x8cc <CalculaPorcentoPosicaoEixoY>
	
	uint8_t duty = 0;
	unsigned char sentido = CalculaSentido();
 9a4:	0e 94 a9 03 	call	0x752	; 0x752 <CalculaSentido>
	switch(sentido) {
 9a8:	86 34       	cpi	r24, 0x46	; 70
 9aa:	79 f0       	breq	.+30     	; 0x9ca <CalculaDutyCycleLadoEsq+0x3e>
 9ac:	87 34       	cpi	r24, 0x47	; 71
 9ae:	28 f4       	brcc	.+10     	; 0x9ba <CalculaDutyCycleLadoEsq+0x2e>
 9b0:	84 34       	cpi	r24, 0x44	; 68
 9b2:	b1 f0       	breq	.+44     	; 0x9e0 <CalculaDutyCycleLadoEsq+0x54>
 9b4:	85 34       	cpi	r24, 0x45	; 69
 9b6:	39 f4       	brne	.+14     	; 0x9c6 <CalculaDutyCycleLadoEsq+0x3a>
 9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <CalculaDutyCycleLadoEsq+0x46>
 9ba:	82 35       	cpi	r24, 0x52	; 82
 9bc:	89 f0       	breq	.+34     	; 0x9e0 <CalculaDutyCycleLadoEsq+0x54>
 9be:	84 35       	cpi	r24, 0x54	; 84
 9c0:	21 f0       	breq	.+8      	; 0x9ca <CalculaDutyCycleLadoEsq+0x3e>
 9c2:	8c 34       	cpi	r24, 0x4C	; 76
 9c4:	31 f0       	breq	.+12     	; 0x9d2 <CalculaDutyCycleLadoEsq+0x46>
{
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
	
	uint8_t duty = 0;
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <CalculaDutyCycleLadoEsq+0x56>
	unsigned char sentido = CalculaSentido();
	switch(sentido) {
		case 'F'://Andando Frente
		case 'T'://Andando Tras
			duty = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
 9ca:	ce 01       	movw	r24, r28
 9cc:	0e 94 66 04 	call	0x8cc	; 0x8cc <CalculaPorcentoPosicaoEixoY>
			break;
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <CalculaDutyCycleLadoEsq+0x56>
		case 'R'://Andando Tras Direita
			duty = 100;
			break;
		case 'E'://Andando Frente Esquerda
		case 'L': //Andando Tras Esquerda
			duty = 100 - CalculaPorcentoPosicaoEixoX(valorLidoADEixoX);
 9d2:	c8 01       	movw	r24, r16
 9d4:	0e 94 92 04 	call	0x924	; 0x924 <CalculaPorcentoPosicaoEixoX>
 9d8:	94 e6       	ldi	r25, 0x64	; 100
 9da:	98 1b       	sub	r25, r24
 9dc:	89 2f       	mov	r24, r25
			break;
 9de:	01 c0       	rjmp	.+2      	; 0x9e2 <CalculaDutyCycleLadoEsq+0x56>
		case 'T'://Andando Tras
			duty = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
			break;
		case 'D'://Andando Frente Direita
		case 'R'://Andando Tras Direita
			duty = 100;
 9e0:	84 e6       	ldi	r24, 0x64	; 100
		case 'P'://Parado
			duty = 0;
			break;
	}
	return duty;
}
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <CalculaDutyCycleLadoDir>:
}

//---------------------------------------------------------------------------

uint8_t CalculaDutyCycleLadoDir()
{
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
 9f4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ValorLidoADEixoX>
 9f8:	8c 01       	movw	r16, r24
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
 9fa:	0e 94 6f 03 	call	0x6de	; 0x6de <ValorLidoADEixoY>
 9fe:	ec 01       	movw	r28, r24
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
 a00:	0e 94 66 04 	call	0x8cc	; 0x8cc <CalculaPorcentoPosicaoEixoY>
		
	uint8_t duty = 0;
	unsigned char sentido = CalculaSentido();
 a04:	0e 94 a9 03 	call	0x752	; 0x752 <CalculaSentido>
	switch(sentido) {
 a08:	86 34       	cpi	r24, 0x46	; 70
 a0a:	79 f0       	breq	.+30     	; 0xa2a <CalculaDutyCycleLadoDir+0x3e>
 a0c:	87 34       	cpi	r24, 0x47	; 71
 a0e:	28 f4       	brcc	.+10     	; 0xa1a <CalculaDutyCycleLadoDir+0x2e>
 a10:	84 34       	cpi	r24, 0x44	; 68
 a12:	79 f0       	breq	.+30     	; 0xa32 <CalculaDutyCycleLadoDir+0x46>
 a14:	85 34       	cpi	r24, 0x45	; 69
 a16:	39 f4       	brne	.+14     	; 0xa26 <CalculaDutyCycleLadoDir+0x3a>
 a18:	13 c0       	rjmp	.+38     	; 0xa40 <CalculaDutyCycleLadoDir+0x54>
 a1a:	82 35       	cpi	r24, 0x52	; 82
 a1c:	51 f0       	breq	.+20     	; 0xa32 <CalculaDutyCycleLadoDir+0x46>
 a1e:	84 35       	cpi	r24, 0x54	; 84
 a20:	21 f0       	breq	.+8      	; 0xa2a <CalculaDutyCycleLadoDir+0x3e>
 a22:	8c 34       	cpi	r24, 0x4C	; 76
 a24:	69 f0       	breq	.+26     	; 0xa40 <CalculaDutyCycleLadoDir+0x54>
{
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
		
	uint8_t duty = 0;
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	0c c0       	rjmp	.+24     	; 0xa42 <CalculaDutyCycleLadoDir+0x56>
	unsigned char sentido = CalculaSentido();
	switch(sentido) {
		case 'F'://Andando Frente
		case 'T'://Andando Tras
			duty = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
 a2a:	ce 01       	movw	r24, r28
 a2c:	0e 94 66 04 	call	0x8cc	; 0x8cc <CalculaPorcentoPosicaoEixoY>
			break;
 a30:	08 c0       	rjmp	.+16     	; 0xa42 <CalculaDutyCycleLadoDir+0x56>
		case 'L'://Andando Tras Esquerda
			duty = 100;
			break;
		case 'R': //Andando Tras Direita
		case 'D'://Andando Frente Direita
			duty = 100 - CalculaPorcentoPosicaoEixoX(valorLidoADEixoX);
 a32:	c8 01       	movw	r24, r16
 a34:	0e 94 92 04 	call	0x924	; 0x924 <CalculaPorcentoPosicaoEixoX>
 a38:	94 e6       	ldi	r25, 0x64	; 100
 a3a:	98 1b       	sub	r25, r24
 a3c:	89 2f       	mov	r24, r25
			break;
 a3e:	01 c0       	rjmp	.+2      	; 0xa42 <CalculaDutyCycleLadoDir+0x56>
			duty = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
			break;
				
		case 'E'://Andando Frente Esquerda
		case 'L'://Andando Tras Esquerda
			duty = 100;
 a40:	84 e6       	ldi	r24, 0x64	; 100
			duty = 0;
			break;
	}
		
	return duty;
}
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	1f 91       	pop	r17
 a48:	0f 91       	pop	r16
 a4a:	08 95       	ret

00000a4c <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 a4c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 a50:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
 a54:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b10011000;
 a58:	88 e9       	ldi	r24, 0x98	; 152
 a5a:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 a5e:	86 e0       	ldi	r24, 0x06	; 6
 a60:	80 93 c2 00 	sts	0x00C2, r24
	//		   ||||||||
	//		   76543210		
}
 a64:	08 95       	ret

00000a66 <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 a66:	e0 ec       	ldi	r30, 0xC0	; 192
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	90 81       	ld	r25, Z
 a6c:	95 ff       	sbrs	r25, 5
 a6e:	fd cf       	rjmp	.-6      	; 0xa6a <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 a70:	80 93 c6 00 	sts	0x00C6, r24
}
 a74:	08 95       	ret

00000a76 <Usart_Receive>:
//---------------------------------------------------------------------------

unsigned char Usart_Receive()
{
	/*wait for data to be receive*/
	while (!(UCSR0A & (1<<RXC0)));	
 a76:	e0 ec       	ldi	r30, 0xC0	; 192
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	80 81       	ld	r24, Z
 a7c:	88 23       	and	r24, r24
 a7e:	ec f7       	brge	.-6      	; 0xa7a <Usart_Receive+0x4>
	
	/*read data into buffer, receive the data*/
	return UDR0; 				
 a80:	80 91 c6 00 	lds	r24, 0x00C6
}
 a84:	08 95       	ret

00000a86 <Usart_Write>:

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
{
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) Usart_Transmit(*c);
 a8c:	88 81       	ld	r24, Y
 a8e:	88 23       	and	r24, r24
 a90:	31 f0       	breq	.+12     	; 0xa9e <Usart_Write+0x18>
	return UDR0; 				
}

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
 a92:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) Usart_Transmit(*c);
 a94:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
 a98:	89 91       	ld	r24, Y+
 a9a:	88 23       	and	r24, r24
 a9c:	d9 f7       	brne	.-10     	; 0xa94 <Usart_Write+0xe>
}
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	08 95       	ret

00000aa4 <Usart_Write_Flash>:

//---------------------------------------------------------------------------

void Usart_Write_Flash(const char *c)	
{
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) Usart_Transmit(pgm_read_byte(&(*c)));
 aaa:	fe 01       	movw	r30, r28
 aac:	24 91       	lpm	r18, Z+
 aae:	22 23       	and	r18, r18
 ab0:	51 f0       	breq	.+20     	; 0xac6 <Usart_Write_Flash+0x22>
 ab2:	fc 01       	movw	r30, r24
 ab4:	84 91       	lpm	r24, Z+
 ab6:	0e 94 33 05 	call	0xa66	; 0xa66 <Usart_Transmit>
 aba:	21 96       	adiw	r28, 0x01	; 1
 abc:	ce 01       	movw	r24, r28
 abe:	fe 01       	movw	r30, r28
 ac0:	24 91       	lpm	r18, Z+
 ac2:	22 23       	and	r18, r18
 ac4:	b1 f7       	brne	.-20     	; 0xab2 <Usart_Write_Flash+0xe>
}
 ac6:	df 91       	pop	r29
 ac8:	cf 91       	pop	r28
 aca:	08 95       	ret

00000acc <__udivmodhi4>:
 acc:	aa 1b       	sub	r26, r26
 ace:	bb 1b       	sub	r27, r27
 ad0:	51 e1       	ldi	r21, 0x11	; 17
 ad2:	07 c0       	rjmp	.+14     	; 0xae2 <__udivmodhi4_ep>

00000ad4 <__udivmodhi4_loop>:
 ad4:	aa 1f       	adc	r26, r26
 ad6:	bb 1f       	adc	r27, r27
 ad8:	a6 17       	cp	r26, r22
 ada:	b7 07       	cpc	r27, r23
 adc:	10 f0       	brcs	.+4      	; 0xae2 <__udivmodhi4_ep>
 ade:	a6 1b       	sub	r26, r22
 ae0:	b7 0b       	sbc	r27, r23

00000ae2 <__udivmodhi4_ep>:
 ae2:	88 1f       	adc	r24, r24
 ae4:	99 1f       	adc	r25, r25
 ae6:	5a 95       	dec	r21
 ae8:	a9 f7       	brne	.-22     	; 0xad4 <__udivmodhi4_loop>
 aea:	80 95       	com	r24
 aec:	90 95       	com	r25
 aee:	bc 01       	movw	r22, r24
 af0:	cd 01       	movw	r24, r26
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
