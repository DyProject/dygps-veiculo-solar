
ControleCarro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000001e8  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000093  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000240  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012f  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000382  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013f  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000049  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

//----------------------------------------------------------------------------

int main()
{
    DDRC	= 0xFF;			
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 b9       	out	0x07, r24	; 7
	PORTC	= 0x00;	
  94:	18 b8       	out	0x08, r1	; 8
	
	Usart_Init(MYUBRR);
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <Usart_Init>
			
	while(1)
	{
		direcao = Usart_Receive();
  9e:	0e 94 8d 00 	call	0x11a	; 0x11a <Usart_Receive>
  a2:	80 93 00 01 	sts	0x0100, r24
		
		if(direcao == 'F')
  a6:	86 34       	cpi	r24, 0x46	; 70
  a8:	29 f4       	brne	.+10     	; 0xb4 <main+0x24>
		{
			set_bit(PORTC, IN1_IN3);	//Liga motores para frente
  aa:	41 9a       	sbi	0x08, 1	; 8
			clr_bit(PORTC, IN2_IN4);	//
  ac:	42 98       	cbi	0x08, 2	; 8
			set_bit(PORTC, ENA);
  ae:	40 9a       	sbi	0x08, 0	; 8
			set_bit(PORTC, ENB);
  b0:	43 9a       	sbi	0x08, 3	; 8
  b2:	0d c0       	rjmp	.+26     	; 0xce <main+0x3e>
		}else
		if(direcao == 'R')
  b4:	82 35       	cpi	r24, 0x52	; 82
  b6:	29 f4       	brne	.+10     	; 0xc2 <main+0x32>
		{
			set_bit(PORTC, IN2_IN4);	//Liga motores para ré
  b8:	42 9a       	sbi	0x08, 2	; 8
			clr_bit(PORTC, IN1_IN3);	//
  ba:	41 98       	cbi	0x08, 1	; 8
			set_bit(PORTC, ENA);
  bc:	40 9a       	sbi	0x08, 0	; 8
			set_bit(PORTC, ENB);
  be:	43 9a       	sbi	0x08, 3	; 8
  c0:	06 c0       	rjmp	.+12     	; 0xce <main+0x3e>
		}else
		if(direcao == 'P')
  c2:	80 35       	cpi	r24, 0x50	; 80
  c4:	21 f4       	brne	.+8      	; 0xce <main+0x3e>
		{
			clr_bit(PORTC, IN2_IN4);	//Para motores
  c6:	42 98       	cbi	0x08, 2	; 8
			clr_bit(PORTC, IN1_IN3);	//
  c8:	41 98       	cbi	0x08, 1	; 8
			set_bit(PORTC, ENA);
  ca:	40 9a       	sbi	0x08, 0	; 8
			set_bit(PORTC, ENB);
  cc:	43 9a       	sbi	0x08, 3	; 8
		}
			
		if(direcao == 'D')
  ce:	80 91 00 01 	lds	r24, 0x0100
  d2:	84 34       	cpi	r24, 0x44	; 68
  d4:	19 f4       	brne	.+6      	; 0xdc <main+0x4c>
		{
			set_bit(PORTC, ENA);	//Para motor da direita
  d6:	40 9a       	sbi	0x08, 0	; 8
			clr_bit(PORTC, ENB);	//
  d8:	43 98       	cbi	0x08, 3	; 8
  da:	e1 cf       	rjmp	.-62     	; 0x9e <main+0xe>
		}else
		if(direcao == 'E')
  dc:	85 34       	cpi	r24, 0x45	; 69
  de:	19 f4       	brne	.+6      	; 0xe6 <main+0x56>
		{
			clr_bit(PORTC, ENA);	//Para motor da esquerda
  e0:	40 98       	cbi	0x08, 0	; 8
			set_bit(PORTC, ENB);	//
  e2:	43 9a       	sbi	0x08, 3	; 8
  e4:	dc cf       	rjmp	.-72     	; 0x9e <main+0xe>
		}else
		if(direcao == 'C')
  e6:	83 34       	cpi	r24, 0x43	; 67
  e8:	d1 f6       	brne	.-76     	; 0x9e <main+0xe>
		{
			set_bit(PORTC, ENA);	//
  ea:	40 9a       	sbi	0x08, 0	; 8
			set_bit(PORTC, ENB);	//Liga os dois motores
  ec:	43 9a       	sbi	0x08, 3	; 8
  ee:	d7 cf       	rjmp	.-82     	; 0x9e <main+0xe>

000000f0 <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
  f0:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  f4:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
  f8:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b00011000;
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 93 c2 00 	sts	0x00C2, r24
	//		   ||||||||
	//		   76543210		
}
 108:	08 95       	ret

0000010a <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 114:	80 93 c6 00 	sts	0x00C6, r24
}
 118:	08 95       	ret

0000011a <Usart_Receive>:
//---------------------------------------------------------------------------

unsigned char Usart_Receive()
{
	/*wait for data to be receive*/
	while (!(UCSR0A & (1<<RXC0)));	
 11a:	e0 ec       	ldi	r30, 0xC0	; 192
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <Usart_Receive+0x4>
	
	/*read data into buffer, receive the data*/
	return UDR0; 				
 124:	80 91 c6 00 	lds	r24, 0x00C6
}
 128:	08 95       	ret

0000012a <Usart_Write>:

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) Usart_Transmit(*c);
 130:	88 81       	ld	r24, Y
 132:	88 23       	and	r24, r24
 134:	31 f0       	breq	.+12     	; 0x142 <Usart_Write+0x18>
	return UDR0; 				
}

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
 136:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) Usart_Transmit(*c);
 138:	0e 94 85 00 	call	0x10a	; 0x10a <Usart_Transmit>
 13c:	89 91       	ld	r24, Y+
 13e:	88 23       	and	r24, r24
 140:	d9 f7       	brne	.-10     	; 0x138 <Usart_Write+0xe>
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <Usart_Write_Flash>:

//---------------------------------------------------------------------------

void Usart_Write_Flash(const char *c)	
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) Usart_Transmit(pgm_read_byte(&(*c)));
 14e:	fe 01       	movw	r30, r28
 150:	24 91       	lpm	r18, Z+
 152:	22 23       	and	r18, r18
 154:	51 f0       	breq	.+20     	; 0x16a <Usart_Write_Flash+0x22>
 156:	fc 01       	movw	r30, r24
 158:	84 91       	lpm	r24, Z+
 15a:	0e 94 85 00 	call	0x10a	; 0x10a <Usart_Transmit>
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	ce 01       	movw	r24, r28
 162:	fe 01       	movw	r30, r28
 164:	24 91       	lpm	r18, Z+
 166:	22 23       	and	r18, r18
 168:	b1 f7       	brne	.-20     	; 0x156 <Usart_Write_Flash+0xe>
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
