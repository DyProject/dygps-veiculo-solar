
ControleCarro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb4  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b1  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069d  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000033c  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ef  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000952  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000032f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void CvrtNum2CaracterIndividual(
	uint16_t valor, 
	unsigned char* caracterConvertido,
	uint8_t tamanho
)		
{											
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	uint8_t contIni;
	for(contIni = 0; contIni < (tamanho - 1); contIni++)
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
		*(caracterConvertido + contIni) = 0x30; 
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	unsigned char* caracterConvertido,
	uint8_t tamanho
)		
{											
	uint8_t contIni;
	for(contIni = 0; contIni < (tamanho - 1); contIni++)
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
		*(caracterConvertido + contIni) = 0x30; 
	*(caracterConvertido + contIni + 1) = '\0';
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	
	unsigned char cont = tamanho - 1;
	do{
		/*+0x30 para converter de caracter para número*/
		caracterConvertido[cont--] = (valor % 10) + 0x30;											
  40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
		valor /= 10;								
  88:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24
  9c:	10 92 7b 00 	sts	0x007B, r1
	}while (valor != 0);
  a0:	8f e3       	ldi	r24, 0x3F	; 63
	*(caracterConvertido + contIni + 1) = '\0';
	
	unsigned char cont = tamanho - 1;
	do{
		/*+0x30 para converter de caracter para número*/
		caracterConvertido[cont--] = (valor % 10) + 0x30;											
  a2:	80 93 7e 00 	sts	0x007E, r24
		valor /= 10;								
	}while (valor != 0);
}
  a6:	08 95       	ret

000000a8 <ADC_Read>:
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
uint16_t ADC_Read(
	uint8_t canal
)
{
	/*Máscara para definir o canal. Bits2:0*/
	ADMUX = (ADMUX & 0b11111000)  | (canal & 0b0000111);
  ae:	87 70       	andi	r24, 0x07	; 7
  b0:	98 7f       	andi	r25, 0xF8	; 248
  b2:	98 2b       	or	r25, r24
  b4:	90 83       	st	Z, r25
	
	/*Inicia conversão*/
	ADCSRA |= (1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	
	/*Aguarda conversão ser concluída*/
	while(ADCSRA & (1<<ADSC));
  c0:	80 81       	ld	r24, Z
  c2:	86 fd       	sbrc	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <ADC_Read+0x18>
		
	return (ADC);
  c6:	80 91 78 00 	lds	r24, 0x0078
  ca:	90 91 79 00 	lds	r25, 0x0079
}
  ce:	08 95       	ret

000000d0 <__vector_18>:
void SolicitaReenvioDados();

//----------------------------------------------------------------------------

ISR(USART_RX_vect)							
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	RecebeProtocolo(&bufferRX_g);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RecebeProtocolo>
	if(bufferRX_g.completo == 'y') {
  fa:	80 91 0a 01 	lds	r24, 0x010A
  fe:	89 37       	cpi	r24, 0x79	; 121
 100:	41 f4       	brne	.+16     	; 0x112 <__vector_18+0x42>
		DirecaoCarro(&bufferRX_g);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DirecaoCarro>
		TransmitiBuffer(&bufferRX_g.fonteAlimentacao);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TransmitiBuffer>
	}	
}	
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_16>:

//----------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	static uint8_t tempoRecep = 0;
	
	if(bufferRX_g.iniciado == 'y')
 15a:	80 91 09 01 	lds	r24, 0x0109
 15e:	89 37       	cpi	r24, 0x79	; 121
 160:	19 f4       	brne	.+6      	; 0x168 <__vector_16+0x34>
		tempoRecep = 0;
 162:	10 92 00 01 	sts	0x0100, r1
 166:	12 c0       	rjmp	.+36     	; 0x18c <__vector_16+0x58>
	else if(tempoRecep > 100) {
 168:	80 91 00 01 	lds	r24, 0x0100
 16c:	85 36       	cpi	r24, 0x65	; 101
 16e:	70 f0       	brcs	.+28     	; 0x18c <__vector_16+0x58>
		/*Desabilita Interrupção RX*/ //trace
		clr_bit(UCSR0B, 7);
 170:	c1 ec       	ldi	r28, 0xC1	; 193
 172:	d0 e0       	ldi	r29, 0x00	; 0
 174:	88 81       	ld	r24, Y
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	88 83       	st	Y, r24
		ParadaLenta(&bufferRX_g);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 b5 01 	call	0x36a	; 0x36a <ParadaLenta>
		/*Habilita Interrupção RX*///trace
		tempoRecep = 0;
 182:	10 92 00 01 	sts	0x0100, r1
		set_bit(UCSR0B, 7);
 186:	88 81       	ld	r24, Y
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	88 83       	st	Y, r24
	}
	tempoRecep++;
 18c:	80 91 00 01 	lds	r24, 0x0100
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 00 01 	sts	0x0100, r24
		//tracetempoRecep = 0;
	//trace}
	
	//traceSolicitaReenvioDados();
	
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <ValoresIniciaisBuffer>:

//----------------------------------------------------------------------------

void ValoresIniciaisBuffer()
{
	bufferRX_g.dutyCicleM1 = 0;
 1bc:	10 92 04 01 	sts	0x0104, r1
 1c0:	10 92 03 01 	sts	0x0103, r1
	bufferRX_g.dutyCicleM2 = 0;
 1c4:	10 92 06 01 	sts	0x0106, r1
 1c8:	10 92 05 01 	sts	0x0105, r1
	bufferRX_g.qntdDadosLido = 0;
 1cc:	10 92 08 01 	sts	0x0108, r1
 1d0:	10 92 07 01 	sts	0x0107, r1
	bufferRX_g.iniciado = 'n';
 1d4:	8e e6       	ldi	r24, 0x6E	; 110
 1d6:	80 93 09 01 	sts	0x0109, r24
	bufferRX_g.completo = 'n';
 1da:	80 93 0a 01 	sts	0x010A, r24
	bufferRX_g.fonteAlimentacao = 'B';
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	80 93 01 01 	sts	0x0101, r24
	bufferRX_g.direcao = 'P';
 1e4:	80 e5       	ldi	r24, 0x50	; 80
 1e6:	80 93 02 01 	sts	0x0102, r24
	bufferRX_g.estadoCarro = PARADO;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 0b 01 	sts	0x010B, r24
 1f0:	08 95       	ret

000001f2 <main>:
}

//----------------------------------------------------------------------------
int main()
{
	Usart_Init(MYUBRR);
 1f2:	87 e6       	ldi	r24, 0x67	; 103
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 07 03 	call	0x60e	; 0x60e <Usart_Init>
	ADC_Init();
 1fa:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	ValoresIniciaisBuffer();
 1fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <ValoresIniciaisBuffer>
	ConfiguracoesDirecaoInit();
 202:	0e 94 8e 01 	call	0x31c	; 0x31c <ConfiguracoesDirecaoInit>
	
	/*Contador Timer 0*/
	TIMSK0 = 0b00000001;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 6e 00 	sts	0x006E, r24
	/*Prescaler do Timer0*/
	TCCR0B = (1<<CS02) | (1<<CS00);
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	85 bd       	out	0x25, r24	; 37
	
	sei();	
 210:	78 94       	sei
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x20>

00000214 <CalculaDutyCicleM1>:
/*Irá receber sempre os duty cicle definidos 25, 50, 75 e 100*/
uint16_t CalculaDutyCicleM1(
	uint16_t porCentagem,
	TEstadoCarro estadoCarro
)
{
 214:	85 36       	cpi	r24, 0x65	; 101
 216:	91 05       	cpc	r25, r1
 218:	10 f0       	brcs	.+4      	; 0x21e <CalculaDutyCicleM1+0xa>
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
	if(porCentagem > 100)
		porCentagem = 100;
	
	/*Valor é igual ao (35000 * 0,25) ou (350*porcentagem)*/
	uint16_t valor = porCentagem * 350;
 21e:	4e e5       	ldi	r20, 0x5E	; 94
 220:	51 e0       	ldi	r21, 0x01	; 1
 222:	84 9f       	mul	r24, r20
 224:	90 01       	movw	r18, r0
 226:	85 9f       	mul	r24, r21
 228:	30 0d       	add	r19, r0
 22a:	94 9f       	mul	r25, r20
 22c:	30 0d       	add	r19, r0
 22e:	11 24       	eor	r1, r1
				
	if(estadoCarro == ANDANDO_TRAS)
 230:	63 30       	cpi	r22, 0x03	; 3
 232:	31 f4       	brne	.+12     	; 0x240 <CalculaDutyCicleM1+0x2c>
		valor = 35000 - valor;
 234:	88 eb       	ldi	r24, 0xB8	; 184
 236:	98 e8       	ldi	r25, 0x88	; 136
 238:	ac 01       	movw	r20, r24
 23a:	42 1b       	sub	r20, r18
 23c:	53 0b       	sbc	r21, r19
 23e:	9a 01       	movw	r18, r20
		
	return valor;
}
 240:	c9 01       	movw	r24, r18
 242:	08 95       	ret

00000244 <CalculaDutyCicleM2>:
/*Irá receber sempre os duty cicle definidos 25, 50, 75 e 100*/
uint16_t CalculaDutyCicleM2(
	uint16_t porCentagem,
	TEstadoCarro estadoCarro
)
{
 244:	85 36       	cpi	r24, 0x65	; 101
 246:	91 05       	cpc	r25, r1
 248:	10 f0       	brcs	.+4      	; 0x24e <CalculaDutyCicleM2+0xa>
 24a:	84 e6       	ldi	r24, 0x64	; 100
 24c:	90 e0       	ldi	r25, 0x00	; 0
	if(porCentagem > 100)
		porCentagem = 100;
	
	uint16_t valor = porCentagem * 350;
 24e:	4e e5       	ldi	r20, 0x5E	; 94
 250:	51 e0       	ldi	r21, 0x01	; 1
 252:	84 9f       	mul	r24, r20
 254:	90 01       	movw	r18, r0
 256:	85 9f       	mul	r24, r21
 258:	30 0d       	add	r19, r0
 25a:	94 9f       	mul	r25, r20
 25c:	30 0d       	add	r19, r0
 25e:	11 24       	eor	r1, r1
		
	if(estadoCarro == ANDANDO_TRAS)
 260:	63 30       	cpi	r22, 0x03	; 3
 262:	31 f4       	brne	.+12     	; 0x270 <CalculaDutyCicleM2+0x2c>
		valor = 35000 - valor;
 264:	88 eb       	ldi	r24, 0xB8	; 184
 266:	98 e8       	ldi	r25, 0x88	; 136
 268:	ac 01       	movw	r20, r24
 26a:	42 1b       	sub	r20, r18
 26c:	53 0b       	sbc	r21, r19
 26e:	9a 01       	movw	r18, r20
			
	return valor;
}
 270:	c9 01       	movw	r24, r18
 272:	08 95       	ret

00000274 <SetaFonteAlimentacao>:
//----------------------------------------------------------------------------

void SetaFonteAlimentacao(
	volatile uint8_t* fonteAlimentacao
)
{	
 274:	fc 01       	movw	r30, r24
	if(*fonteAlimentacao == 'P') {
 276:	80 81       	ld	r24, Z
 278:	80 35       	cpi	r24, 0x50	; 80
 27a:	21 f4       	brne	.+8      	; 0x284 <SetaFonteAlimentacao+0x10>
		DESATIVA_RELE(RELE_CHAVE_PAINEL_BATERIA);
 27c:	5b 98       	cbi	0x0b, 3	; 11
		*fonteAlimentacao = 'B';
 27e:	82 e4       	ldi	r24, 0x42	; 66
 280:	80 83       	st	Z, r24
 282:	08 95       	ret
	}			
	else  if(*fonteAlimentacao == 'B'){
 284:	80 81       	ld	r24, Z
 286:	82 34       	cpi	r24, 0x42	; 66
 288:	19 f4       	brne	.+6      	; 0x290 <SetaFonteAlimentacao+0x1c>
		ATIVA_RELE(RELE_CHAVE_PAINEL_BATERIA);
 28a:	5b 9a       	sbi	0x0b, 3	; 11
		*fonteAlimentacao = 'P';
 28c:	80 e5       	ldi	r24, 0x50	; 80
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <AndandoFrente>:
//----------------------------------------------------------------------------

void AndandoFrente(
	BufferRecep* bufferRecepcao
)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	85 e3       	ldi	r24, 0x35	; 53
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <AndandoFrente+0x8>
 29e:	00 00       	nop
	_delay_us(10);
	set_bit(PORTB,ENA_ENB);	
 2a0:	2c 9a       	sbi	0x05, 4	; 5
	clr_bit(PORTB,IN2_IN4);
 2a2:	2b 98       	cbi	0x05, 3	; 5
	OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 2a4:	6a 85       	ldd	r22, Y+10	; 0x0a
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	9b 81       	ldd	r25, Y+3	; 0x03
 2aa:	0e 94 0a 01 	call	0x214	; 0x214 <CalculaDutyCicleM1>
 2ae:	90 93 89 00 	sts	0x0089, r25
 2b2:	80 93 88 00 	sts	0x0088, r24
	OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 2b6:	6a 85       	ldd	r22, Y+10	; 0x0a
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	9d 81       	ldd	r25, Y+5	; 0x05
 2bc:	0e 94 22 01 	call	0x244	; 0x244 <CalculaDutyCicleM2>
 2c0:	90 93 8b 00 	sts	0x008B, r25
 2c4:	80 93 8a 00 	sts	0x008A, r24
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <AndandoTras>:
//----------------------------------------------------------------------------

void AndandoTras(
	BufferRecep* bufferRecepcao
)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <AndandoTras+0x8>
 2da:	00 00       	nop
	_delay_us(10);
	set_bit(PORTB,ENA_ENB);	
 2dc:	2c 9a       	sbi	0x05, 4	; 5
	set_bit(PORTB,IN2_IN4);
 2de:	2b 9a       	sbi	0x05, 3	; 5
	OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 2e0:	6a 85       	ldd	r22, Y+10	; 0x0a
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	9b 81       	ldd	r25, Y+3	; 0x03
 2e6:	0e 94 0a 01 	call	0x214	; 0x214 <CalculaDutyCicleM1>
 2ea:	90 93 89 00 	sts	0x0089, r25
 2ee:	80 93 88 00 	sts	0x0088, r24
	OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 2f2:	6a 85       	ldd	r22, Y+10	; 0x0a
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	9d 81       	ldd	r25, Y+5	; 0x05
 2f8:	0e 94 22 01 	call	0x244	; 0x244 <CalculaDutyCicleM2>
 2fc:	90 93 8b 00 	sts	0x008B, r25
 300:	80 93 8a 00 	sts	0x008A, r24
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <CarroParado>:
 30a:	85 e3       	ldi	r24, 0x35	; 53
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <CarroParado+0x2>
 310:	00 00       	nop
//----------------------------------------------------------------------------

void CarroParado()
{
	_delay_us(10);
	clr_bit(PORTB,ENA_ENB);	
 312:	2c 98       	cbi	0x05, 4	; 5
	set_bit(PORTB,IN1);	
 314:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB,IN3);	
 316:	29 9a       	sbi	0x05, 1	; 5
	set_bit(PORTB,IN2_IN4);	
 318:	2b 9a       	sbi	0x05, 3	; 5
 31a:	08 95       	ret

0000031c <ConfiguracoesDirecaoInit>:
void ConfiguracoesDirecaoInit(
	BufferRecep* bufferRecepcao
)
{	
	/*pinos OC1B e OC1A como saída*/
	DDRB |= (1 << IN2_IN4) | (1 << ENA_ENB) | (1 << IN1) | (1 << IN3);	
 31c:	84 b1       	in	r24, 0x04	; 4
 31e:	8e 61       	ori	r24, 0x1E	; 30
 320:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << IN2_IN4) | (1 << ENA_ENB);		
 322:	85 b1       	in	r24, 0x05	; 5
 324:	88 61       	ori	r24, 0x18	; 24
 326:	85 b9       	out	0x05, r24	; 5
	PORTB &= (~(1 << IN1)) & (~(1 << IN3)); 
 328:	85 b1       	in	r24, 0x05	; 5
 32a:	89 7f       	andi	r24, 0xF9	; 249
 32c:	85 b9       	out	0x05, r24	; 5
	
	/*Pino relé como saída*/	
	RELE_DDR |= (1 << RELE_CHAVE_PAINEL_BATERIA) | (1 << RELE_TENSAO_PAINEL);
 32e:	8a b1       	in	r24, 0x0a	; 10
 330:	88 61       	ori	r24, 0x18	; 24
 332:	8a b9       	out	0x0a, r24	; 10
	
	/*Seleciona a fonte de alimentação da bateria*/
	DESATIVA_RELE(RELE_CHAVE_PAINEL_BATERIA);
 334:	5b 98       	cbi	0x0b, 3	; 11
	
	/*Desliga o painel*/
	DESATIVA_RELE(RELE_TENSAO_PAINEL);
 336:	5c 98       	cbi	0x0b, 4	; 11
		
	TCCR1A = 0b10100010;		//PWM não invertido nos pinos OC1A e OC1B
 338:	82 ea       	ldi	r24, 0xA2	; 162
 33a:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00011001;		//liga TC1, prescaler = 1
 33e:	89 e1       	ldi	r24, 0x19	; 25
 340:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 35000;				//valor máximo para contagem
 344:	88 eb       	ldi	r24, 0xB8	; 184
 346:	98 e8       	ldi	r25, 0x88	; 136
 348:	90 93 87 00 	sts	0x0087, r25
 34c:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 0;				//controle do ciclo ativo do PWM 0C1A
 350:	10 92 89 00 	sts	0x0089, r1
 354:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 358:	10 92 8b 00 	sts	0x008B, r1
 35c:	10 92 8a 00 	sts	0x008A, r1
			
	//Prescaler do Timer0, usado para fazer uma leitura do ADC.
	TCCR0B = (1<<CS02) | (1<<CS00);
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	85 bd       	out	0x25, r24	; 37
					
	CarroParado();
 364:	0e 94 85 01 	call	0x30a	; 0x30a <CarroParado>
 368:	08 95       	ret

0000036a <ParadaLenta>:
//----------------------------------------------------------------------------

void ParadaLenta(
	BufferRecep* bufferRecepcao
) 
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
	uint8_t incremento = 35;
	uint8_t incrementoInicial = 15;
	
	switch (bufferRecepcao->estadoCarro) {			
 370:	8a 85       	ldd	r24, Y+10	; 0x0a
 372:	82 50       	subi	r24, 0x02	; 2
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	b0 f5       	brcc	.+108    	; 0x3e4 <ParadaLenta+0x7a>
		case ANDANDO_FRENTE:
		case ANDANDO_TRAS:			
			if(bufferRecepcao->dutyCicleM1 > incrementoInicial)//Abaixo desse valor o carrinho não anda
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	9b 81       	ldd	r25, Y+3	; 0x03
 37c:	40 97       	sbiw	r24, 0x10	; 16
 37e:	2c f0       	brlt	.+10     	; 0x38a <ParadaLenta+0x20>
				bufferRecepcao->dutyCicleM1 -= incremento;
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	9b 81       	ldd	r25, Y+3	; 0x03
 384:	83 97       	sbiw	r24, 0x23	; 35
 386:	9b 83       	std	Y+3, r25	; 0x03
 388:	8a 83       	std	Y+2, r24	; 0x02
		
			if(bufferRecepcao->dutyCicleM2 > incrementoInicial)//Abaixo desse valor o carrinho não anda
 38a:	8c 81       	ldd	r24, Y+4	; 0x04
 38c:	9d 81       	ldd	r25, Y+5	; 0x05
 38e:	40 97       	sbiw	r24, 0x10	; 16
 390:	2c f0       	brlt	.+10     	; 0x39c <ParadaLenta+0x32>
				bufferRecepcao->dutyCicleM2 -= incremento;
 392:	8c 81       	ldd	r24, Y+4	; 0x04
 394:	9d 81       	ldd	r25, Y+5	; 0x05
 396:	83 97       	sbiw	r24, 0x23	; 35
 398:	9d 83       	std	Y+5, r25	; 0x05
 39a:	8c 83       	std	Y+4, r24	; 0x04
		
			if(bufferRecepcao->dutyCicleM1 < incrementoInicial && bufferRecepcao->dutyCicleM2 < incrementoInicial) {
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	9b 81       	ldd	r25, Y+3	; 0x03
 3a0:	0f 97       	sbiw	r24, 0x0f	; 15
 3a2:	74 f4       	brge	.+28     	; 0x3c0 <ParadaLenta+0x56>
 3a4:	8c 81       	ldd	r24, Y+4	; 0x04
 3a6:	9d 81       	ldd	r25, Y+5	; 0x05
 3a8:	0f 97       	sbiw	r24, 0x0f	; 15
 3aa:	54 f4       	brge	.+20     	; 0x3c0 <ParadaLenta+0x56>
					bufferRecepcao->estadoCarro = PARADO;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	8a 87       	std	Y+10, r24	; 0x0a
					bufferRecepcao->iniciado = 'n';
 3b0:	8e e6       	ldi	r24, 0x6E	; 110
 3b2:	88 87       	std	Y+8, r24	; 0x08
					bufferRecepcao->completo = 'n';
 3b4:	89 87       	std	Y+9, r24	; 0x09
					bufferRecepcao->qntdDadosLido = 0;
 3b6:	1f 82       	std	Y+7, r1	; 0x07
 3b8:	1e 82       	std	Y+6, r1	; 0x06
					CarroParado();
 3ba:	0e 94 85 01 	call	0x30a	; 0x30a <CarroParado>
 3be:	12 c0       	rjmp	.+36     	; 0x3e4 <ParadaLenta+0x7a>
				}
				
			else {
				OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 3c0:	6a 85       	ldd	r22, Y+10	; 0x0a
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	9b 81       	ldd	r25, Y+3	; 0x03
 3c6:	0e 94 0a 01 	call	0x214	; 0x214 <CalculaDutyCicleM1>
 3ca:	90 93 89 00 	sts	0x0089, r25
 3ce:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 3d2:	6a 85       	ldd	r22, Y+10	; 0x0a
 3d4:	8c 81       	ldd	r24, Y+4	; 0x04
 3d6:	9d 81       	ldd	r25, Y+5	; 0x05
 3d8:	0e 94 22 01 	call	0x244	; 0x244 <CalculaDutyCicleM2>
 3dc:	90 93 8b 00 	sts	0x008B, r25
 3e0:	80 93 8a 00 	sts	0x008A, r24
	
		break;
		case PARADO:
		break;
	}
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <DirecaoCarro>:
//----------------------------------------------------------------------------

void DirecaoCarro(
	BufferRecep* bufferRecepcao
)
{		
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
	switch (bufferRecepcao->estadoCarro) {
 3f0:	8a 85       	ldd	r24, Y+10	; 0x0a
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	d1 f0       	breq	.+52     	; 0x42a <DirecaoCarro+0x40>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	b1 f1       	breq	.+108    	; 0x466 <DirecaoCarro+0x7c>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	09 f0       	breq	.+2      	; 0x400 <DirecaoCarro+0x16>
 3fe:	50 c0       	rjmp	.+160    	; 0x4a0 <DirecaoCarro+0xb6>
		case PARADO:
			if ( bufferRecepcao->direcao == 'F') {
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	86 34       	cpi	r24, 0x46	; 70
 404:	31 f4       	brne	.+12     	; 0x412 <DirecaoCarro+0x28>
				bufferRecepcao->estadoCarro = ANDANDO_FRENTE;
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	8a 87       	std	Y+10, r24	; 0x0a
				AndandoFrente(bufferRecepcao);
 40a:	ce 01       	movw	r24, r28
 40c:	0e 94 49 01 	call	0x292	; 0x292 <AndandoFrente>
 410:	47 c0       	rjmp	.+142    	; 0x4a0 <DirecaoCarro+0xb6>
			}				
			else if ( bufferRecepcao->direcao == 'T') {
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	84 35       	cpi	r24, 0x54	; 84
 416:	31 f4       	brne	.+12     	; 0x424 <DirecaoCarro+0x3a>
				bufferRecepcao->estadoCarro = ANDANDO_TRAS;
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	8a 87       	std	Y+10, r24	; 0x0a
				AndandoTras(bufferRecepcao);		
 41c:	ce 01       	movw	r24, r28
 41e:	0e 94 67 01 	call	0x2ce	; 0x2ce <AndandoTras>
 422:	3e c0       	rjmp	.+124    	; 0x4a0 <DirecaoCarro+0xb6>
			}			
			else bufferRecepcao->direcao = 'P';
 424:	80 e5       	ldi	r24, 0x50	; 80
 426:	89 83       	std	Y+1, r24	; 0x01
 428:	3b c0       	rjmp	.+118    	; 0x4a0 <DirecaoCarro+0xb6>
			break;
		
		case ANDANDO_FRENTE:	
			if(bufferRecepcao->direcao == 'P') {
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	80 35       	cpi	r24, 0x50	; 80
 42e:	29 f4       	brne	.+10     	; 0x43a <DirecaoCarro+0x50>
				bufferRecepcao->estadoCarro = PARADO;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	8a 87       	std	Y+10, r24	; 0x0a
				CarroParado();
 434:	0e 94 85 01 	call	0x30a	; 0x30a <CarroParado>
 438:	33 c0       	rjmp	.+102    	; 0x4a0 <DirecaoCarro+0xb6>
			}				
			else if(bufferRecepcao->direcao == 'F'){
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	86 34       	cpi	r24, 0x46	; 70
 43e:	81 f5       	brne	.+96     	; 0x4a0 <DirecaoCarro+0xb6>
				OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 440:	6a 85       	ldd	r22, Y+10	; 0x0a
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	9b 81       	ldd	r25, Y+3	; 0x03
 446:	0e 94 0a 01 	call	0x214	; 0x214 <CalculaDutyCicleM1>
 44a:	90 93 89 00 	sts	0x0089, r25
 44e:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 452:	6a 85       	ldd	r22, Y+10	; 0x0a
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	9d 81       	ldd	r25, Y+5	; 0x05
 458:	0e 94 22 01 	call	0x244	; 0x244 <CalculaDutyCicleM2>
 45c:	90 93 8b 00 	sts	0x008B, r25
 460:	80 93 8a 00 	sts	0x008A, r24
 464:	1d c0       	rjmp	.+58     	; 0x4a0 <DirecaoCarro+0xb6>
			}			
			break;
			
		case ANDANDO_TRAS:
			if(bufferRecepcao->direcao == 'P') {
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	80 35       	cpi	r24, 0x50	; 80
 46a:	29 f4       	brne	.+10     	; 0x476 <DirecaoCarro+0x8c>
				bufferRecepcao->estadoCarro = PARADO;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	8a 87       	std	Y+10, r24	; 0x0a
				CarroParado();
 470:	0e 94 85 01 	call	0x30a	; 0x30a <CarroParado>
 474:	15 c0       	rjmp	.+42     	; 0x4a0 <DirecaoCarro+0xb6>
			}				
			else if(bufferRecepcao->direcao == 'T'){
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	84 35       	cpi	r24, 0x54	; 84
 47a:	91 f4       	brne	.+36     	; 0x4a0 <DirecaoCarro+0xb6>
				OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 47c:	6a 85       	ldd	r22, Y+10	; 0x0a
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	9b 81       	ldd	r25, Y+3	; 0x03
 482:	0e 94 0a 01 	call	0x214	; 0x214 <CalculaDutyCicleM1>
 486:	90 93 89 00 	sts	0x0089, r25
 48a:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 48e:	6a 85       	ldd	r22, Y+10	; 0x0a
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	9d 81       	ldd	r25, Y+5	; 0x05
 494:	0e 94 22 01 	call	0x244	; 0x244 <CalculaDutyCicleM2>
 498:	90 93 8b 00 	sts	0x008B, r25
 49c:	80 93 8a 00 	sts	0x008A, r24
			}			
			break;			
	}		
}		
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <RecebeProtocolo>:
//----------------------------------------------------------------------------

uint8_t RecebeProtocolo(
	BufferRecep* bufferRecepcao
)
{	
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	ec 01       	movw	r28, r24
	uint8_t dadoRecebido = UDR0;	
 4ac:	20 91 c6 00 	lds	r18, 0x00C6
	bufferRecepcao->completo = 'n';
 4b0:	8e e6       	ldi	r24, 0x6E	; 110
 4b2:	89 87       	std	Y+9, r24	; 0x09
	/*Inicia transmissão*/
	if(dadoRecebido == 'S') {
 4b4:	23 35       	cpi	r18, 0x53	; 83
 4b6:	41 f4       	brne	.+16     	; 0x4c8 <RecebeProtocolo+0x22>
		bufferRecepcao->iniciado = 'y';		
 4b8:	89 e7       	ldi	r24, 0x79	; 121
 4ba:	88 87       	std	Y+8, r24	; 0x08
		bufferRecepcao->qntdDadosLido++;
 4bc:	8e 81       	ldd	r24, Y+6	; 0x06
 4be:	9f 81       	ldd	r25, Y+7	; 0x07
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	9f 83       	std	Y+7, r25	; 0x07
 4c4:	8e 83       	std	Y+6, r24	; 0x06
 4c6:	35 c0       	rjmp	.+106    	; 0x532 <RecebeProtocolo+0x8c>
	}		
	else if(bufferRecepcao->iniciado == 'y') {
 4c8:	88 85       	ldd	r24, Y+8	; 0x08
 4ca:	89 37       	cpi	r24, 0x79	; 121
 4cc:	91 f5       	brne	.+100    	; 0x532 <RecebeProtocolo+0x8c>
						
		if(bufferRecepcao->qntdDadosLido == 1) {
 4ce:	8e 81       	ldd	r24, Y+6	; 0x06
 4d0:	9f 81       	ldd	r25, Y+7	; 0x07
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <RecebeProtocolo+0x3e>
			bufferRecepcao->direcao = dadoRecebido;
 4d6:	29 83       	std	Y+1, r18	; 0x01
			bufferRecepcao->qntdDadosLido++;
 4d8:	8e 81       	ldd	r24, Y+6	; 0x06
 4da:	9f 81       	ldd	r25, Y+7	; 0x07
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	9f 83       	std	Y+7, r25	; 0x07
 4e0:	8e 83       	std	Y+6, r24	; 0x06
 4e2:	27 c0       	rjmp	.+78     	; 0x532 <RecebeProtocolo+0x8c>
		}
		else if(bufferRecepcao->qntdDadosLido == 2) {		
 4e4:	8e 81       	ldd	r24, Y+6	; 0x06
 4e6:	9f 81       	ldd	r25, Y+7	; 0x07
 4e8:	02 97       	sbiw	r24, 0x02	; 2
 4ea:	51 f4       	brne	.+20     	; 0x500 <RecebeProtocolo+0x5a>
			bufferRecepcao->dutyCicleM1 = dadoRecebido;
 4ec:	82 2f       	mov	r24, r18
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	9b 83       	std	Y+3, r25	; 0x03
 4f2:	8a 83       	std	Y+2, r24	; 0x02
			bufferRecepcao->qntdDadosLido++;
 4f4:	8e 81       	ldd	r24, Y+6	; 0x06
 4f6:	9f 81       	ldd	r25, Y+7	; 0x07
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	9f 83       	std	Y+7, r25	; 0x07
 4fc:	8e 83       	std	Y+6, r24	; 0x06
 4fe:	19 c0       	rjmp	.+50     	; 0x532 <RecebeProtocolo+0x8c>
		}			
		else if(bufferRecepcao->qntdDadosLido == 3) {
 500:	8e 81       	ldd	r24, Y+6	; 0x06
 502:	9f 81       	ldd	r25, Y+7	; 0x07
 504:	03 97       	sbiw	r24, 0x03	; 3
 506:	51 f4       	brne	.+20     	; 0x51c <RecebeProtocolo+0x76>
			bufferRecepcao->dutyCicleM2 = dadoRecebido;
 508:	82 2f       	mov	r24, r18
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9d 83       	std	Y+5, r25	; 0x05
 50e:	8c 83       	std	Y+4, r24	; 0x04
			bufferRecepcao->qntdDadosLido++;	
 510:	8e 81       	ldd	r24, Y+6	; 0x06
 512:	9f 81       	ldd	r25, Y+7	; 0x07
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	9f 83       	std	Y+7, r25	; 0x07
 518:	8e 83       	std	Y+6, r24	; 0x06
 51a:	0b c0       	rjmp	.+22     	; 0x532 <RecebeProtocolo+0x8c>
		}			
		else {
			if(dadoRecebido == '1')
 51c:	21 33       	cpi	r18, 0x31	; 49
 51e:	19 f4       	brne	.+6      	; 0x526 <RecebeProtocolo+0x80>
				SetaFonteAlimentacao(&bufferRecepcao->fonteAlimentacao);		
 520:	ce 01       	movw	r24, r28
 522:	0e 94 3a 01 	call	0x274	; 0x274 <SetaFonteAlimentacao>
			
			bufferRecepcao->iniciado = 'n';
 526:	8e e6       	ldi	r24, 0x6E	; 110
 528:	88 87       	std	Y+8, r24	; 0x08
			bufferRecepcao->completo = 'y';
 52a:	89 e7       	ldi	r24, 0x79	; 121
 52c:	89 87       	std	Y+9, r24	; 0x09
			bufferRecepcao->qntdDadosLido = 0;
 52e:	1f 82       	std	Y+7, r1	; 0x07
 530:	1e 82       	std	Y+6, r1	; 0x06
		}
	}		
			
	return bufferRecepcao->completo;
 532:	89 85       	ldd	r24, Y+9	; 0x09
}	
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <TensaoBateria>:
}

//----------------------------------------------------------------------------

uint8_t TensaoBateria()
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	00 d0       	rcall	.+0      	; 0x540 <TensaoBateria+0x6>
 540:	1f 92       	push	r1
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t lido16;
	volatile uint8_t tensao;
	
	lido16 = ADC_Read(AD_BATERIA);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
 54c:	9a 83       	std	Y+2, r25	; 0x02
 54e:	89 83       	std	Y+1, r24	; 0x01
	tensao = (uint8_t)((lido16 * 30)/640);
 550:	29 81       	ldd	r18, Y+1	; 0x01
 552:	3a 81       	ldd	r19, Y+2	; 0x02
 554:	4e e1       	ldi	r20, 0x1E	; 30
 556:	42 9f       	mul	r20, r18
 558:	c0 01       	movw	r24, r0
 55a:	43 9f       	mul	r20, r19
 55c:	90 0d       	add	r25, r0
 55e:	11 24       	eor	r1, r1
 560:	60 e8       	ldi	r22, 0x80	; 128
 562:	72 e0       	ldi	r23, 0x02	; 2
 564:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 568:	6b 83       	std	Y+3, r22	; 0x03
		
	return tensao;
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <TensaoPainel>:

//----------------------------------------------------------------------------

uint8_t TensaoPainel()
{		
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	00 d0       	rcall	.+0      	; 0x57e <TensaoPainel+0x6>
 57e:	1f 92       	push	r1
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t lido16;
	volatile uint8_t tensao;
	
	lido16 = ADC_Read(AD_PAINEL);
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
 58a:	9a 83       	std	Y+2, r25	; 0x02
 58c:	89 83       	std	Y+1, r24	; 0x01
	tensao = (uint8_t)((lido16 * 30)/640);
 58e:	29 81       	ldd	r18, Y+1	; 0x01
 590:	3a 81       	ldd	r19, Y+2	; 0x02
 592:	4e e1       	ldi	r20, 0x1E	; 30
 594:	42 9f       	mul	r20, r18
 596:	c0 01       	movw	r24, r0
 598:	43 9f       	mul	r20, r19
 59a:	90 0d       	add	r25, r0
 59c:	11 24       	eor	r1, r1
 59e:	60 e8       	ldi	r22, 0x80	; 128
 5a0:	72 e0       	ldi	r23, 0x02	; 2
 5a2:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 5a6:	6b 83       	std	Y+3, r22	; 0x03
	
	/*Se a tensão do painel for menor que 13 volts o painel não conseguirá 
	fornecer a corrente necessária para os motores. Então foi colocado um
	relé para selecionar entre a tensão da bateria ou a tensão do painel*/
	if(tensao >= 13) 
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	8d 30       	cpi	r24, 0x0D	; 13
 5ac:	10 f0       	brcs	.+4      	; 0x5b2 <TensaoPainel+0x3a>
		ATIVA_RELE(RELE_TENSAO_PAINEL);
 5ae:	5c 9a       	sbi	0x0b, 4	; 11
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <TensaoPainel+0x3c>
	else 
		DESATIVA_RELE(RELE_TENSAO_PAINEL);
 5b2:	5c 98       	cbi	0x0b, 4	; 11
		
	
	return tensao;
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
	//return lidoAd;
}
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <TransmitiBuffer>:
//----------------------------------------------------------------------------

void TransmitiBuffer(
	volatile uint8_t* fonteAlimentacao
)
{	
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <TransmitiBuffer+0xa>
 5cc:	1f 92       	push	r1
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	8c 01       	movw	r16, r24
	volatile uint8_t indicaInicioTransmissao = 'z';
 5d4:	8a e7       	ldi	r24, 0x7A	; 122
 5d6:	89 83       	std	Y+1, r24	; 0x01
	//lidoADBat = ADC_Read(AD_BATERIA);
	//lidoADPain = ADC_Read(AD_PAINEL);
	//tensaoBat = (uint8_t)((lidoADBat * 30)/640);
	//tensaoPainel = (uint8_t)((lidoADPain * 30)/640);
						
	tensaoBat = TensaoBateria();
 5d8:	0e 94 9d 02 	call	0x53a	; 0x53a <TensaoBateria>
 5dc:	8a 83       	std	Y+2, r24	; 0x02
	tensaoPainel = TensaoPainel();
 5de:	0e 94 bc 02 	call	0x578	; 0x578 <TensaoPainel>
 5e2:	8b 83       	std	Y+3, r24	; 0x03
						
	/*Indica o recebimento do protocolo e o inicio do envio do novo protocolo*/			
	Usart_Transmit(indicaInicioTransmissao);
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	0e 94 14 03 	call	0x628	; 0x628 <Usart_Transmit>
	
	/*Indica qual fonte está selecionada 'B' bateria ou 'P' painel*/
	Usart_Transmit(*fonteAlimentacao);
 5ea:	f8 01       	movw	r30, r16
 5ec:	80 81       	ld	r24, Z
 5ee:	0e 94 14 03 	call	0x628	; 0x628 <Usart_Transmit>
	
	/*Tensão na bateria*/	
	Usart_Transmit('2');//trace
 5f2:	82 e3       	ldi	r24, 0x32	; 50
 5f4:	0e 94 14 03 	call	0x628	; 0x628 <Usart_Transmit>
	//Usart_Transmit(tensaoBat);
	
	/*Tensão no Painel*/
	Usart_Transmit('!');//trace
 5f8:	81 e2       	ldi	r24, 0x21	; 33
 5fa:	0e 94 14 03 	call	0x628	; 0x628 <Usart_Transmit>
	//Usart_Transmit(tensaoPainel);
}
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 60e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 612:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
 616:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b10011000;
 61a:	88 e9       	ldi	r24, 0x98	; 152
 61c:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 620:	86 e0       	ldi	r24, 0x06	; 6
 622:	80 93 c2 00 	sts	0x00C2, r24
 626:	08 95       	ret

00000628 <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 628:	e0 ec       	ldi	r30, 0xC0	; 192
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	90 81       	ld	r25, Z
 62e:	95 ff       	sbrs	r25, 5
 630:	fd cf       	rjmp	.-6      	; 0x62c <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 632:	80 93 c6 00 	sts	0x00C6, r24
 636:	08 95       	ret

00000638 <__udivmodhi4>:
 638:	aa 1b       	sub	r26, r26
 63a:	bb 1b       	sub	r27, r27
 63c:	51 e1       	ldi	r21, 0x11	; 17
 63e:	07 c0       	rjmp	.+14     	; 0x64e <__udivmodhi4_ep>

00000640 <__udivmodhi4_loop>:
 640:	aa 1f       	adc	r26, r26
 642:	bb 1f       	adc	r27, r27
 644:	a6 17       	cp	r26, r22
 646:	b7 07       	cpc	r27, r23
 648:	10 f0       	brcs	.+4      	; 0x64e <__udivmodhi4_ep>
 64a:	a6 1b       	sub	r26, r22
 64c:	b7 0b       	sbc	r27, r23

0000064e <__udivmodhi4_ep>:
 64e:	88 1f       	adc	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	5a 95       	dec	r21
 654:	a9 f7       	brne	.-22     	; 0x640 <__udivmodhi4_loop>
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
