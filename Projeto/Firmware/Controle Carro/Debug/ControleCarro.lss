
ControleCarro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800100  00800100  00000a98  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000138  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ccd  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000590  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000061f  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000334  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004dc  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000008d1  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  0000355d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  88:	0c 94 10 05 	jmp	0xa20	; 0xa20 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
	* bit 4		 0:	 R:	    -:			Não usado deve ser sempre lido zero
	* bit 3:0 0000:	 R/W:	MUX[3:0]:	0000=ADC0, 0001=ADC1, 0010==ADC2, 0011=ADC3, 0100=ADC4, 0101=ADC5,
										0110=ADC6, 0111=ADC7, 1000=ADC8, 1001:1101=Reservado, 1110=1.1V(VBG)
										1111=0v(GND)
	*/
	ADMUX = 0b01000000; 
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24
	Exemplo: prescaler de 128: 20MHz/128 = 156,250KHz
		OBS: ADC[ADCL-ADCH] Registrado que armazena o resultado. Se o ADCL é lido o registrador 
		não é atualizado até ADCH ser lido. Se ADLAR for setado(ajuste a esquerda) e a precisão
		não for maior que 8bits apenas a leitura do ADCH é o suficiente.
	*/	
	ADCSRA = 0b10000111;  
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24
										000=Free Running mode,  001==Analog Comparator, 
										010=External Interrupt Request 0, 011=Timer/Counter0 Compare Match A,  
										100=Timer/Counter0 Overflow, 101=Timer/Counter1 Compare Match B
										110=Timer/Counter1 Overflow, 111=Timer/Counter1 Capture Even
	*/	
	ADCSRB = 0b00000000;  
  9c:	10 92 7b 00 	sts	0x007B, r1
	/* DIDR0 - Digital Input Disable Register 0
	* bit 7:6	00:		R:		-:				Reservado. Para uso futuro. Dever ser sempre escirto zero.
	* bit 5:0	111111:	R/W:	ADCnD[5:0]:		0=Habilita, 1=Entrada digital desabilitada

	*/	
	DIDR0 = 0b00111111;  
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	80 93 7e 00 	sts	0x007E, r24
  a6:	08 95       	ret

000000a8 <ADC_Read>:
uint16_t ADC_Read(
	uint8_t canal
)
{
	/*Máscara para definir o canal. Bits2:0*/
	ADMUX = (ADMUX & 0b11111000)  | (canal & 0b0000111);
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	87 70       	andi	r24, 0x07	; 7
  b0:	98 7f       	andi	r25, 0xF8	; 248
  b2:	98 2b       	or	r25, r24
  b4:	90 83       	st	Z, r25
	
	/*Inicia conversão*/
	ADCSRA |= (1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	
	/*Aguarda conversão ser concluída*/
	while(ADCSRA & (1<<ADSC));
  c0:	80 81       	ld	r24, Z
  c2:	86 fd       	sbrc	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <ADC_Read+0x18>
		
	return (ADC);
  c6:	80 91 78 00 	lds	r24, 0x0078
  ca:	90 91 79 00 	lds	r25, 0x0079
}
  ce:	08 95       	ret

000000d0 <__vector_18>:
void SolicitaReenvioDados();

//----------------------------------------------------------------------------

ISR(USART_RX_vect)							
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	RecebeProtocolo(&bufferRX_g);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 9a 02 	call	0x534	; 0x534 <RecebeProtocolo>
	if(bufferRX_g.completo == 'y') {
  fa:	80 91 0a 01 	lds	r24, 0x010A
  fe:	89 37       	cpi	r24, 0x79	; 121
 100:	61 f4       	brne	.+24     	; 0x11a <__vector_18+0x4a>
		DirecaoCarro(&bufferRX_g);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 3c 02 	call	0x478	; 0x478 <DirecaoCarro>
		AnguloServo(&bufferRX_g);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <AnguloServo>

		TransmitiBuffer(&bufferRX_g.fonteAlimentacao);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 3f 03 	call	0x67e	; 0x67e <TransmitiBuffer>
	}	
}	
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_9>:

//----------------------------------------------------------------------------

ISR(TIMER2_OVF_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	static uint8_t tempoRecep = 0;
	
	if(bufferRX_g.iniciado == 'y')
 162:	80 91 09 01 	lds	r24, 0x0109
 166:	89 37       	cpi	r24, 0x79	; 121
 168:	19 f4       	brne	.+6      	; 0x170 <__vector_9+0x34>
		tempoRecep = 0;
 16a:	10 92 00 01 	sts	0x0100, r1
 16e:	12 c0       	rjmp	.+36     	; 0x194 <__vector_9+0x58>
	else if(tempoRecep > 100) {
 170:	80 91 00 01 	lds	r24, 0x0100
 174:	85 36       	cpi	r24, 0x65	; 101
 176:	70 f0       	brcs	.+28     	; 0x194 <__vector_9+0x58>
		/*Desabilita Interrupção RX*/ //trace
		clr_bit(UCSR0B, 7);
 178:	c1 ec       	ldi	r28, 0xC1	; 193
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	88 81       	ld	r24, Y
 17e:	8f 77       	andi	r24, 0x7F	; 127
 180:	88 83       	st	Y, r24
		ParadaLenta(&bufferRX_g);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <ParadaLenta>
		/*Habilita Interrupção RX*///trace
		tempoRecep = 0;
 18a:	10 92 00 01 	sts	0x0100, r1
		set_bit(UCSR0B, 7);
 18e:	88 81       	ld	r24, Y
 190:	80 68       	ori	r24, 0x80	; 128
 192:	88 83       	st	Y, r24
	}
	tempoRecep++;
 194:	80 91 00 01 	lds	r24, 0x0100
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 00 01 	sts	0x0100, r24
		//tracetempoRecep = 0;
	//trace}
	
	//traceSolicitaReenvioDados();
	
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <ValoresIniciaisBuffer>:

//----------------------------------------------------------------------------

void ValoresIniciaisBuffer()
{
	bufferRX_g.dutyCicleM1 = 0;
 1c4:	10 92 04 01 	sts	0x0104, r1
 1c8:	10 92 03 01 	sts	0x0103, r1
	bufferRX_g.dutyCicleM2 = 0;
 1cc:	10 92 06 01 	sts	0x0106, r1
 1d0:	10 92 05 01 	sts	0x0105, r1
	bufferRX_g.qntdDadosLido = 0;
 1d4:	10 92 08 01 	sts	0x0108, r1
 1d8:	10 92 07 01 	sts	0x0107, r1
	bufferRX_g.iniciado = 'n';
 1dc:	8e e6       	ldi	r24, 0x6E	; 110
 1de:	80 93 09 01 	sts	0x0109, r24
	bufferRX_g.completo = 'n';
 1e2:	80 93 0a 01 	sts	0x010A, r24
	bufferRX_g.fonteAlimentacao = 'B';
 1e6:	82 e4       	ldi	r24, 0x42	; 66
 1e8:	80 93 01 01 	sts	0x0101, r24
	bufferRX_g.direcao = 'P';
 1ec:	80 e5       	ldi	r24, 0x50	; 80
 1ee:	80 93 02 01 	sts	0x0102, r24
	bufferRX_g.estadoCarro = PARADO;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 0b 01 	sts	0x010B, r24
 1f8:	08 95       	ret

000001fa <main>:
}

//----------------------------------------------------------------------------
int main()
{
	Usart_Init(MYUBRR);
 1fa:	87 e6       	ldi	r24, 0x67	; 103
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 65 03 	call	0x6ca	; 0x6ca <Usart_Init>
	ADC_Init();
 202:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	ValoresIniciaisBuffer();
 206:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <ValoresIniciaisBuffer>
	ConfiguracoesDirecaoInit();
 20a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ConfiguracoesDirecaoInit>
	
	/*Contador Timer 2*/
	TIMSK2 = 0b00000001;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 70 00 	sts	0x0070, r24
	/*Prescaler do Timer2*/
	TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	80 93 b1 00 	sts	0x00B1, r24
	
	sei();	
 21a:	78 94       	sei
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0x22>

0000021e <CalculaDutyCicleM1>:
/*Irá receber sempre os duty cicle definidos 25, 50, 75 e 100*/
uint16_t CalculaDutyCicleM1(
	uint16_t porCentagem,
	TEstadoCarro estadoCarro
)
{
 21e:	85 36       	cpi	r24, 0x65	; 101
 220:	91 05       	cpc	r25, r1
 222:	10 f0       	brcs	.+4      	; 0x228 <CalculaDutyCicleM1+0xa>
 224:	84 e6       	ldi	r24, 0x64	; 100
 226:	90 e0       	ldi	r25, 0x00	; 0
	if(porCentagem > 100)
		porCentagem = 100;
	
	/*Valor é igual ao (35000 * 0,25) ou (350*porcentagem)*/
	uint16_t valor = porCentagem * 350;
 228:	4e e5       	ldi	r20, 0x5E	; 94
 22a:	51 e0       	ldi	r21, 0x01	; 1
 22c:	84 9f       	mul	r24, r20
 22e:	90 01       	movw	r18, r0
 230:	85 9f       	mul	r24, r21
 232:	30 0d       	add	r19, r0
 234:	94 9f       	mul	r25, r20
 236:	30 0d       	add	r19, r0
 238:	11 24       	eor	r1, r1
				
	if(estadoCarro == ANDANDO_TRAS)
 23a:	63 30       	cpi	r22, 0x03	; 3
 23c:	31 f4       	brne	.+12     	; 0x24a <CalculaDutyCicleM1+0x2c>
		valor = 35000 - valor;
 23e:	88 eb       	ldi	r24, 0xB8	; 184
 240:	98 e8       	ldi	r25, 0x88	; 136
 242:	ac 01       	movw	r20, r24
 244:	42 1b       	sub	r20, r18
 246:	53 0b       	sbc	r21, r19
 248:	9a 01       	movw	r18, r20
		
	return valor;
}
 24a:	c9 01       	movw	r24, r18
 24c:	08 95       	ret

0000024e <CalculaDutyCicleM2>:
/*Irá receber sempre os duty cicle definidos 25, 50, 75 e 100*/
uint16_t CalculaDutyCicleM2(
	uint16_t porCentagem,
	TEstadoCarro estadoCarro
)
{
 24e:	85 36       	cpi	r24, 0x65	; 101
 250:	91 05       	cpc	r25, r1
 252:	10 f0       	brcs	.+4      	; 0x258 <CalculaDutyCicleM2+0xa>
 254:	84 e6       	ldi	r24, 0x64	; 100
 256:	90 e0       	ldi	r25, 0x00	; 0
	if(porCentagem > 100)
		porCentagem = 100;
	
	uint16_t valor = porCentagem * 350;
 258:	4e e5       	ldi	r20, 0x5E	; 94
 25a:	51 e0       	ldi	r21, 0x01	; 1
 25c:	84 9f       	mul	r24, r20
 25e:	90 01       	movw	r18, r0
 260:	85 9f       	mul	r24, r21
 262:	30 0d       	add	r19, r0
 264:	94 9f       	mul	r25, r20
 266:	30 0d       	add	r19, r0
 268:	11 24       	eor	r1, r1
		
	if(estadoCarro == ANDANDO_TRAS)
 26a:	63 30       	cpi	r22, 0x03	; 3
 26c:	31 f4       	brne	.+12     	; 0x27a <CalculaDutyCicleM2+0x2c>
		valor = 35000 - valor;
 26e:	88 eb       	ldi	r24, 0xB8	; 184
 270:	98 e8       	ldi	r25, 0x88	; 136
 272:	ac 01       	movw	r20, r24
 274:	42 1b       	sub	r20, r18
 276:	53 0b       	sbc	r21, r19
 278:	9a 01       	movw	r18, r20
			
	return valor;
}
 27a:	c9 01       	movw	r24, r18
 27c:	08 95       	ret

0000027e <ConfigInitServo>:

//----------------------------------------------------------------------------

void ConfigInitServo() {
	/*pinos OC0B e OC0A como saída*/
	DDRD |= (1 << DDD6) | (1 << DDD5);
 27e:	8a b1       	in	r24, 0x0a	; 10
 280:	80 66       	ori	r24, 0x60	; 96
 282:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1); // set none-inverting mode
 284:	84 b5       	in	r24, 0x24	; 36
 286:	80 6a       	ori	r24, 0xA0	; 160
 288:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);// set fast PWM Mode
 28a:	84 b5       	in	r24, 0x24	; 36
 28c:	83 60       	ori	r24, 0x03	; 3
 28e:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 (Freq Servo Motor 50Hz)
 290:	85 b5       	in	r24, 0x25	; 37
 292:	85 60       	ori	r24, 0x05	; 5
 294:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 23; // equivale a 1.5 ms do periodo do servo
 296:	87 e1       	ldi	r24, 0x17	; 23
 298:	87 bd       	out	0x27, r24	; 39
	OCR0B = 23;
 29a:	88 bd       	out	0x28, r24	; 40
 29c:	08 95       	ret

0000029e <SetaFonteAlimentacao>:
//----------------------------------------------------------------------------

void SetaFonteAlimentacao(
	volatile uint8_t* fonteAlimentacao
)
{	
 29e:	fc 01       	movw	r30, r24
	if(*fonteAlimentacao == 'P') {
 2a0:	80 81       	ld	r24, Z
 2a2:	80 35       	cpi	r24, 0x50	; 80
 2a4:	21 f4       	brne	.+8      	; 0x2ae <SetaFonteAlimentacao+0x10>
		DESATIVA_RELE(RELE_CHAVE_PAINEL_BATERIA);
 2a6:	5b 98       	cbi	0x0b, 3	; 11
		*fonteAlimentacao = 'B';
 2a8:	82 e4       	ldi	r24, 0x42	; 66
 2aa:	80 83       	st	Z, r24
 2ac:	08 95       	ret
	}			
	else  if(*fonteAlimentacao == 'B'){
 2ae:	80 81       	ld	r24, Z
 2b0:	82 34       	cpi	r24, 0x42	; 66
 2b2:	19 f4       	brne	.+6      	; 0x2ba <SetaFonteAlimentacao+0x1c>
		ATIVA_RELE(RELE_CHAVE_PAINEL_BATERIA);
 2b4:	5b 9a       	sbi	0x0b, 3	; 11
		*fonteAlimentacao = 'P';
 2b6:	80 e5       	ldi	r24, 0x50	; 80
 2b8:	80 83       	st	Z, r24
 2ba:	08 95       	ret

000002bc <AnguloServo>:

//Recebe um valor entre 0-100%. 100% equivale a 180º
/*O frequencia do servo é de 50Hz período de 20ms com valor minimo de 1ms(5%) e máximo de 2ms(10%). O registrador OCR0x é de 8bits (0-255) o valor máximo para*/
void AnguloServo(
	BufferRecep* bufferRecepcao
){			
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
	/*O período do duty do servo é de no mínimo 1ms e no máximo 2ms. A Fpwm = fclk_io / (prescaler*256) para o prescaler do timer de 1024 o período é de 16.384ms. 
	O contador do timer0 deve contar de 15,56 (1ms) até 31,12 (2ms)*/
	uint16_t anguloServoLeft = (uint16_t)(((bufferRecepcao->anguloServoLeft) * 0.15) + 15); //(Valor = (dutyCicle * 15) / 100) + 15
 2c0:	fc 01       	movw	r30, r24
 2c2:	63 85       	ldd	r22, Z+11	; 0x0b
	uint16_t anguloServoRight = (uint16_t)(((bufferRecepcao->anguloServoRight) * 0.15) + 15); 
 2c4:	d4 85       	ldd	r29, Z+12	; 0x0c
void AnguloServo(
	BufferRecep* bufferRecepcao
){			
	/*O período do duty do servo é de no mínimo 1ms e no máximo 2ms. A Fpwm = fclk_io / (prescaler*256) para o prescaler do timer de 1024 o período é de 16.384ms. 
	O contador do timer0 deve contar de 15,56 (1ms) até 31,12 (2ms)*/
	uint16_t anguloServoLeft = (uint16_t)(((bufferRecepcao->anguloServoLeft) * 0.15) + 15); //(Valor = (dutyCicle * 15) / 100) + 15
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 0d 04 	call	0x81a	; 0x81a <__floatsisf>
 2d0:	2a e9       	ldi	r18, 0x9A	; 154
 2d2:	39 e9       	ldi	r19, 0x99	; 153
 2d4:	49 e1       	ldi	r20, 0x19	; 25
 2d6:	5e e3       	ldi	r21, 0x3E	; 62
 2d8:	0e 94 99 04 	call	0x932	; 0x932 <__mulsf3>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e7       	ldi	r20, 0x70	; 112
 2e2:	51 e4       	ldi	r21, 0x41	; 65
 2e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__addsf3>
 2e8:	0e 94 df 03 	call	0x7be	; 0x7be <__fixunssfsi>
 2ec:	c6 2f       	mov	r28, r22
	uint16_t anguloServoRight = (uint16_t)(((bufferRecepcao->anguloServoRight) * 0.15) + 15); 
 2ee:	6d 2f       	mov	r22, r29
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 0d 04 	call	0x81a	; 0x81a <__floatsisf>
 2fa:	2a e9       	ldi	r18, 0x9A	; 154
 2fc:	39 e9       	ldi	r19, 0x99	; 153
 2fe:	49 e1       	ldi	r20, 0x19	; 25
 300:	5e e3       	ldi	r21, 0x3E	; 62
 302:	0e 94 99 04 	call	0x932	; 0x932 <__mulsf3>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e7       	ldi	r20, 0x70	; 112
 30c:	51 e4       	ldi	r21, 0x41	; 65
 30e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__addsf3>
 312:	0e 94 df 03 	call	0x7be	; 0x7be <__fixunssfsi>
	
	unsigned char left = (unsigned char) anguloServoLeft; 
	unsigned char right = (unsigned char) anguloServoRight;
	
	OCR0A = left;
 316:	c7 bd       	out	0x27, r28	; 39
	OCR0B = right;
 318:	68 bd       	out	0x28, r22	; 40
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <AndandoFrente>:
//----------------------------------------------------------------------------

void AndandoFrente(
	BufferRecep* bufferRecepcao
)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	85 e3       	ldi	r24, 0x35	; 53
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <AndandoFrente+0x8>
 32c:	00 00       	nop
	_delay_us(10);
	set_bit(PORTB,ENA_ENB);	
 32e:	2c 9a       	sbi	0x05, 4	; 5
	clr_bit(PORTB,IN2_IN4);
 330:	2b 98       	cbi	0x05, 3	; 5
	OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 332:	6a 85       	ldd	r22, Y+10	; 0x0a
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	9b 81       	ldd	r25, Y+3	; 0x03
 338:	0e 94 0f 01 	call	0x21e	; 0x21e <CalculaDutyCicleM1>
 33c:	90 93 89 00 	sts	0x0089, r25
 340:	80 93 88 00 	sts	0x0088, r24
	OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 344:	6a 85       	ldd	r22, Y+10	; 0x0a
 346:	8c 81       	ldd	r24, Y+4	; 0x04
 348:	9d 81       	ldd	r25, Y+5	; 0x05
 34a:	0e 94 27 01 	call	0x24e	; 0x24e <CalculaDutyCicleM2>
 34e:	90 93 8b 00 	sts	0x008B, r25
 352:	80 93 8a 00 	sts	0x008A, r24
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <AndandoTras>:
//----------------------------------------------------------------------------

void AndandoTras(
	BufferRecep* bufferRecepcao
)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
 362:	85 e3       	ldi	r24, 0x35	; 53
 364:	8a 95       	dec	r24
 366:	f1 f7       	brne	.-4      	; 0x364 <AndandoTras+0x8>
 368:	00 00       	nop
	_delay_us(10);
	set_bit(PORTB,ENA_ENB);	
 36a:	2c 9a       	sbi	0x05, 4	; 5
	set_bit(PORTB,IN2_IN4);
 36c:	2b 9a       	sbi	0x05, 3	; 5
	OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 36e:	6a 85       	ldd	r22, Y+10	; 0x0a
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	9b 81       	ldd	r25, Y+3	; 0x03
 374:	0e 94 0f 01 	call	0x21e	; 0x21e <CalculaDutyCicleM1>
 378:	90 93 89 00 	sts	0x0089, r25
 37c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 380:	6a 85       	ldd	r22, Y+10	; 0x0a
 382:	8c 81       	ldd	r24, Y+4	; 0x04
 384:	9d 81       	ldd	r25, Y+5	; 0x05
 386:	0e 94 27 01 	call	0x24e	; 0x24e <CalculaDutyCicleM2>
 38a:	90 93 8b 00 	sts	0x008B, r25
 38e:	80 93 8a 00 	sts	0x008A, r24
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <CarroParado>:
 398:	85 e3       	ldi	r24, 0x35	; 53
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <CarroParado+0x2>
 39e:	00 00       	nop
//----------------------------------------------------------------------------

void CarroParado()
{
	_delay_us(10);
	clr_bit(PORTB,ENA_ENB);	
 3a0:	2c 98       	cbi	0x05, 4	; 5
	set_bit(PORTB,IN1);	
 3a2:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB,IN3);	
 3a4:	29 9a       	sbi	0x05, 1	; 5
	set_bit(PORTB,IN2_IN4);	
 3a6:	2b 9a       	sbi	0x05, 3	; 5
 3a8:	08 95       	ret

000003aa <ConfiguracoesDirecaoInit>:
void ConfiguracoesDirecaoInit(
	BufferRecep* bufferRecepcao
)
{	
	/*pinos OC1B e OC1A como saída*/
	DDRB |= (1 << IN2_IN4) | (1 << ENA_ENB) | (1 << IN1) | (1 << IN3);	
 3aa:	84 b1       	in	r24, 0x04	; 4
 3ac:	8e 61       	ori	r24, 0x1E	; 30
 3ae:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << IN2_IN4) | (1 << ENA_ENB);		
 3b0:	85 b1       	in	r24, 0x05	; 5
 3b2:	88 61       	ori	r24, 0x18	; 24
 3b4:	85 b9       	out	0x05, r24	; 5
	PORTB &= (~(1 << IN1)) & (~(1 << IN3)); 
 3b6:	85 b1       	in	r24, 0x05	; 5
 3b8:	89 7f       	andi	r24, 0xF9	; 249
 3ba:	85 b9       	out	0x05, r24	; 5
	
	/*Pino relé como saída*/	
	RELE_DDR |= (1 << RELE_CHAVE_PAINEL_BATERIA) | (1 << RELE_TENSAO_PAINEL);
 3bc:	8a b1       	in	r24, 0x0a	; 10
 3be:	88 61       	ori	r24, 0x18	; 24
 3c0:	8a b9       	out	0x0a, r24	; 10
	
	/*Seleciona a fonte de alimentação da bateria*/
	DESATIVA_RELE(RELE_CHAVE_PAINEL_BATERIA);
 3c2:	5b 98       	cbi	0x0b, 3	; 11
	
	/*Desliga o painel*/
	DESATIVA_RELE(RELE_TENSAO_PAINEL);
 3c4:	5c 98       	cbi	0x0b, 4	; 11
		
	TCCR1A = 0b10100010;		//PWM não invertido nos pinos OC1A e OC1B
 3c6:	82 ea       	ldi	r24, 0xA2	; 162
 3c8:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00011001;		//liga TC1, prescaler = 1
 3cc:	89 e1       	ldi	r24, 0x19	; 25
 3ce:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 35000;				//valor máximo para contagem
 3d2:	88 eb       	ldi	r24, 0xB8	; 184
 3d4:	98 e8       	ldi	r25, 0x88	; 136
 3d6:	90 93 87 00 	sts	0x0087, r25
 3da:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 0;				//controle do ciclo ativo do PWM 0C1A
 3de:	10 92 89 00 	sts	0x0089, r1
 3e2:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 3e6:	10 92 8b 00 	sts	0x008B, r1
 3ea:	10 92 8a 00 	sts	0x008A, r1
			
	ConfigInitServo();
 3ee:	0e 94 3f 01 	call	0x27e	; 0x27e <ConfigInitServo>
					
	CarroParado();
 3f2:	0e 94 cc 01 	call	0x398	; 0x398 <CarroParado>
 3f6:	08 95       	ret

000003f8 <ParadaLenta>:
//----------------------------------------------------------------------------

void ParadaLenta(
	BufferRecep* bufferRecepcao
) 
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
	uint8_t incremento = 35;
	uint8_t incrementoInicial = 15;
	
	switch (bufferRecepcao->estadoCarro) {			
 3fe:	8a 85       	ldd	r24, Y+10	; 0x0a
 400:	82 50       	subi	r24, 0x02	; 2
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	b0 f5       	brcc	.+108    	; 0x472 <ParadaLenta+0x7a>
		case ANDANDO_FRENTE:
		case ANDANDO_TRAS:			
			if(bufferRecepcao->dutyCicleM1 > incrementoInicial)//Abaixo desse valor o carrinho não anda
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	9b 81       	ldd	r25, Y+3	; 0x03
 40a:	40 97       	sbiw	r24, 0x10	; 16
 40c:	2c f0       	brlt	.+10     	; 0x418 <ParadaLenta+0x20>
				bufferRecepcao->dutyCicleM1 -= incremento;
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	9b 81       	ldd	r25, Y+3	; 0x03
 412:	83 97       	sbiw	r24, 0x23	; 35
 414:	9b 83       	std	Y+3, r25	; 0x03
 416:	8a 83       	std	Y+2, r24	; 0x02
		
			if(bufferRecepcao->dutyCicleM2 > incrementoInicial)//Abaixo desse valor o carrinho não anda
 418:	8c 81       	ldd	r24, Y+4	; 0x04
 41a:	9d 81       	ldd	r25, Y+5	; 0x05
 41c:	40 97       	sbiw	r24, 0x10	; 16
 41e:	2c f0       	brlt	.+10     	; 0x42a <ParadaLenta+0x32>
				bufferRecepcao->dutyCicleM2 -= incremento;
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	9d 81       	ldd	r25, Y+5	; 0x05
 424:	83 97       	sbiw	r24, 0x23	; 35
 426:	9d 83       	std	Y+5, r25	; 0x05
 428:	8c 83       	std	Y+4, r24	; 0x04
		
			if(bufferRecepcao->dutyCicleM1 < incrementoInicial && bufferRecepcao->dutyCicleM2 < incrementoInicial) {
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	9b 81       	ldd	r25, Y+3	; 0x03
 42e:	0f 97       	sbiw	r24, 0x0f	; 15
 430:	74 f4       	brge	.+28     	; 0x44e <ParadaLenta+0x56>
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	9d 81       	ldd	r25, Y+5	; 0x05
 436:	0f 97       	sbiw	r24, 0x0f	; 15
 438:	54 f4       	brge	.+20     	; 0x44e <ParadaLenta+0x56>
					bufferRecepcao->estadoCarro = PARADO;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	8a 87       	std	Y+10, r24	; 0x0a
					bufferRecepcao->iniciado = 'n';
 43e:	8e e6       	ldi	r24, 0x6E	; 110
 440:	88 87       	std	Y+8, r24	; 0x08
					bufferRecepcao->completo = 'n';
 442:	89 87       	std	Y+9, r24	; 0x09
					bufferRecepcao->qntdDadosLido = 0;
 444:	1f 82       	std	Y+7, r1	; 0x07
 446:	1e 82       	std	Y+6, r1	; 0x06
					CarroParado();
 448:	0e 94 cc 01 	call	0x398	; 0x398 <CarroParado>
 44c:	12 c0       	rjmp	.+36     	; 0x472 <ParadaLenta+0x7a>
				}
				
			else {
				OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 44e:	6a 85       	ldd	r22, Y+10	; 0x0a
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	0e 94 0f 01 	call	0x21e	; 0x21e <CalculaDutyCicleM1>
 458:	90 93 89 00 	sts	0x0089, r25
 45c:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 460:	6a 85       	ldd	r22, Y+10	; 0x0a
 462:	8c 81       	ldd	r24, Y+4	; 0x04
 464:	9d 81       	ldd	r25, Y+5	; 0x05
 466:	0e 94 27 01 	call	0x24e	; 0x24e <CalculaDutyCicleM2>
 46a:	90 93 8b 00 	sts	0x008B, r25
 46e:	80 93 8a 00 	sts	0x008A, r24
	
		break;
		case PARADO:
		break;
	}
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <DirecaoCarro>:
//----------------------------------------------------------------------------

void DirecaoCarro(
	BufferRecep* bufferRecepcao
)
{		
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
	switch (bufferRecepcao->estadoCarro) {
 47e:	8a 85       	ldd	r24, Y+10	; 0x0a
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	d1 f0       	breq	.+52     	; 0x4b8 <DirecaoCarro+0x40>
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	b1 f1       	breq	.+108    	; 0x4f4 <DirecaoCarro+0x7c>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	09 f0       	breq	.+2      	; 0x48e <DirecaoCarro+0x16>
 48c:	50 c0       	rjmp	.+160    	; 0x52e <DirecaoCarro+0xb6>
		case PARADO:
			if ( bufferRecepcao->direcao == 'F') {
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	86 34       	cpi	r24, 0x46	; 70
 492:	31 f4       	brne	.+12     	; 0x4a0 <DirecaoCarro+0x28>
				bufferRecepcao->estadoCarro = ANDANDO_FRENTE;
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	8a 87       	std	Y+10, r24	; 0x0a
				AndandoFrente(bufferRecepcao);
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 90 01 	call	0x320	; 0x320 <AndandoFrente>
 49e:	47 c0       	rjmp	.+142    	; 0x52e <DirecaoCarro+0xb6>
			}				
			else if ( bufferRecepcao->direcao == 'T') {
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	84 35       	cpi	r24, 0x54	; 84
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <DirecaoCarro+0x3a>
				bufferRecepcao->estadoCarro = ANDANDO_TRAS;
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	8a 87       	std	Y+10, r24	; 0x0a
				AndandoTras(bufferRecepcao);		
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 ae 01 	call	0x35c	; 0x35c <AndandoTras>
 4b0:	3e c0       	rjmp	.+124    	; 0x52e <DirecaoCarro+0xb6>
			}			
			else bufferRecepcao->direcao = 'P';
 4b2:	80 e5       	ldi	r24, 0x50	; 80
 4b4:	89 83       	std	Y+1, r24	; 0x01
 4b6:	3b c0       	rjmp	.+118    	; 0x52e <DirecaoCarro+0xb6>
			break;
		
		case ANDANDO_FRENTE:	
			if(bufferRecepcao->direcao == 'P') {
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	80 35       	cpi	r24, 0x50	; 80
 4bc:	29 f4       	brne	.+10     	; 0x4c8 <DirecaoCarro+0x50>
				bufferRecepcao->estadoCarro = PARADO;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	8a 87       	std	Y+10, r24	; 0x0a
				CarroParado();
 4c2:	0e 94 cc 01 	call	0x398	; 0x398 <CarroParado>
 4c6:	33 c0       	rjmp	.+102    	; 0x52e <DirecaoCarro+0xb6>
			}				
			else if(bufferRecepcao->direcao == 'F'){
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	86 34       	cpi	r24, 0x46	; 70
 4cc:	81 f5       	brne	.+96     	; 0x52e <DirecaoCarro+0xb6>
				OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 4ce:	6a 85       	ldd	r22, Y+10	; 0x0a
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	9b 81       	ldd	r25, Y+3	; 0x03
 4d4:	0e 94 0f 01 	call	0x21e	; 0x21e <CalculaDutyCicleM1>
 4d8:	90 93 89 00 	sts	0x0089, r25
 4dc:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 4e0:	6a 85       	ldd	r22, Y+10	; 0x0a
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	9d 81       	ldd	r25, Y+5	; 0x05
 4e6:	0e 94 27 01 	call	0x24e	; 0x24e <CalculaDutyCicleM2>
 4ea:	90 93 8b 00 	sts	0x008B, r25
 4ee:	80 93 8a 00 	sts	0x008A, r24
 4f2:	1d c0       	rjmp	.+58     	; 0x52e <DirecaoCarro+0xb6>
			}			
			break;
			
		case ANDANDO_TRAS:
			if(bufferRecepcao->direcao == 'P') {
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	80 35       	cpi	r24, 0x50	; 80
 4f8:	29 f4       	brne	.+10     	; 0x504 <DirecaoCarro+0x8c>
				bufferRecepcao->estadoCarro = PARADO;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	8a 87       	std	Y+10, r24	; 0x0a
				CarroParado();
 4fe:	0e 94 cc 01 	call	0x398	; 0x398 <CarroParado>
 502:	15 c0       	rjmp	.+42     	; 0x52e <DirecaoCarro+0xb6>
			}				
			else if(bufferRecepcao->direcao == 'T'){
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	84 35       	cpi	r24, 0x54	; 84
 508:	91 f4       	brne	.+36     	; 0x52e <DirecaoCarro+0xb6>
				OCR1A = CalculaDutyCicleM1(bufferRecepcao->dutyCicleM1, bufferRecepcao->estadoCarro);
 50a:	6a 85       	ldd	r22, Y+10	; 0x0a
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	9b 81       	ldd	r25, Y+3	; 0x03
 510:	0e 94 0f 01 	call	0x21e	; 0x21e <CalculaDutyCicleM1>
 514:	90 93 89 00 	sts	0x0089, r25
 518:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao->dutyCicleM2, bufferRecepcao->estadoCarro);
 51c:	6a 85       	ldd	r22, Y+10	; 0x0a
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	9d 81       	ldd	r25, Y+5	; 0x05
 522:	0e 94 27 01 	call	0x24e	; 0x24e <CalculaDutyCicleM2>
 526:	90 93 8b 00 	sts	0x008B, r25
 52a:	80 93 8a 00 	sts	0x008A, r24
			}			
			break;			
	}		
}		
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <RecebeProtocolo>:
//----------------------------------------------------------------------------

uint8_t RecebeProtocolo(
	BufferRecep* bufferRecepcao
)
{	
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
	uint8_t dadoRecebido = UDR0;	
 53a:	20 91 c6 00 	lds	r18, 0x00C6
	bufferRecepcao->completo = 'n';
 53e:	8e e6       	ldi	r24, 0x6E	; 110
 540:	89 87       	std	Y+9, r24	; 0x09
	/*Inicia transmissão*/
	if(dadoRecebido == 'S') {
 542:	23 35       	cpi	r18, 0x53	; 83
 544:	41 f4       	brne	.+16     	; 0x556 <RecebeProtocolo+0x22>
		bufferRecepcao->iniciado = 'y';		
 546:	89 e7       	ldi	r24, 0x79	; 121
 548:	88 87       	std	Y+8, r24	; 0x08
		bufferRecepcao->qntdDadosLido++;
 54a:	8e 81       	ldd	r24, Y+6	; 0x06
 54c:	9f 81       	ldd	r25, Y+7	; 0x07
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	9f 83       	std	Y+7, r25	; 0x07
 552:	8e 83       	std	Y+6, r24	; 0x06
 554:	4c c0       	rjmp	.+152    	; 0x5ee <RecebeProtocolo+0xba>
	}		
	else if(bufferRecepcao->iniciado == 'y') {
 556:	88 85       	ldd	r24, Y+8	; 0x08
 558:	89 37       	cpi	r24, 0x79	; 121
 55a:	09 f0       	breq	.+2      	; 0x55e <RecebeProtocolo+0x2a>
 55c:	48 c0       	rjmp	.+144    	; 0x5ee <RecebeProtocolo+0xba>
						
		if(bufferRecepcao->qntdDadosLido == 1) {
 55e:	8e 81       	ldd	r24, Y+6	; 0x06
 560:	9f 81       	ldd	r25, Y+7	; 0x07
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	39 f4       	brne	.+14     	; 0x574 <RecebeProtocolo+0x40>
			bufferRecepcao->direcao = dadoRecebido;
 566:	29 83       	std	Y+1, r18	; 0x01
			bufferRecepcao->qntdDadosLido++;
 568:	8e 81       	ldd	r24, Y+6	; 0x06
 56a:	9f 81       	ldd	r25, Y+7	; 0x07
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	9f 83       	std	Y+7, r25	; 0x07
 570:	8e 83       	std	Y+6, r24	; 0x06
 572:	3d c0       	rjmp	.+122    	; 0x5ee <RecebeProtocolo+0xba>
		}
		else if(bufferRecepcao->qntdDadosLido == 2) {		
 574:	8e 81       	ldd	r24, Y+6	; 0x06
 576:	9f 81       	ldd	r25, Y+7	; 0x07
 578:	02 97       	sbiw	r24, 0x02	; 2
 57a:	51 f4       	brne	.+20     	; 0x590 <RecebeProtocolo+0x5c>
			bufferRecepcao->dutyCicleM1 = dadoRecebido;
 57c:	82 2f       	mov	r24, r18
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	9b 83       	std	Y+3, r25	; 0x03
 582:	8a 83       	std	Y+2, r24	; 0x02
			bufferRecepcao->qntdDadosLido++;
 584:	8e 81       	ldd	r24, Y+6	; 0x06
 586:	9f 81       	ldd	r25, Y+7	; 0x07
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	9f 83       	std	Y+7, r25	; 0x07
 58c:	8e 83       	std	Y+6, r24	; 0x06
 58e:	2f c0       	rjmp	.+94     	; 0x5ee <RecebeProtocolo+0xba>
		}			
		else if(bufferRecepcao->qntdDadosLido == 3) {
 590:	8e 81       	ldd	r24, Y+6	; 0x06
 592:	9f 81       	ldd	r25, Y+7	; 0x07
 594:	03 97       	sbiw	r24, 0x03	; 3
 596:	51 f4       	brne	.+20     	; 0x5ac <RecebeProtocolo+0x78>
			bufferRecepcao->dutyCicleM2 = dadoRecebido;
 598:	82 2f       	mov	r24, r18
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	9d 83       	std	Y+5, r25	; 0x05
 59e:	8c 83       	std	Y+4, r24	; 0x04
			bufferRecepcao->qntdDadosLido++;	
 5a0:	8e 81       	ldd	r24, Y+6	; 0x06
 5a2:	9f 81       	ldd	r25, Y+7	; 0x07
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	9f 83       	std	Y+7, r25	; 0x07
 5a8:	8e 83       	std	Y+6, r24	; 0x06
 5aa:	21 c0       	rjmp	.+66     	; 0x5ee <RecebeProtocolo+0xba>
		}	
		else if(bufferRecepcao->qntdDadosLido == 4) {
 5ac:	8e 81       	ldd	r24, Y+6	; 0x06
 5ae:	9f 81       	ldd	r25, Y+7	; 0x07
 5b0:	04 97       	sbiw	r24, 0x04	; 4
 5b2:	39 f4       	brne	.+14     	; 0x5c2 <RecebeProtocolo+0x8e>
			bufferRecepcao->anguloServoLeft = dadoRecebido;
 5b4:	2b 87       	std	Y+11, r18	; 0x0b
			bufferRecepcao->qntdDadosLido++;
 5b6:	8e 81       	ldd	r24, Y+6	; 0x06
 5b8:	9f 81       	ldd	r25, Y+7	; 0x07
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	9f 83       	std	Y+7, r25	; 0x07
 5be:	8e 83       	std	Y+6, r24	; 0x06
 5c0:	16 c0       	rjmp	.+44     	; 0x5ee <RecebeProtocolo+0xba>
		}		
		else if(bufferRecepcao->qntdDadosLido == 5) {
 5c2:	8e 81       	ldd	r24, Y+6	; 0x06
 5c4:	9f 81       	ldd	r25, Y+7	; 0x07
 5c6:	05 97       	sbiw	r24, 0x05	; 5
 5c8:	39 f4       	brne	.+14     	; 0x5d8 <RecebeProtocolo+0xa4>
			bufferRecepcao->anguloServoRight = dadoRecebido;
 5ca:	2c 87       	std	Y+12, r18	; 0x0c
			bufferRecepcao->qntdDadosLido++;
 5cc:	8e 81       	ldd	r24, Y+6	; 0x06
 5ce:	9f 81       	ldd	r25, Y+7	; 0x07
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	9f 83       	std	Y+7, r25	; 0x07
 5d4:	8e 83       	std	Y+6, r24	; 0x06
 5d6:	0b c0       	rjmp	.+22     	; 0x5ee <RecebeProtocolo+0xba>
		}
		else {
			if(dadoRecebido == '1')
 5d8:	21 33       	cpi	r18, 0x31	; 49
 5da:	19 f4       	brne	.+6      	; 0x5e2 <RecebeProtocolo+0xae>
				SetaFonteAlimentacao(&bufferRecepcao->fonteAlimentacao);		
 5dc:	ce 01       	movw	r24, r28
 5de:	0e 94 4f 01 	call	0x29e	; 0x29e <SetaFonteAlimentacao>
			
			bufferRecepcao->iniciado = 'n';
 5e2:	8e e6       	ldi	r24, 0x6E	; 110
 5e4:	88 87       	std	Y+8, r24	; 0x08
			bufferRecepcao->completo = 'y';
 5e6:	89 e7       	ldi	r24, 0x79	; 121
 5e8:	89 87       	std	Y+9, r24	; 0x09
			bufferRecepcao->qntdDadosLido = 0;
 5ea:	1f 82       	std	Y+7, r1	; 0x07
 5ec:	1e 82       	std	Y+6, r1	; 0x06
		}
	}		
			
	return bufferRecepcao->completo;
 5ee:	89 85       	ldd	r24, Y+9	; 0x09
}	
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <TensaoBateria>:
}

//----------------------------------------------------------------------------

uint8_t TensaoBateria()
{
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <TensaoBateria+0x6>
 5fc:	1f 92       	push	r1
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t lido16;
	volatile uint8_t tensao;
	
	lido16 = ADC_Read(AD_BATERIA);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
 608:	9a 83       	std	Y+2, r25	; 0x02
 60a:	89 83       	std	Y+1, r24	; 0x01
	tensao = (uint8_t)((lido16 * 30)/640);
 60c:	29 81       	ldd	r18, Y+1	; 0x01
 60e:	3a 81       	ldd	r19, Y+2	; 0x02
 610:	4e e1       	ldi	r20, 0x1E	; 30
 612:	42 9f       	mul	r20, r18
 614:	c0 01       	movw	r24, r0
 616:	43 9f       	mul	r20, r19
 618:	90 0d       	add	r25, r0
 61a:	11 24       	eor	r1, r1
 61c:	60 e8       	ldi	r22, 0x80	; 128
 61e:	72 e0       	ldi	r23, 0x02	; 2
 620:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__udivmodhi4>
 624:	6b 83       	std	Y+3, r22	; 0x03
		
	return tensao;
 626:	8b 81       	ldd	r24, Y+3	; 0x03
}
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <TensaoPainel>:

//----------------------------------------------------------------------------

uint8_t TensaoPainel()
{		
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 d0       	rcall	.+0      	; 0x63a <TensaoPainel+0x6>
 63a:	1f 92       	push	r1
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t lido16;
	volatile uint8_t tensao;
	
	lido16 = ADC_Read(AD_PAINEL);
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
 646:	9a 83       	std	Y+2, r25	; 0x02
 648:	89 83       	std	Y+1, r24	; 0x01
	tensao = (uint8_t)((lido16 * 30)/640);
 64a:	29 81       	ldd	r18, Y+1	; 0x01
 64c:	3a 81       	ldd	r19, Y+2	; 0x02
 64e:	4e e1       	ldi	r20, 0x1E	; 30
 650:	42 9f       	mul	r20, r18
 652:	c0 01       	movw	r24, r0
 654:	43 9f       	mul	r20, r19
 656:	90 0d       	add	r25, r0
 658:	11 24       	eor	r1, r1
 65a:	60 e8       	ldi	r22, 0x80	; 128
 65c:	72 e0       	ldi	r23, 0x02	; 2
 65e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__udivmodhi4>
 662:	6b 83       	std	Y+3, r22	; 0x03
	
	/*Se a tensão do painel for menor que 13 volts o painel não conseguirá 
	fornecer a corrente necessária para os motores. Então foi colocado um
	relé para selecionar entre a tensão da bateria ou a tensão do painel*/
	if(tensao >= 13) 
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	8d 30       	cpi	r24, 0x0D	; 13
 668:	10 f0       	brcs	.+4      	; 0x66e <TensaoPainel+0x3a>
		ATIVA_RELE(RELE_TENSAO_PAINEL);
 66a:	5c 9a       	sbi	0x0b, 4	; 11
 66c:	01 c0       	rjmp	.+2      	; 0x670 <TensaoPainel+0x3c>
	else 
		DESATIVA_RELE(RELE_TENSAO_PAINEL);
 66e:	5c 98       	cbi	0x0b, 4	; 11
		
	
	return tensao;
 670:	8b 81       	ldd	r24, Y+3	; 0x03
	//return lidoAd;
}
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <TransmitiBuffer>:
//----------------------------------------------------------------------------

void TransmitiBuffer(
	volatile uint8_t* fonteAlimentacao
)
{	
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	00 d0       	rcall	.+0      	; 0x688 <TransmitiBuffer+0xa>
 688:	1f 92       	push	r1
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	8c 01       	movw	r16, r24
	volatile uint8_t indicaInicioTransmissao = 'z';
 690:	8a e7       	ldi	r24, 0x7A	; 122
 692:	89 83       	std	Y+1, r24	; 0x01
	//lidoADBat = ADC_Read(AD_BATERIA);
	//lidoADPain = ADC_Read(AD_PAINEL);
	//tensaoBat = (uint8_t)((lidoADBat * 30)/640);
	//tensaoPainel = (uint8_t)((lidoADPain * 30)/640);
						
	tensaoBat = TensaoBateria();
 694:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <TensaoBateria>
 698:	8a 83       	std	Y+2, r24	; 0x02
	tensaoPainel = TensaoPainel();
 69a:	0e 94 1a 03 	call	0x634	; 0x634 <TensaoPainel>
 69e:	8b 83       	std	Y+3, r24	; 0x03
						
	/*Indica o recebimento do protocolo e o inicio do envio do novo protocolo*/			
	Usart_Transmit(indicaInicioTransmissao);
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Usart_Transmit>
	
	/*Indica qual fonte está selecionada 'B' bateria ou 'P' painel*/
	Usart_Transmit(*fonteAlimentacao);
 6a6:	f8 01       	movw	r30, r16
 6a8:	80 81       	ld	r24, Z
 6aa:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Usart_Transmit>
	
	/*Tensão na bateria*/	
	Usart_Transmit('2');//trace
 6ae:	82 e3       	ldi	r24, 0x32	; 50
 6b0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Usart_Transmit>
	//Usart_Transmit(tensaoBat);
	
	/*Tensão no Painel*/
	Usart_Transmit('!');//trace
 6b4:	81 e2       	ldi	r24, 0x21	; 33
 6b6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Usart_Transmit>
	//Usart_Transmit(tensaoPainel);
}
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 6ca:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 6ce:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
 6d2:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b10011000;
 6d6:	88 e9       	ldi	r24, 0x98	; 152
 6d8:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 6dc:	86 e0       	ldi	r24, 0x06	; 6
 6de:	80 93 c2 00 	sts	0x00C2, r24
 6e2:	08 95       	ret

000006e4 <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 6e4:	e0 ec       	ldi	r30, 0xC0	; 192
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	90 81       	ld	r25, Z
 6ea:	95 ff       	sbrs	r25, 5
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 6ee:	80 93 c6 00 	sts	0x00C6, r24
 6f2:	08 95       	ret

000006f4 <__subsf3>:
 6f4:	50 58       	subi	r21, 0x80	; 128

000006f6 <__addsf3>:
 6f6:	bb 27       	eor	r27, r27
 6f8:	aa 27       	eor	r26, r26
 6fa:	0e d0       	rcall	.+28     	; 0x718 <__addsf3x>
 6fc:	e0 c0       	rjmp	.+448    	; 0x8be <__fp_round>
 6fe:	d1 d0       	rcall	.+418    	; 0x8a2 <__fp_pscA>
 700:	30 f0       	brcs	.+12     	; 0x70e <__addsf3+0x18>
 702:	d6 d0       	rcall	.+428    	; 0x8b0 <__fp_pscB>
 704:	20 f0       	brcs	.+8      	; 0x70e <__addsf3+0x18>
 706:	31 f4       	brne	.+12     	; 0x714 <__addsf3+0x1e>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	11 f4       	brne	.+4      	; 0x710 <__addsf3+0x1a>
 70c:	1e f4       	brtc	.+6      	; 0x714 <__addsf3+0x1e>
 70e:	c6 c0       	rjmp	.+396    	; 0x89c <__fp_nan>
 710:	0e f4       	brtc	.+2      	; 0x714 <__addsf3+0x1e>
 712:	e0 95       	com	r30
 714:	e7 fb       	bst	r30, 7
 716:	bc c0       	rjmp	.+376    	; 0x890 <__fp_inf>

00000718 <__addsf3x>:
 718:	e9 2f       	mov	r30, r25
 71a:	e2 d0       	rcall	.+452    	; 0x8e0 <__fp_split3>
 71c:	80 f3       	brcs	.-32     	; 0x6fe <__addsf3+0x8>
 71e:	ba 17       	cp	r27, r26
 720:	62 07       	cpc	r22, r18
 722:	73 07       	cpc	r23, r19
 724:	84 07       	cpc	r24, r20
 726:	95 07       	cpc	r25, r21
 728:	18 f0       	brcs	.+6      	; 0x730 <__addsf3x+0x18>
 72a:	71 f4       	brne	.+28     	; 0x748 <__addsf3x+0x30>
 72c:	9e f5       	brtc	.+102    	; 0x794 <__addsf3x+0x7c>
 72e:	fa c0       	rjmp	.+500    	; 0x924 <__fp_zero>
 730:	0e f4       	brtc	.+2      	; 0x734 <__addsf3x+0x1c>
 732:	e0 95       	com	r30
 734:	0b 2e       	mov	r0, r27
 736:	ba 2f       	mov	r27, r26
 738:	a0 2d       	mov	r26, r0
 73a:	0b 01       	movw	r0, r22
 73c:	b9 01       	movw	r22, r18
 73e:	90 01       	movw	r18, r0
 740:	0c 01       	movw	r0, r24
 742:	ca 01       	movw	r24, r20
 744:	a0 01       	movw	r20, r0
 746:	11 24       	eor	r1, r1
 748:	ff 27       	eor	r31, r31
 74a:	59 1b       	sub	r21, r25
 74c:	99 f0       	breq	.+38     	; 0x774 <__addsf3x+0x5c>
 74e:	59 3f       	cpi	r21, 0xF9	; 249
 750:	50 f4       	brcc	.+20     	; 0x766 <__addsf3x+0x4e>
 752:	50 3e       	cpi	r21, 0xE0	; 224
 754:	68 f1       	brcs	.+90     	; 0x7b0 <__addsf3x+0x98>
 756:	1a 16       	cp	r1, r26
 758:	f0 40       	sbci	r31, 0x00	; 0
 75a:	a2 2f       	mov	r26, r18
 75c:	23 2f       	mov	r18, r19
 75e:	34 2f       	mov	r19, r20
 760:	44 27       	eor	r20, r20
 762:	58 5f       	subi	r21, 0xF8	; 248
 764:	f3 cf       	rjmp	.-26     	; 0x74c <__addsf3x+0x34>
 766:	46 95       	lsr	r20
 768:	37 95       	ror	r19
 76a:	27 95       	ror	r18
 76c:	a7 95       	ror	r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	53 95       	inc	r21
 772:	c9 f7       	brne	.-14     	; 0x766 <__addsf3x+0x4e>
 774:	7e f4       	brtc	.+30     	; 0x794 <__addsf3x+0x7c>
 776:	1f 16       	cp	r1, r31
 778:	ba 0b       	sbc	r27, r26
 77a:	62 0b       	sbc	r22, r18
 77c:	73 0b       	sbc	r23, r19
 77e:	84 0b       	sbc	r24, r20
 780:	ba f0       	brmi	.+46     	; 0x7b0 <__addsf3x+0x98>
 782:	91 50       	subi	r25, 0x01	; 1
 784:	a1 f0       	breq	.+40     	; 0x7ae <__addsf3x+0x96>
 786:	ff 0f       	add	r31, r31
 788:	bb 1f       	adc	r27, r27
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	c2 f7       	brpl	.-16     	; 0x782 <__addsf3x+0x6a>
 792:	0e c0       	rjmp	.+28     	; 0x7b0 <__addsf3x+0x98>
 794:	ba 0f       	add	r27, r26
 796:	62 1f       	adc	r22, r18
 798:	73 1f       	adc	r23, r19
 79a:	84 1f       	adc	r24, r20
 79c:	48 f4       	brcc	.+18     	; 0x7b0 <__addsf3x+0x98>
 79e:	87 95       	ror	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b7 95       	ror	r27
 7a6:	f7 95       	ror	r31
 7a8:	9e 3f       	cpi	r25, 0xFE	; 254
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <__addsf3x+0x96>
 7ac:	b3 cf       	rjmp	.-154    	; 0x714 <__addsf3+0x1e>
 7ae:	93 95       	inc	r25
 7b0:	88 0f       	add	r24, r24
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__addsf3x+0x9e>
 7b4:	99 27       	eor	r25, r25
 7b6:	ee 0f       	add	r30, r30
 7b8:	97 95       	ror	r25
 7ba:	87 95       	ror	r24
 7bc:	08 95       	ret

000007be <__fixunssfsi>:
 7be:	98 d0       	rcall	.+304    	; 0x8f0 <__fp_splitA>
 7c0:	88 f0       	brcs	.+34     	; 0x7e4 <__fixunssfsi+0x26>
 7c2:	9f 57       	subi	r25, 0x7F	; 127
 7c4:	90 f0       	brcs	.+36     	; 0x7ea <__fixunssfsi+0x2c>
 7c6:	b9 2f       	mov	r27, r25
 7c8:	99 27       	eor	r25, r25
 7ca:	b7 51       	subi	r27, 0x17	; 23
 7cc:	a0 f0       	brcs	.+40     	; 0x7f6 <__fixunssfsi+0x38>
 7ce:	d1 f0       	breq	.+52     	; 0x804 <__fixunssfsi+0x46>
 7d0:	66 0f       	add	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	1a f0       	brmi	.+6      	; 0x7e0 <__fixunssfsi+0x22>
 7da:	ba 95       	dec	r27
 7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__fixunssfsi+0x12>
 7de:	12 c0       	rjmp	.+36     	; 0x804 <__fixunssfsi+0x46>
 7e0:	b1 30       	cpi	r27, 0x01	; 1
 7e2:	81 f0       	breq	.+32     	; 0x804 <__fixunssfsi+0x46>
 7e4:	9f d0       	rcall	.+318    	; 0x924 <__fp_zero>
 7e6:	b1 e0       	ldi	r27, 0x01	; 1
 7e8:	08 95       	ret
 7ea:	9c c0       	rjmp	.+312    	; 0x924 <__fp_zero>
 7ec:	67 2f       	mov	r22, r23
 7ee:	78 2f       	mov	r23, r24
 7f0:	88 27       	eor	r24, r24
 7f2:	b8 5f       	subi	r27, 0xF8	; 248
 7f4:	39 f0       	breq	.+14     	; 0x804 <__fixunssfsi+0x46>
 7f6:	b9 3f       	cpi	r27, 0xF9	; 249
 7f8:	cc f3       	brlt	.-14     	; 0x7ec <__fixunssfsi+0x2e>
 7fa:	86 95       	lsr	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b3 95       	inc	r27
 802:	d9 f7       	brne	.-10     	; 0x7fa <__fixunssfsi+0x3c>
 804:	3e f4       	brtc	.+14     	; 0x814 <__fixunssfsi+0x56>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	08 95       	ret

00000816 <__floatunsisf>:
 816:	e8 94       	clt
 818:	09 c0       	rjmp	.+18     	; 0x82c <__floatsisf+0x12>

0000081a <__floatsisf>:
 81a:	97 fb       	bst	r25, 7
 81c:	3e f4       	brtc	.+14     	; 0x82c <__floatsisf+0x12>
 81e:	90 95       	com	r25
 820:	80 95       	com	r24
 822:	70 95       	com	r23
 824:	61 95       	neg	r22
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	99 23       	and	r25, r25
 82e:	a9 f0       	breq	.+42     	; 0x85a <__floatsisf+0x40>
 830:	f9 2f       	mov	r31, r25
 832:	96 e9       	ldi	r25, 0x96	; 150
 834:	bb 27       	eor	r27, r27
 836:	93 95       	inc	r25
 838:	f6 95       	lsr	r31
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f1 11       	cpse	r31, r1
 844:	f8 cf       	rjmp	.-16     	; 0x836 <__floatsisf+0x1c>
 846:	fa f4       	brpl	.+62     	; 0x886 <__floatsisf+0x6c>
 848:	bb 0f       	add	r27, r27
 84a:	11 f4       	brne	.+4      	; 0x850 <__floatsisf+0x36>
 84c:	60 ff       	sbrs	r22, 0
 84e:	1b c0       	rjmp	.+54     	; 0x886 <__floatsisf+0x6c>
 850:	6f 5f       	subi	r22, 0xFF	; 255
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	8f 4f       	sbci	r24, 0xFF	; 255
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	16 c0       	rjmp	.+44     	; 0x886 <__floatsisf+0x6c>
 85a:	88 23       	and	r24, r24
 85c:	11 f0       	breq	.+4      	; 0x862 <__floatsisf+0x48>
 85e:	96 e9       	ldi	r25, 0x96	; 150
 860:	11 c0       	rjmp	.+34     	; 0x884 <__floatsisf+0x6a>
 862:	77 23       	and	r23, r23
 864:	21 f0       	breq	.+8      	; 0x86e <__floatsisf+0x54>
 866:	9e e8       	ldi	r25, 0x8E	; 142
 868:	87 2f       	mov	r24, r23
 86a:	76 2f       	mov	r23, r22
 86c:	05 c0       	rjmp	.+10     	; 0x878 <__floatsisf+0x5e>
 86e:	66 23       	and	r22, r22
 870:	71 f0       	breq	.+28     	; 0x88e <__floatsisf+0x74>
 872:	96 e8       	ldi	r25, 0x86	; 134
 874:	86 2f       	mov	r24, r22
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	2a f0       	brmi	.+10     	; 0x886 <__floatsisf+0x6c>
 87c:	9a 95       	dec	r25
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	da f7       	brpl	.-10     	; 0x87c <__floatsisf+0x62>
 886:	88 0f       	add	r24, r24
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__fp_inf>:
 890:	97 f9       	bld	r25, 7
 892:	9f 67       	ori	r25, 0x7F	; 127
 894:	80 e8       	ldi	r24, 0x80	; 128
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	08 95       	ret

0000089c <__fp_nan>:
 89c:	9f ef       	ldi	r25, 0xFF	; 255
 89e:	80 ec       	ldi	r24, 0xC0	; 192
 8a0:	08 95       	ret

000008a2 <__fp_pscA>:
 8a2:	00 24       	eor	r0, r0
 8a4:	0a 94       	dec	r0
 8a6:	16 16       	cp	r1, r22
 8a8:	17 06       	cpc	r1, r23
 8aa:	18 06       	cpc	r1, r24
 8ac:	09 06       	cpc	r0, r25
 8ae:	08 95       	ret

000008b0 <__fp_pscB>:
 8b0:	00 24       	eor	r0, r0
 8b2:	0a 94       	dec	r0
 8b4:	12 16       	cp	r1, r18
 8b6:	13 06       	cpc	r1, r19
 8b8:	14 06       	cpc	r1, r20
 8ba:	05 06       	cpc	r0, r21
 8bc:	08 95       	ret

000008be <__fp_round>:
 8be:	09 2e       	mov	r0, r25
 8c0:	03 94       	inc	r0
 8c2:	00 0c       	add	r0, r0
 8c4:	11 f4       	brne	.+4      	; 0x8ca <__fp_round+0xc>
 8c6:	88 23       	and	r24, r24
 8c8:	52 f0       	brmi	.+20     	; 0x8de <__fp_round+0x20>
 8ca:	bb 0f       	add	r27, r27
 8cc:	40 f4       	brcc	.+16     	; 0x8de <__fp_round+0x20>
 8ce:	bf 2b       	or	r27, r31
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <__fp_round+0x18>
 8d2:	60 ff       	sbrs	r22, 0
 8d4:	04 c0       	rjmp	.+8      	; 0x8de <__fp_round+0x20>
 8d6:	6f 5f       	subi	r22, 0xFF	; 255
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__fp_split3>:
 8e0:	57 fd       	sbrc	r21, 7
 8e2:	90 58       	subi	r25, 0x80	; 128
 8e4:	44 0f       	add	r20, r20
 8e6:	55 1f       	adc	r21, r21
 8e8:	59 f0       	breq	.+22     	; 0x900 <__stack+0x1>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	71 f0       	breq	.+28     	; 0x90a <__stack+0xb>
 8ee:	47 95       	ror	r20

000008f0 <__fp_splitA>:
 8f0:	88 0f       	add	r24, r24
 8f2:	97 fb       	bst	r25, 7
 8f4:	99 1f       	adc	r25, r25
 8f6:	61 f0       	breq	.+24     	; 0x910 <__stack+0x11>
 8f8:	9f 3f       	cpi	r25, 0xFF	; 255
 8fa:	79 f0       	breq	.+30     	; 0x91a <__stack+0x1b>
 8fc:	87 95       	ror	r24
 8fe:	08 95       	ret
 900:	12 16       	cp	r1, r18
 902:	13 06       	cpc	r1, r19
 904:	14 06       	cpc	r1, r20
 906:	55 1f       	adc	r21, r21
 908:	f2 cf       	rjmp	.-28     	; 0x8ee <__fp_split3+0xe>
 90a:	46 95       	lsr	r20
 90c:	f1 df       	rcall	.-30     	; 0x8f0 <__fp_splitA>
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0x21>
 910:	16 16       	cp	r1, r22
 912:	17 06       	cpc	r1, r23
 914:	18 06       	cpc	r1, r24
 916:	99 1f       	adc	r25, r25
 918:	f1 cf       	rjmp	.-30     	; 0x8fc <__fp_splitA+0xc>
 91a:	86 95       	lsr	r24
 91c:	71 05       	cpc	r23, r1
 91e:	61 05       	cpc	r22, r1
 920:	08 94       	sec
 922:	08 95       	ret

00000924 <__fp_zero>:
 924:	e8 94       	clt

00000926 <__fp_szero>:
 926:	bb 27       	eor	r27, r27
 928:	66 27       	eor	r22, r22
 92a:	77 27       	eor	r23, r23
 92c:	cb 01       	movw	r24, r22
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <__mulsf3>:
 932:	0b d0       	rcall	.+22     	; 0x94a <__mulsf3x>
 934:	c4 cf       	rjmp	.-120    	; 0x8be <__fp_round>
 936:	b5 df       	rcall	.-150    	; 0x8a2 <__fp_pscA>
 938:	28 f0       	brcs	.+10     	; 0x944 <__mulsf3+0x12>
 93a:	ba df       	rcall	.-140    	; 0x8b0 <__fp_pscB>
 93c:	18 f0       	brcs	.+6      	; 0x944 <__mulsf3+0x12>
 93e:	95 23       	and	r25, r21
 940:	09 f0       	breq	.+2      	; 0x944 <__mulsf3+0x12>
 942:	a6 cf       	rjmp	.-180    	; 0x890 <__fp_inf>
 944:	ab cf       	rjmp	.-170    	; 0x89c <__fp_nan>
 946:	11 24       	eor	r1, r1
 948:	ee cf       	rjmp	.-36     	; 0x926 <__fp_szero>

0000094a <__mulsf3x>:
 94a:	ca df       	rcall	.-108    	; 0x8e0 <__fp_split3>
 94c:	a0 f3       	brcs	.-24     	; 0x936 <__mulsf3+0x4>

0000094e <__mulsf3_pse>:
 94e:	95 9f       	mul	r25, r21
 950:	d1 f3       	breq	.-12     	; 0x946 <__mulsf3+0x14>
 952:	95 0f       	add	r25, r21
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	55 1f       	adc	r21, r21
 958:	62 9f       	mul	r22, r18
 95a:	f0 01       	movw	r30, r0
 95c:	72 9f       	mul	r23, r18
 95e:	bb 27       	eor	r27, r27
 960:	f0 0d       	add	r31, r0
 962:	b1 1d       	adc	r27, r1
 964:	63 9f       	mul	r22, r19
 966:	aa 27       	eor	r26, r26
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	aa 1f       	adc	r26, r26
 96e:	64 9f       	mul	r22, r20
 970:	66 27       	eor	r22, r22
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	66 1f       	adc	r22, r22
 978:	82 9f       	mul	r24, r18
 97a:	22 27       	eor	r18, r18
 97c:	b0 0d       	add	r27, r0
 97e:	a1 1d       	adc	r26, r1
 980:	62 1f       	adc	r22, r18
 982:	73 9f       	mul	r23, r19
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	83 9f       	mul	r24, r19
 98c:	a0 0d       	add	r26, r0
 98e:	61 1d       	adc	r22, r1
 990:	22 1f       	adc	r18, r18
 992:	74 9f       	mul	r23, r20
 994:	33 27       	eor	r19, r19
 996:	a0 0d       	add	r26, r0
 998:	61 1d       	adc	r22, r1
 99a:	23 1f       	adc	r18, r19
 99c:	84 9f       	mul	r24, r20
 99e:	60 0d       	add	r22, r0
 9a0:	21 1d       	adc	r18, r1
 9a2:	82 2f       	mov	r24, r18
 9a4:	76 2f       	mov	r23, r22
 9a6:	6a 2f       	mov	r22, r26
 9a8:	11 24       	eor	r1, r1
 9aa:	9f 57       	subi	r25, 0x7F	; 127
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	8a f0       	brmi	.+34     	; 0x9d2 <__mulsf3_pse+0x84>
 9b0:	e1 f0       	breq	.+56     	; 0x9ea <__mulsf3_pse+0x9c>
 9b2:	88 23       	and	r24, r24
 9b4:	4a f0       	brmi	.+18     	; 0x9c8 <__mulsf3_pse+0x7a>
 9b6:	ee 0f       	add	r30, r30
 9b8:	ff 1f       	adc	r31, r31
 9ba:	bb 1f       	adc	r27, r27
 9bc:	66 1f       	adc	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	91 50       	subi	r25, 0x01	; 1
 9c4:	50 40       	sbci	r21, 0x00	; 0
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__mulsf3_pse+0x64>
 9c8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ca:	51 05       	cpc	r21, r1
 9cc:	70 f0       	brcs	.+28     	; 0x9ea <__mulsf3_pse+0x9c>
 9ce:	60 cf       	rjmp	.-320    	; 0x890 <__fp_inf>
 9d0:	aa cf       	rjmp	.-172    	; 0x926 <__fp_szero>
 9d2:	5f 3f       	cpi	r21, 0xFF	; 255
 9d4:	ec f3       	brlt	.-6      	; 0x9d0 <__mulsf3_pse+0x82>
 9d6:	98 3e       	cpi	r25, 0xE8	; 232
 9d8:	dc f3       	brlt	.-10     	; 0x9d0 <__mulsf3_pse+0x82>
 9da:	86 95       	lsr	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f7 95       	ror	r31
 9e4:	e7 95       	ror	r30
 9e6:	9f 5f       	subi	r25, 0xFF	; 255
 9e8:	c1 f7       	brne	.-16     	; 0x9da <__mulsf3_pse+0x8c>
 9ea:	fe 2b       	or	r31, r30
 9ec:	88 0f       	add	r24, r24
 9ee:	91 1d       	adc	r25, r1
 9f0:	96 95       	lsr	r25
 9f2:	87 95       	ror	r24
 9f4:	97 f9       	bld	r25, 7
 9f6:	08 95       	ret

000009f8 <__udivmodhi4>:
 9f8:	aa 1b       	sub	r26, r26
 9fa:	bb 1b       	sub	r27, r27
 9fc:	51 e1       	ldi	r21, 0x11	; 17
 9fe:	07 c0       	rjmp	.+14     	; 0xa0e <__udivmodhi4_ep>

00000a00 <__udivmodhi4_loop>:
 a00:	aa 1f       	adc	r26, r26
 a02:	bb 1f       	adc	r27, r27
 a04:	a6 17       	cp	r26, r22
 a06:	b7 07       	cpc	r27, r23
 a08:	10 f0       	brcs	.+4      	; 0xa0e <__udivmodhi4_ep>
 a0a:	a6 1b       	sub	r26, r22
 a0c:	b7 0b       	sbc	r27, r23

00000a0e <__udivmodhi4_ep>:
 a0e:	88 1f       	adc	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	5a 95       	dec	r21
 a14:	a9 f7       	brne	.-22     	; 0xa00 <__udivmodhi4_loop>
 a16:	80 95       	com	r24
 a18:	90 95       	com	r25
 a1a:	bc 01       	movw	r22, r24
 a1c:	cd 01       	movw	r24, r26
 a1e:	08 95       	ret

00000a20 <_exit>:
 a20:	f8 94       	cli

00000a22 <__stop_program>:
 a22:	ff cf       	rjmp	.-2      	; 0xa22 <__stop_program>
