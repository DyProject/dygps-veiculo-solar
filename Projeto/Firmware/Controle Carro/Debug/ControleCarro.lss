
ControleCarro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  000004d6  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001a3  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068b  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000322  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000887  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033b  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000290  00000000  00000000  00002507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000c1  00000000  00000000  00002797  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
#include <util/delay.h>

//----------------------------------------------------------------------------

ISR(USART_RX_vect)							
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	RecebeProtocolo();
  b2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <RecebeProtocolo>
}	
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	7f 91       	pop	r23
  c4:	6f 91       	pop	r22
  c6:	5f 91       	pop	r21
  c8:	4f 91       	pop	r20
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:

//----------------------------------------------------------------------------

int main()
{
	Usart_Init(MYUBRR);
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Usart_Init>
	ConfiguracoesDirecaoInit();
  e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ConfiguracoesDirecaoInit>
	sei();
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0xe>

000000e8 <CalculaDutyCicleM1>:
uint16_t CalculaDutyCicleM1(
	uint8_t porCentagem
)
{
	uint16_t valor = 0;
	if(porCentagem == 100)
  e8:	84 36       	cpi	r24, 0x64	; 100
  ea:	49 f0       	breq	.+18     	; 0xfe <CalculaDutyCicleM1+0x16>
		valor = 35000;
	else if (porCentagem == 75)
  ec:	8b 34       	cpi	r24, 0x4B	; 75
  ee:	51 f0       	breq	.+20     	; 0x104 <CalculaDutyCicleM1+0x1c>
		valor = 26250;
	else if (porCentagem == 50)
  f0:	82 33       	cpi	r24, 0x32	; 50
  f2:	59 f0       	breq	.+22     	; 0x10a <CalculaDutyCicleM1+0x22>
		valor = 17500;
	else if (porCentagem == 25)
  f4:	89 31       	cpi	r24, 0x19	; 25
  f6:	61 f0       	breq	.+24     	; 0x110 <CalculaDutyCicleM1+0x28>
/*Irá receber sempre os duty cicle definidos 25, 50, 75 e 100*/
uint16_t CalculaDutyCicleM1(
	uint8_t porCentagem
)
{
	uint16_t valor = 0;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	0b c0       	rjmp	.+22     	; 0x114 <CalculaDutyCicleM1+0x2c>
	if(porCentagem == 100)
		valor = 35000;
  fe:	28 eb       	ldi	r18, 0xB8	; 184
 100:	38 e8       	ldi	r19, 0x88	; 136
 102:	08 c0       	rjmp	.+16     	; 0x114 <CalculaDutyCicleM1+0x2c>
	else if (porCentagem == 75)
		valor = 26250;
 104:	2a e8       	ldi	r18, 0x8A	; 138
 106:	36 e6       	ldi	r19, 0x66	; 102
 108:	05 c0       	rjmp	.+10     	; 0x114 <CalculaDutyCicleM1+0x2c>
	else if (porCentagem == 50)
		valor = 17500;
 10a:	2c e5       	ldi	r18, 0x5C	; 92
 10c:	34 e4       	ldi	r19, 0x44	; 68
 10e:	02 c0       	rjmp	.+4      	; 0x114 <CalculaDutyCicleM1+0x2c>
	else if (porCentagem == 25)
		valor = 8750;
 110:	2e e2       	ldi	r18, 0x2E	; 46
 112:	32 e2       	ldi	r19, 0x22	; 34
		
	if(estadoCarro_g == ANDANDO_TRAS)
 114:	80 91 00 01 	lds	r24, 0x0100
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	31 f4       	brne	.+12     	; 0x128 <CalculaDutyCicleM1+0x40>
		valor = 35000 - valor;
 11c:	88 eb       	ldi	r24, 0xB8	; 184
 11e:	98 e8       	ldi	r25, 0x88	; 136
 120:	ac 01       	movw	r20, r24
 122:	42 1b       	sub	r20, r18
 124:	53 0b       	sbc	r21, r19
 126:	9a 01       	movw	r18, r20
		
	return valor;
}
 128:	82 2f       	mov	r24, r18
 12a:	93 2f       	mov	r25, r19
 12c:	08 95       	ret

0000012e <CalculaDutyCicleM2>:
uint16_t CalculaDutyCicleM2(
	uint8_t porCentagem
)
{
	uint16_t valor = 0;
	if (porCentagem == 100)
 12e:	84 36       	cpi	r24, 0x64	; 100
 130:	49 f0       	breq	.+18     	; 0x144 <CalculaDutyCicleM2+0x16>
		valor = 35000;
	else if (porCentagem == 75)
 132:	8b 34       	cpi	r24, 0x4B	; 75
 134:	51 f0       	breq	.+20     	; 0x14a <CalculaDutyCicleM2+0x1c>
		valor = 26250;
	else if (porCentagem == 50)
 136:	82 33       	cpi	r24, 0x32	; 50
 138:	59 f0       	breq	.+22     	; 0x150 <CalculaDutyCicleM2+0x22>
		valor = 17500;
	else if (porCentagem == 25)
 13a:	89 31       	cpi	r24, 0x19	; 25
 13c:	61 f0       	breq	.+24     	; 0x156 <CalculaDutyCicleM2+0x28>
/*Irá receber sempre os duty cicle definidos 25, 50, 75 e 100*/
uint16_t CalculaDutyCicleM2(
	uint8_t porCentagem
)
{
	uint16_t valor = 0;
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	0b c0       	rjmp	.+22     	; 0x15a <CalculaDutyCicleM2+0x2c>
	if (porCentagem == 100)
		valor = 35000;
 144:	28 eb       	ldi	r18, 0xB8	; 184
 146:	38 e8       	ldi	r19, 0x88	; 136
 148:	08 c0       	rjmp	.+16     	; 0x15a <CalculaDutyCicleM2+0x2c>
	else if (porCentagem == 75)
		valor = 26250;
 14a:	2a e8       	ldi	r18, 0x8A	; 138
 14c:	36 e6       	ldi	r19, 0x66	; 102
 14e:	05 c0       	rjmp	.+10     	; 0x15a <CalculaDutyCicleM2+0x2c>
	else if (porCentagem == 50)
		valor = 17500;
 150:	2c e5       	ldi	r18, 0x5C	; 92
 152:	34 e4       	ldi	r19, 0x44	; 68
 154:	02 c0       	rjmp	.+4      	; 0x15a <CalculaDutyCicleM2+0x2c>
	else if (porCentagem == 25)
		valor = 8750;
 156:	2e e2       	ldi	r18, 0x2E	; 46
 158:	32 e2       	ldi	r19, 0x22	; 34
		
	if(estadoCarro_g == ANDANDO_TRAS)
 15a:	80 91 00 01 	lds	r24, 0x0100
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	31 f4       	brne	.+12     	; 0x16e <CalculaDutyCicleM2+0x40>
		valor = 35000 - valor;
 162:	88 eb       	ldi	r24, 0xB8	; 184
 164:	98 e8       	ldi	r25, 0x88	; 136
 166:	ac 01       	movw	r20, r24
 168:	42 1b       	sub	r20, r18
 16a:	53 0b       	sbc	r21, r19
 16c:	9a 01       	movw	r18, r20
			
	return valor;
}
 16e:	82 2f       	mov	r24, r18
 170:	93 2f       	mov	r25, r19
 172:	08 95       	ret

00000174 <AndandoFrente>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	85 e3       	ldi	r24, 0x35	; 53
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <AndandoFrente+0x2>
 17a:	00 00       	nop
//----------------------------------------------------------------------------

void AndandoFrente()
{
	_delay_us(10);
	set_bit(PORTB,ENA_ENB);	
 17c:	2c 9a       	sbi	0x05, 4	; 5
	clr_bit(PORTB,IN2_IN4);
 17e:	2b 98       	cbi	0x05, 3	; 5
	OCR1A = CalculaDutyCicleM1(bufferRecepcao_g.dutyCicleM1);
 180:	80 91 02 01 	lds	r24, 0x0102
 184:	0e 94 74 00 	call	0xe8	; 0xe8 <CalculaDutyCicleM1>
 188:	90 93 89 00 	sts	0x0089, r25
 18c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = CalculaDutyCicleM2(bufferRecepcao_g.dutyCicleM2);
 190:	80 91 03 01 	lds	r24, 0x0103
 194:	0e 94 97 00 	call	0x12e	; 0x12e <CalculaDutyCicleM2>
 198:	90 93 8b 00 	sts	0x008B, r25
 19c:	80 93 8a 00 	sts	0x008A, r24
	estadoCarro_g = ANDANDO_FRENTE;
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	80 93 00 01 	sts	0x0100, r24
}
 1a6:	08 95       	ret

000001a8 <AndandoTras>:
 1a8:	85 e3       	ldi	r24, 0x35	; 53
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <AndandoTras+0x2>
 1ae:	00 00       	nop
//----------------------------------------------------------------------------

void AndandoTras()
{
	_delay_us(10);
	set_bit(PORTB,ENA_ENB);	
 1b0:	2c 9a       	sbi	0x05, 4	; 5
	set_bit(PORTB,IN2_IN4);
 1b2:	2b 9a       	sbi	0x05, 3	; 5
	OCR1A = CalculaDutyCicleM1(bufferRecepcao_g.dutyCicleM1);
 1b4:	80 91 02 01 	lds	r24, 0x0102
 1b8:	0e 94 74 00 	call	0xe8	; 0xe8 <CalculaDutyCicleM1>
 1bc:	90 93 89 00 	sts	0x0089, r25
 1c0:	80 93 88 00 	sts	0x0088, r24
	OCR1B = CalculaDutyCicleM2(bufferRecepcao_g.dutyCicleM2);
 1c4:	80 91 03 01 	lds	r24, 0x0103
 1c8:	0e 94 97 00 	call	0x12e	; 0x12e <CalculaDutyCicleM2>
 1cc:	90 93 8b 00 	sts	0x008B, r25
 1d0:	80 93 8a 00 	sts	0x008A, r24
	estadoCarro_g = ANDANDO_TRAS;
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	80 93 00 01 	sts	0x0100, r24
}
 1da:	08 95       	ret

000001dc <CarroParado>:
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <CarroParado+0x2>
 1e2:	00 00       	nop
//----------------------------------------------------------------------------

void CarroParado()
{
	_delay_us(10);
	clr_bit(PORTB,ENA_ENB);	
 1e4:	2c 98       	cbi	0x05, 4	; 5
	set_bit(PORTB,IN1);	
 1e6:	29 9a       	sbi	0x05, 1	; 5
	set_bit(PORTB,IN3);	
 1e8:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB,IN2_IN4);	
 1ea:	2b 9a       	sbi	0x05, 3	; 5
	estadoCarro_g = PARADO;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 00 01 	sts	0x0100, r24
}
 1f2:	08 95       	ret

000001f4 <DirecaoCarro>:

//----------------------------------------------------------------------------

void DirecaoCarro()
{		
	switch (estadoCarro_g) {
 1f4:	80 91 00 01 	lds	r24, 0x0100
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	d9 f0       	breq	.+54     	; 0x232 <DirecaoCarro+0x3e>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	b1 f1       	breq	.+108    	; 0x26c <DirecaoCarro+0x78>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	09 f0       	breq	.+2      	; 0x206 <DirecaoCarro+0x12>
 204:	4f c0       	rjmp	.+158    	; 0x2a4 <DirecaoCarro+0xb0>
		case PARADO:
			if ( bufferRecepcao_g.direcao == 'F') {
 206:	80 91 01 01 	lds	r24, 0x0101
 20a:	86 34       	cpi	r24, 0x46	; 70
 20c:	31 f4       	brne	.+12     	; 0x21a <DirecaoCarro+0x26>
				estadoCarro_g = ANDANDO_FRENTE;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 00 01 	sts	0x0100, r24
				AndandoFrente();
 214:	0e 94 ba 00 	call	0x174	; 0x174 <AndandoFrente>
 218:	08 95       	ret
			}				
			else if ( bufferRecepcao_g.direcao == 'T') {
 21a:	84 35       	cpi	r24, 0x54	; 84
 21c:	31 f4       	brne	.+12     	; 0x22a <DirecaoCarro+0x36>
				estadoCarro_g = ANDANDO_TRAS;
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 00 01 	sts	0x0100, r24
				AndandoTras();		
 224:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <AndandoTras>
 228:	08 95       	ret
			}			
			else bufferRecepcao_g.direcao = 'P';
 22a:	80 e5       	ldi	r24, 0x50	; 80
 22c:	80 93 01 01 	sts	0x0101, r24
 230:	08 95       	ret
			break;
		
		case ANDANDO_FRENTE:	
			if(bufferRecepcao_g.direcao == 'P') {
 232:	80 91 01 01 	lds	r24, 0x0101
 236:	80 35       	cpi	r24, 0x50	; 80
 238:	31 f4       	brne	.+12     	; 0x246 <DirecaoCarro+0x52>
				estadoCarro_g = PARADO;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 00 01 	sts	0x0100, r24
				CarroParado();
 240:	0e 94 ee 00 	call	0x1dc	; 0x1dc <CarroParado>
 244:	08 95       	ret
			}				
			else if(bufferRecepcao_g.direcao == 'F'){
 246:	86 34       	cpi	r24, 0x46	; 70
 248:	69 f5       	brne	.+90     	; 0x2a4 <DirecaoCarro+0xb0>
				OCR1A = CalculaDutyCicleM1(bufferRecepcao_g.dutyCicleM1);
 24a:	80 91 02 01 	lds	r24, 0x0102
 24e:	0e 94 74 00 	call	0xe8	; 0xe8 <CalculaDutyCicleM1>
 252:	90 93 89 00 	sts	0x0089, r25
 256:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao_g.dutyCicleM2);
 25a:	80 91 03 01 	lds	r24, 0x0103
 25e:	0e 94 97 00 	call	0x12e	; 0x12e <CalculaDutyCicleM2>
 262:	90 93 8b 00 	sts	0x008B, r25
 266:	80 93 8a 00 	sts	0x008A, r24
 26a:	08 95       	ret
			}			
			break;
			
		case ANDANDO_TRAS:
			if(bufferRecepcao_g.direcao == 'P') {
 26c:	80 91 01 01 	lds	r24, 0x0101
 270:	80 35       	cpi	r24, 0x50	; 80
 272:	31 f4       	brne	.+12     	; 0x280 <DirecaoCarro+0x8c>
				estadoCarro_g = PARADO;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 00 01 	sts	0x0100, r24
				CarroParado();
 27a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <CarroParado>
 27e:	08 95       	ret
			}				
			else if(bufferRecepcao_g.direcao == 'T'){
 280:	84 35       	cpi	r24, 0x54	; 84
 282:	81 f4       	brne	.+32     	; 0x2a4 <DirecaoCarro+0xb0>
				OCR1A = CalculaDutyCicleM1(bufferRecepcao_g.dutyCicleM1);
 284:	80 91 02 01 	lds	r24, 0x0102
 288:	0e 94 74 00 	call	0xe8	; 0xe8 <CalculaDutyCicleM1>
 28c:	90 93 89 00 	sts	0x0089, r25
 290:	80 93 88 00 	sts	0x0088, r24
				OCR1B = CalculaDutyCicleM2(bufferRecepcao_g.dutyCicleM2);
 294:	80 91 03 01 	lds	r24, 0x0103
 298:	0e 94 97 00 	call	0x12e	; 0x12e <CalculaDutyCicleM2>
 29c:	90 93 8b 00 	sts	0x008B, r25
 2a0:	80 93 8a 00 	sts	0x008A, r24
 2a4:	08 95       	ret

000002a6 <ConfiguracoesDirecaoInit>:

//----------------------------------------------------------------------------

void ConfiguracoesDirecaoInit()
{	
	DDRB|= (1 << IN2_IN4) | (1 << ENA_ENB);	
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << IN2_IN4) | (1 << ENA_ENB);		
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	88 61       	ori	r24, 0x18	; 24
 2b0:	85 b9       	out	0x05, r24	; 5
		
	/*pinos OC1B e OC1A como saída*/
	DDRB  |= (1 << IN1) | (1 << IN3);		
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	86 60       	ori	r24, 0x06	; 6
 2b6:	84 b9       	out	0x04, r24	; 4
	PORTB &= (~(1 << IN1)) & (~(1 << IN3)); 
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	89 7f       	andi	r24, 0xF9	; 249
 2bc:	85 b9       	out	0x05, r24	; 5
	
	TCCR1A = 0b10100010;		//PWM não invertido nos pinos OC1A e OC1B
 2be:	82 ea       	ldi	r24, 0xA2	; 162
 2c0:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00011001;		//liga TC1, prescaler = 1
 2c4:	89 e1       	ldi	r24, 0x19	; 25
 2c6:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 35000;				//valor máximo para contagem
 2ca:	88 eb       	ldi	r24, 0xB8	; 184
 2cc:	98 e8       	ldi	r25, 0x88	; 136
 2ce:	90 93 87 00 	sts	0x0087, r25
 2d2:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 0;				//controle do ciclo ativo do PWM 0C1A
 2d6:	10 92 89 00 	sts	0x0089, r1
 2da:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 2de:	10 92 8b 00 	sts	0x008B, r1
 2e2:	10 92 8a 00 	sts	0x008A, r1
	
	/*Configurações de inicialização d do buffer*/
	bufferRecepcao_g.qntdDadosLido = 0;
 2e6:	10 92 04 01 	sts	0x0104, r1
	bufferRecepcao_g.iniciado = 0;
 2ea:	10 92 05 01 	sts	0x0105, r1
	
	CarroParado();
 2ee:	0e 94 ee 00 	call	0x1dc	; 0x1dc <CarroParado>
};
 2f2:	08 95       	ret

000002f4 <RecebeProtocolo>:
}

//----------------------------------------------------------------------------

void RecebeProtocolo()
{	
 2f4:	1f 93       	push	r17
	uint16_t valorLidoAD = UDR0;
 2f6:	10 91 c6 00 	lds	r17, 0x00C6
	if(bufferRecepcao_g.iniciado) {
 2fa:	80 91 05 01 	lds	r24, 0x0105
 2fe:	88 23       	and	r24, r24
 300:	19 f1       	breq	.+70     	; 0x348 <RecebeProtocolo+0x54>
		bufferRecepcao_g.qntdDadosLido++;
 302:	80 91 04 01 	lds	r24, 0x0104
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 04 01 	sts	0x0104, r24
		
		switch(bufferRecepcao_g.qntdDadosLido){
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	39 f0       	breq	.+14     	; 0x31e <RecebeProtocolo+0x2a>
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	41 f0       	breq	.+16     	; 0x324 <RecebeProtocolo+0x30>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	c1 f4       	brne	.+48     	; 0x348 <RecebeProtocolo+0x54>
		case 1:
			bufferRecepcao_g.direcao = valorLidoAD;
 318:	10 93 01 01 	sts	0x0101, r17
			break;
 31c:	15 c0       	rjmp	.+42     	; 0x348 <RecebeProtocolo+0x54>
		case 2:
			bufferRecepcao_g.dutyCicleM1 = valorLidoAD;
 31e:	10 93 02 01 	sts	0x0102, r17
			break;
 322:	12 c0       	rjmp	.+36     	; 0x348 <RecebeProtocolo+0x54>
		case 3:
			bufferRecepcao_g.dutyCicleM2 = valorLidoAD;
 324:	61 2f       	mov	r22, r17
 326:	10 93 03 01 	sts	0x0103, r17
			bufferRecepcao_g.iniciado = 0;
 32a:	10 92 05 01 	sts	0x0105, r1
			bufferRecepcao_g.qntdDadosLido = 0;
 32e:	10 92 04 01 	sts	0x0104, r1
			
			DirecaoCarro(bufferRecepcao_g);
 332:	40 91 01 01 	lds	r20, 0x0101
 336:	50 91 02 01 	lds	r21, 0x0102
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DirecaoCarro>
			
			/*Indica recebimento do protocolo*/
			Usart_Transmit('z');
 342:	8a e7       	ldi	r24, 0x7A	; 122
 344:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Usart_Transmit>
			break;
		}
	}		
	
	/*Inicia transmissão*/
	if(valorLidoAD == 'S')
 348:	13 35       	cpi	r17, 0x53	; 83
 34a:	19 f4       	brne	.+6      	; 0x352 <RecebeProtocolo+0x5e>
		bufferRecepcao_g.iniciado = 1;			
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 05 01 	sts	0x0105, r24
}	
 352:	1f 91       	pop	r17
 354:	08 95       	ret

00000356 <CvrtNum2CaracterIndividual>:
void CvrtNum2CaracterIndividual(
	uint16_t valor, 
	unsigned char* caracterConvertido,
	uint8_t tamanho
)		
{											
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	9b 01       	movw	r18, r22
	uint8_t contIni;
	for(contIni = 0; contIni < (tamanho - 1); contIni++)
 35e:	a4 2f       	mov	r26, r20
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	1a 16       	cp	r1, r26
 366:	1b 06       	cpc	r1, r27
 368:	6c f4       	brge	.+26     	; 0x384 <CvrtNum2CaracterIndividual+0x2e>
 36a:	50 e0       	ldi	r21, 0x00	; 0
		*(caracterConvertido + contIni) = 0x30; 
 36c:	10 e3       	ldi	r17, 0x30	; 48
 36e:	f9 01       	movw	r30, r18
 370:	e5 0f       	add	r30, r21
 372:	f1 1d       	adc	r31, r1
 374:	10 83       	st	Z, r17
	unsigned char* caracterConvertido,
	uint8_t tamanho
)		
{											
	uint8_t contIni;
	for(contIni = 0; contIni < (tamanho - 1); contIni++)
 376:	5f 5f       	subi	r21, 0xFF	; 255
 378:	65 2f       	mov	r22, r21
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	6a 17       	cp	r22, r26
 37e:	7b 07       	cpc	r23, r27
 380:	b4 f3       	brlt	.-20     	; 0x36e <CvrtNum2CaracterIndividual+0x18>
 382:	01 c0       	rjmp	.+2      	; 0x386 <CvrtNum2CaracterIndividual+0x30>
 384:	50 e0       	ldi	r21, 0x00	; 0
		*(caracterConvertido + contIni) = 0x30; 
	*(caracterConvertido + contIni + 1) = '\0';
 386:	f9 01       	movw	r30, r18
 388:	e5 0f       	add	r30, r21
 38a:	f1 1d       	adc	r31, r1
 38c:	11 82       	std	Z+1, r1	; 0x01
	
	unsigned char cont = tamanho - 1;
 38e:	41 50       	subi	r20, 0x01	; 1
	do{
		/*+0x30 para converter de caracter para número*/
		caracterConvertido[cont--] = (valor % 10) + 0x30;											
 390:	ca e0       	ldi	r28, 0x0A	; 10
 392:	d0 e0       	ldi	r29, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	e4 0f       	add	r30, r20
 398:	f1 1d       	adc	r31, r1
 39a:	be 01       	movw	r22, r28
 39c:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 3a0:	80 5d       	subi	r24, 0xD0	; 208
 3a2:	80 83       	st	Z, r24
 3a4:	41 50       	subi	r20, 0x01	; 1
		valor /= 10;								
 3a6:	86 2f       	mov	r24, r22
 3a8:	97 2f       	mov	r25, r23
	}while (valor != 0);
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	99 f7       	brne	.-26     	; 0x394 <CvrtNum2CaracterIndividual+0x3e>
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	08 95       	ret

000003b6 <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 3b6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 3ba:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
 3be:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b10011000;
 3c2:	88 e9       	ldi	r24, 0x98	; 152
 3c4:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	80 93 c2 00 	sts	0x00C2, r24
	//		   ||||||||
	//		   76543210		
}
 3ce:	08 95       	ret

000003d0 <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 3d0:	e0 ec       	ldi	r30, 0xC0	; 192
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	90 81       	ld	r25, Z
 3d6:	95 ff       	sbrs	r25, 5
 3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 3da:	80 93 c6 00 	sts	0x00C6, r24
}
 3de:	08 95       	ret

000003e0 <Usart_Receive>:
//---------------------------------------------------------------------------

unsigned char Usart_Receive()
{
	/*wait for data to be receive*/
	while (!(UCSR0A & (1<<RXC0)));	
 3e0:	e0 ec       	ldi	r30, 0xC0	; 192
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	88 23       	and	r24, r24
 3e8:	ec f7       	brge	.-6      	; 0x3e4 <Usart_Receive+0x4>
	
	/*read data into buffer, receive the data*/
	return UDR0; 				
 3ea:	80 91 c6 00 	lds	r24, 0x00C6
}
 3ee:	08 95       	ret

000003f0 <Usart_Write>:

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) Usart_Transmit(*c);
 3f6:	88 81       	ld	r24, Y
 3f8:	88 23       	and	r24, r24
 3fa:	31 f0       	breq	.+12     	; 0x408 <Usart_Write+0x18>
	return UDR0; 				
}

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
 3fc:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) Usart_Transmit(*c);
 3fe:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Usart_Transmit>
 402:	89 91       	ld	r24, Y+
 404:	88 23       	and	r24, r24
 406:	d9 f7       	brne	.-10     	; 0x3fe <Usart_Write+0xe>
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <Usart_Write_Flash>:

//---------------------------------------------------------------------------

void Usart_Write_Flash(const char *c)	
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) Usart_Transmit(pgm_read_byte(&(*c)));
 414:	fe 01       	movw	r30, r28
 416:	24 91       	lpm	r18, Z+
 418:	22 23       	and	r18, r18
 41a:	51 f0       	breq	.+20     	; 0x430 <Usart_Write_Flash+0x22>
 41c:	fc 01       	movw	r30, r24
 41e:	84 91       	lpm	r24, Z+
 420:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Usart_Transmit>
 424:	21 96       	adiw	r28, 0x01	; 1
 426:	ce 01       	movw	r24, r28
 428:	fe 01       	movw	r30, r28
 42a:	24 91       	lpm	r18, Z+
 42c:	22 23       	and	r18, r18
 42e:	b1 f7       	brne	.-20     	; 0x41c <Usart_Write_Flash+0xe>
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <__udivmodhi4>:
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	51 e1       	ldi	r21, 0x11	; 17
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__udivmodhi4_ep>

0000043e <__udivmodhi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	a6 17       	cp	r26, r22
 444:	b7 07       	cpc	r27, r23
 446:	10 f0       	brcs	.+4      	; 0x44c <__udivmodhi4_ep>
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23

0000044c <__udivmodhi4_ep>:
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	5a 95       	dec	r21
 452:	a9 f7       	brne	.-22     	; 0x43e <__udivmodhi4_loop>
 454:	80 95       	com	r24
 456:	90 95       	com	r25
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
