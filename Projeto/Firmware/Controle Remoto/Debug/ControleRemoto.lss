
ControleRemoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000005e2  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  00000684  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002b4  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000092d  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000464  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b39  00000000  00000000  00001ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b0  00000000  00000000  00002a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000479  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004d2  00000000  00000000  00003049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000fb  00000000  00000000  0000351b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00003616  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  9e:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
	* bit 4		 0:	 R:	    -:			Não usado deve ser sempre lido zero
	* bit 3:0 0000:	 R/W:	MUX[3:0]:	0000=ADC0, 0001=ADC1, 0010==ADC2, 0011=ADC3, 0100=ADC4, 0101=ADC5,
										0110=ADC6, 0111=ADC7, 1000=ADC8, 1001:1101=Reservado, 1110=1.1V(VBG)
										1111=0v(GND)
	*/
	ADMUX = 0b01000000; 
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	Exemplo: prescaler de 128: 20MHz/128 = 156,250KHz
	OBS: ADC[ADCL-ADCH] Registrado que armazena o resultado. Se o ADCL é lido o registrador 
	não é atualizado até ADCH ser lido. Se ADLAR for setado(ajuste a esquerda) e a precisão
	não for maior que 8bits apenas a leitura do ADCH é o suficiente.
	*/	
	ADCSRA = 0b10101111;  
  ac:	8f ea       	ldi	r24, 0xAF	; 175
  ae:	80 93 7a 00 	sts	0x007A, r24
										000=Free Running mode,  001==Analog Comparator, 
										010=External Interrupt Request 0, 011=Timer/Counter0 Compare Match A,  
										100=Timer/Counter0 Overflow, 101=Timer/Counter1 Compare Match B
										110=Timer/Counter1 Overflow, 111=Timer/Counter1 Capture Even
	*/	
	ADCSRB = 0b00000100;  
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 7b 00 	sts	0x007B, r24
	/* DIDR0 - Digital Input Disable Register 0
	* bit 7:6	00:		R:		-:				Reservado. Para uso futuro. Dever ser sempre escirto zero.
	* bit 5:0	111111:	R/W:	ADCnD[5:0]:		0=Habilita, 1=Entrada digital desabilitada

	*/	
	DIDR0 = 0b00111111;  
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	80 93 7e 00 	sts	0x007E, r24
	//        ||||||||
	//		  76543210
}
  be:	08 95       	ret

000000c0 <ADC_Read>:
uint16_t ADC_Read(
	uint8_t canal
)
{
	/*Máscara para definir o canal. Bits2:0*/
	ADMUX = (ADMUX & 0b11111000)  | (canal & 0b0000111);
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	87 70       	andi	r24, 0x07	; 7
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	98 2b       	or	r25, r24
  cc:	90 83       	st	Z, r25
	
	/*Inicia conversão*/
	ADCSRA |= (1<<ADSC);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	
	/*Aguarda conversão ser concluída*/
	while(ADCSRA & (1<<ADSC));
  d8:	80 81       	ld	r24, Z
  da:	86 fd       	sbrc	r24, 6
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <ADC_Read+0x18>
	
	return (ADC);
  de:	20 91 78 00 	lds	r18, 0x0078
  e2:	30 91 79 00 	lds	r19, 0x0079
}
  e6:	82 2f       	mov	r24, r18
  e8:	93 2f       	mov	r25, r19
  ea:	08 95       	ret

000000ec <__vector_21>:
}

//----------------------------------------------------------------------------

ISR(ADC_vect)			
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	static uint8_t contador = 0;
		
	/*Envia o valor lido do ADC a cada 1s aproximadamente*/
	if(contador == 64) {	
 116:	80 91 0e 01 	lds	r24, 0x010E
 11a:	80 34       	cpi	r24, 0x40	; 64
 11c:	89 f4       	brne	.+34     	; 0x140 <__vector_21+0x54>
		unsigned char direcao;
		unsigned char sentido;	
		uint16_t dutyLadorEsq;
		uint16_t dutyLadorDir;
		
		dutyLadorEsq = CalculaDutyCycleLadoEsq();
 11e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CalculaDutyCycleLadoEsq>
 122:	ec 01       	movw	r28, r24
		dutyLadorDir= CalculaDutyCycleLadoDir();
 124:	0e 94 2e 02 	call	0x45c	; 0x45c <CalculaDutyCycleLadoDir>
 128:	8c 01       	movw	r16, r24
		
		sentido = CalculaSentido();
 12a:	0e 94 a2 01 	call	0x344	; 0x344 <CalculaSentido>
		direcao = DirecaoCarro(sentido);
 12e:	0e 94 c9 00 	call	0x192	; 0x192 <DirecaoCarro>
 132:	48 2f       	mov	r20, r24
		
		TransmitiBuffer(dutyLadorEsq, dutyLadorDir, direcao);
 134:	ce 01       	movw	r24, r28
 136:	b8 01       	movw	r22, r16
 138:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TransmitiBuffer>
						
		contador = 0;
 13c:	10 92 0e 01 	sts	0x010E, r1
	}		
	
	contador++;
 140:	80 91 0e 01 	lds	r24, 0x010E
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 0e 01 	sts	0x010E, r24
	
	/*Limpa o flag de overflow do Timer0. Esse flag indica que houve um estouro do timer.
	limpar para habilitar um novo estouro para gerar a interrupção do ADC.*/
	TIFR0 |= TOV0;
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	85 bb       	out	0x15, r24	; 21
}	
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <Inicializacoes>:

//----------------------------------------------------------------------------

void Inicializacoes()
{
	Usart_Init(MYUBRR);
 178:	87 e6       	ldi	r24, 0x67	; 103
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 9b 02 	call	0x536	; 0x536 <Usart_Init>
	
	//Prescaler do Timer0, usado para fazer uma leitura do ADC.
	TCCR0B = (1<<CS02) | (1<<CS00);
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	85 bd       	out	0x25, r24	; 37
	ADC_Init();
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	
	sei();
 188:	78 94       	sei
}
 18a:	08 95       	ret

0000018c <main>:

//----------------------------------------------------------------------------

int main()
{	
	Inicializacoes();
 18c:	0e 94 bc 00 	call	0x178	; 0x178 <Inicializacoes>
 190:	ff cf       	rjmp	.-2      	; 0x190 <main+0x4>

00000192 <DirecaoCarro>:
unsigned char DirecaoCarro(
	unsigned char sentido
)
{	
	unsigned char direcao ;
	switch (estadoCarro) {
 192:	90 91 00 01 	lds	r25, 0x0100
 196:	92 30       	cpi	r25, 0x02	; 2
 198:	91 f0       	breq	.+36     	; 0x1be <DirecaoCarro+0x2c>
 19a:	93 30       	cpi	r25, 0x03	; 3
 19c:	b9 f0       	breq	.+46     	; 0x1cc <DirecaoCarro+0x3a>
 19e:	91 30       	cpi	r25, 0x01	; 1
 1a0:	e1 f4       	brne	.+56     	; 0x1da <DirecaoCarro+0x48>
		case PARADO:
					if(sentido == 'F') {
 1a2:	86 34       	cpi	r24, 0x46	; 70
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <DirecaoCarro+0x1e>
						estadoCarro = ANDANDO_FRENTE;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 00 01 	sts	0x0100, r24
						direcao = 'F';
 1ac:	86 e4       	ldi	r24, 0x46	; 70
 1ae:	08 95       	ret
					}					
					else if(sentido == 'R') {
 1b0:	82 35       	cpi	r24, 0x52	; 82
 1b2:	c1 f4       	brne	.+48     	; 0x1e4 <DirecaoCarro+0x52>
						estadoCarro = ANDANDO_TRAS;		
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	80 93 00 01 	sts	0x0100, r24
						direcao = 'R';
 1ba:	82 e5       	ldi	r24, 0x52	; 82
 1bc:	08 95       	ret
					else direcao = 'P';				
					
					break;	
			
		case ANDANDO_FRENTE:		
					if(sentido != 'F') {
 1be:	86 34       	cpi	r24, 0x46	; 70
 1c0:	99 f0       	breq	.+38     	; 0x1e8 <DirecaoCarro+0x56>
						estadoCarro = PARADO;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 00 01 	sts	0x0100, r24
						direcao = 'P';
 1c8:	80 e5       	ldi	r24, 0x50	; 80
 1ca:	08 95       	ret
					else direcao = 'F';				
					
					break;
			
		case ANDANDO_TRAS:
					if(sentido != 'R') {
 1cc:	82 35       	cpi	r24, 0x52	; 82
 1ce:	71 f0       	breq	.+28     	; 0x1ec <DirecaoCarro+0x5a>
						estadoCarro = PARADO;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 00 01 	sts	0x0100, r24
						direcao = 'P';	
 1d6:	80 e5       	ldi	r24, 0x50	; 80
 1d8:	08 95       	ret
					else direcao = 'R';		
					
					break;
		
		default:
					estadoCarro = PARADO;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 00 01 	sts	0x0100, r24
					direcao = 'P';
 1e0:	80 e5       	ldi	r24, 0x50	; 80
 1e2:	08 95       	ret
					}					
					else if(sentido == 'R') {
						estadoCarro = ANDANDO_TRAS;		
						direcao = 'R';
					}				
					else direcao = 'P';				
 1e4:	80 e5       	ldi	r24, 0x50	; 80
 1e6:	08 95       	ret
		case ANDANDO_FRENTE:		
					if(sentido != 'F') {
						estadoCarro = PARADO;
						direcao = 'P';
					}		
					else direcao = 'F';				
 1e8:	86 e4       	ldi	r24, 0x46	; 70
 1ea:	08 95       	ret
		case ANDANDO_TRAS:
					if(sentido != 'R') {
						estadoCarro = PARADO;
						direcao = 'P';	
					}	
					else direcao = 'R';		
 1ec:	82 e5       	ldi	r24, 0x52	; 82
					estadoCarro = PARADO;
					direcao = 'P';
	}		
	
	return direcao;
}		
 1ee:	08 95       	ret

000001f0 <TransmitiBuffer>:
void TransmitiBuffer(
	uint16_t dutyLadoEsq, 
	uint16_t dutyLadoDir, 
	unsigned char direcao
)
{
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2a 97       	sbiw	r28, 0x0a	; 10
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	7c 01       	movw	r14, r24
 212:	6b 01       	movw	r12, r22
 214:	04 2f       	mov	r16, r20
	unsigned char buffer[10];
		
	Usart_Transmit('[');
 216:	8b e5       	ldi	r24, 0x5B	; 91
 218:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
	buffer[0] = direcao;
 21c:	09 83       	std	Y+1, r16	; 0x01
	
	CvrtNum2CaracterIndividual(dutyLadoEsq, caracterConvertido_g);
 21e:	0f e0       	ldi	r16, 0x0F	; 15
 220:	11 e0       	ldi	r17, 0x01	; 1
 222:	c7 01       	movw	r24, r14
 224:	b8 01       	movw	r22, r16
 226:	0e 94 48 01 	call	0x290	; 0x290 <CvrtNum2CaracterIndividual>
	buffer[1] = 'M';
 22a:	0f 2e       	mov	r0, r31
 22c:	fd e4       	ldi	r31, 0x4D	; 77
 22e:	ef 2e       	mov	r14, r31
 230:	f0 2d       	mov	r31, r0
 232:	ea 82       	std	Y+2, r14	; 0x02
	//tracebuffer[2] = caracterConvertido_g[0];
	buffer[2] = caracterConvertido_g[1];
 234:	80 91 10 01 	lds	r24, 0x0110
 238:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = caracterConvertido_g[2];
 23a:	80 91 11 01 	lds	r24, 0x0111
 23e:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = caracterConvertido_g[3];
 240:	80 91 12 01 	lds	r24, 0x0112
 244:	8d 83       	std	Y+5, r24	; 0x05
	
	CvrtNum2CaracterIndividual(dutyLadoDir, caracterConvertido_g);
 246:	c6 01       	movw	r24, r12
 248:	b8 01       	movw	r22, r16
 24a:	0e 94 48 01 	call	0x290	; 0x290 <CvrtNum2CaracterIndividual>
	buffer[5] = 'M';
 24e:	ee 82       	std	Y+6, r14	; 0x06
	//tracebuffer[6] = caracterConvertido_g[0];
	buffer[6] = caracterConvertido_g[1];
 250:	80 91 10 01 	lds	r24, 0x0110
 254:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7] = caracterConvertido_g[2];
 256:	80 91 11 01 	lds	r24, 0x0111
 25a:	88 87       	std	Y+8, r24	; 0x08
	buffer[8] = caracterConvertido_g[3];
 25c:	80 91 12 01 	lds	r24, 0x0112
 260:	89 87       	std	Y+9, r24	; 0x09
		
	buffer[9] = '\0';
 262:	1a 86       	std	Y+10, r1	; 0x0a
	Usart_Write(buffer);
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 b8 02 	call	0x570	; 0x570 <Usart_Write>
	
	Usart_Transmit(']');	
 26c:	8d e5       	ldi	r24, 0x5D	; 93
 26e:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
}
 272:	2a 96       	adiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <CvrtNum2CaracterIndividual>:

void CvrtNum2CaracterIndividual(
	uint16_t valor, 
	unsigned char* caracterConvertido
)		
{											
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	eb 01       	movw	r28, r22
	unsigned char cont = 3;
  
	caracterConvertido[0] = 0x30; 
 296:	20 e3       	ldi	r18, 0x30	; 48
 298:	28 83       	st	Y, r18
	caracterConvertido[1] = 0x30; 
 29a:	29 83       	std	Y+1, r18	; 0x01
	caracterConvertido[2] = 0x30; 
 29c:	2a 83       	std	Y+2, r18	; 0x02
	caracterConvertido[3] = 0x30;
 29e:	2b 83       	std	Y+3, r18	; 0x03
	caracterConvertido[4] = '\0';
 2a0:	1c 82       	std	Y+4, r1	; 0x04
void CvrtNum2CaracterIndividual(
	uint16_t valor, 
	unsigned char* caracterConvertido
)		
{											
	unsigned char cont = 3;
 2a2:	43 e0       	ldi	r20, 0x03	; 3
	caracterConvertido[3] = 0x30;
	caracterConvertido[4] = '\0';

	do{
		/*+0x30 para converter de caracter para número*/
		caracterConvertido[cont--] = (valor % 10) + 0x30;											
 2a4:	2a e0       	ldi	r18, 0x0A	; 10
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	fe 01       	movw	r30, r28
 2aa:	e4 0f       	add	r30, r20
 2ac:	f1 1d       	adc	r31, r1
 2ae:	b9 01       	movw	r22, r18
 2b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	80 83       	st	Z, r24
 2b8:	41 50       	subi	r20, 0x01	; 1
		valor /= 10;								
 2ba:	86 2f       	mov	r24, r22
 2bc:	97 2f       	mov	r25, r23
	}while (valor != 0);
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	99 f7       	brne	.-26     	; 0x2a8 <CvrtNum2CaracterIndividual+0x18>
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <ValorLidoADEixoX>:

//---------------------------------------------------------------------------

uint16_t ValorLidoADEixoX()
{
	return ADC_Read(AD_EIXO_X);	
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_Read>
}
 2ce:	08 95       	ret

000002d0 <ValorLidoADEixoY>:

//---------------------------------------------------------------------------

uint16_t ValorLidoADEixoY()
{
	return ADC_Read(AD_EIXO_Y);	
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_Read>
}
 2d6:	08 95       	ret

000002d8 <PontoXNaPosInic>:

//---------------------------------------------------------------------------

uint8_t PontoXNaPosInic()
{
	return ((ValorLidoADEixoX() >= limInfPontoInicX_g ) && (ValorLidoADEixoX() <= limSupPontoInicX_g));
 2d8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ValorLidoADEixoX>
 2dc:	20 91 03 01 	lds	r18, 0x0103
 2e0:	30 91 04 01 	lds	r19, 0x0104
 2e4:	82 17       	cp	r24, r18
 2e6:	93 07       	cpc	r25, r19
 2e8:	78 f0       	brcs	.+30     	; 0x308 <PontoXNaPosInic+0x30>
 2ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ValorLidoADEixoX>
	return ADC_Read(AD_EIXO_Y);	
}

//---------------------------------------------------------------------------

uint8_t PontoXNaPosInic()
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 91 05 01 	lds	r20, 0x0105
 2f6:	50 91 06 01 	lds	r21, 0x0106
 2fa:	48 17       	cp	r20, r24
 2fc:	59 07       	cpc	r21, r25
 2fe:	10 f4       	brcc	.+4      	; 0x304 <PontoXNaPosInic+0x2c>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
{
	return ((ValorLidoADEixoX() >= limInfPontoInicX_g ) && (ValorLidoADEixoX() <= limSupPontoInicX_g));
 304:	c9 01       	movw	r24, r18
 306:	08 95       	ret
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
}
 30c:	08 95       	ret

0000030e <PontoYNaPosInic>:

//---------------------------------------------------------------------------

uint8_t PontoYNaPosInic()
{
	return ((ValorLidoADEixoY() >= limInfPontoInicY_g ) && (ValorLidoADEixoY() <= limSupPontoInicY_g));	
 30e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 312:	20 91 09 01 	lds	r18, 0x0109
 316:	30 91 0a 01 	lds	r19, 0x010A
 31a:	82 17       	cp	r24, r18
 31c:	93 07       	cpc	r25, r19
 31e:	78 f0       	brcs	.+30     	; 0x33e <PontoYNaPosInic+0x30>
 320:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
	return ((ValorLidoADEixoX() >= limInfPontoInicX_g ) && (ValorLidoADEixoX() <= limSupPontoInicX_g));
}

//---------------------------------------------------------------------------

uint8_t PontoYNaPosInic()
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 91 0b 01 	lds	r20, 0x010B
 32c:	50 91 0c 01 	lds	r21, 0x010C
 330:	48 17       	cp	r20, r24
 332:	59 07       	cpc	r21, r25
 334:	10 f4       	brcc	.+4      	; 0x33a <PontoYNaPosInic+0x2c>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
{
	return ((ValorLidoADEixoY() >= limInfPontoInicY_g ) && (ValorLidoADEixoY() <= limSupPontoInicY_g));	
 33a:	c9 01       	movw	r24, r18
 33c:	08 95       	ret
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
}
 342:	08 95       	ret

00000344 <CalculaSentido>:

//---------------------------------------------------------------------------

unsigned char CalculaSentido()
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	unsigned char direcao;
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
 348:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ValorLidoADEixoX>
 34c:	ec 01       	movw	r28, r24
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
 34e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
	
	if(valorLidoADEixoY > limSupPontoInicY_g)
 352:	20 91 0b 01 	lds	r18, 0x010B
 356:	30 91 0c 01 	lds	r19, 0x010C
 35a:	28 17       	cp	r18, r24
 35c:	39 07       	cpc	r19, r25
 35e:	b8 f0       	brcs	.+46     	; 0x38e <CalculaSentido+0x4a>
		direcao = 'F';
		
	else if(valorLidoADEixoY < limInfPontoInicY_g)
 360:	20 91 09 01 	lds	r18, 0x0109
 364:	30 91 0a 01 	lds	r19, 0x010A
 368:	82 17       	cp	r24, r18
 36a:	93 07       	cpc	r25, r19
 36c:	90 f0       	brcs	.+36     	; 0x392 <CalculaSentido+0x4e>
		direcao = 'R';
	
	else if(valorLidoADEixoX > limSupPontoInicX_g)
 36e:	80 91 05 01 	lds	r24, 0x0105
 372:	90 91 06 01 	lds	r25, 0x0106
 376:	8c 17       	cp	r24, r28
 378:	9d 07       	cpc	r25, r29
 37a:	68 f0       	brcs	.+26     	; 0x396 <CalculaSentido+0x52>
		direcao = 'D';
		
	else if(valorLidoADEixoX < limInfPontoInicX_g)
 37c:	80 91 03 01 	lds	r24, 0x0103
 380:	90 91 04 01 	lds	r25, 0x0104
 384:	c8 17       	cp	r28, r24
 386:	d9 07       	cpc	r29, r25
 388:	40 f4       	brcc	.+16     	; 0x39a <CalculaSentido+0x56>
		direcao = 'E';	
 38a:	85 e4       	ldi	r24, 0x45	; 69
 38c:	07 c0       	rjmp	.+14     	; 0x39c <CalculaSentido+0x58>
	unsigned char direcao;
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
	
	if(valorLidoADEixoY > limSupPontoInicY_g)
		direcao = 'F';
 38e:	86 e4       	ldi	r24, 0x46	; 70
 390:	05 c0       	rjmp	.+10     	; 0x39c <CalculaSentido+0x58>
		
	else if(valorLidoADEixoY < limInfPontoInicY_g)
		direcao = 'R';
 392:	82 e5       	ldi	r24, 0x52	; 82
 394:	03 c0       	rjmp	.+6      	; 0x39c <CalculaSentido+0x58>
	
	else if(valorLidoADEixoX > limSupPontoInicX_g)
		direcao = 'D';
 396:	84 e4       	ldi	r24, 0x44	; 68
 398:	01 c0       	rjmp	.+2      	; 0x39c <CalculaSentido+0x58>
		
	else if(valorLidoADEixoX < limInfPontoInicX_g)
		direcao = 'E';	
		
	else 
		direcao = 'P';
 39a:	80 e5       	ldi	r24, 0x50	; 80
			
	return direcao;
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <CalculaPorcentoPosicaoEixoY>:
			 posYFrente25PorCento = 650,
			 posYFrente0PorCento = 522;
		 
	uint16_t valorPorCentoEixoY; 
	
	if (ValorLidoADEixoY() > posYFrente75PorCento) 
 3a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 3a6:	23 e0       	ldi	r18, 0x03	; 3
 3a8:	85 38       	cpi	r24, 0x85	; 133
 3aa:	92 07       	cpc	r25, r18
 3ac:	a8 f4       	brcc	.+42     	; 0x3d8 <CalculaPorcentoPosicaoEixoY+0x36>
		valorPorCentoEixoY = 100;
				
	else if(ValorLidoADEixoY() > posYFrente50PorCento) 
 3ae:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 3b2:	23 e0       	ldi	r18, 0x03	; 3
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	92 07       	cpc	r25, r18
 3b8:	90 f4       	brcc	.+36     	; 0x3de <CalculaPorcentoPosicaoEixoY+0x3c>
		valorPorCentoEixoY = 75;
		
	else if(ValorLidoADEixoY() > posYFrente25PorCento) 
 3ba:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 3be:	22 e0       	ldi	r18, 0x02	; 2
 3c0:	8b 38       	cpi	r24, 0x8B	; 139
 3c2:	92 07       	cpc	r25, r18
 3c4:	78 f4       	brcc	.+30     	; 0x3e4 <CalculaPorcentoPosicaoEixoY+0x42>
		valorPorCentoEixoY = 50;
		
	else if(ValorLidoADEixoY() > posYFrente0PorCento) 
 3c6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 3ca:	22 e0       	ldi	r18, 0x02	; 2
 3cc:	8b 30       	cpi	r24, 0x0B	; 11
 3ce:	92 07       	cpc	r25, r18
 3d0:	60 f0       	brcs	.+24     	; 0x3ea <CalculaPorcentoPosicaoEixoY+0x48>
		valorPorCentoEixoY = 25;
 3d2:	29 e1       	ldi	r18, 0x19	; 25
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	0b c0       	rjmp	.+22     	; 0x3ee <CalculaPorcentoPosicaoEixoY+0x4c>
			 posYFrente0PorCento = 522;
		 
	uint16_t valorPorCentoEixoY; 
	
	if (ValorLidoADEixoY() > posYFrente75PorCento) 
		valorPorCentoEixoY = 100;
 3d8:	24 e6       	ldi	r18, 0x64	; 100
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	08 c0       	rjmp	.+16     	; 0x3ee <CalculaPorcentoPosicaoEixoY+0x4c>
				
	else if(ValorLidoADEixoY() > posYFrente50PorCento) 
		valorPorCentoEixoY = 75;
 3de:	2b e4       	ldi	r18, 0x4B	; 75
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <CalculaPorcentoPosicaoEixoY+0x4c>
		
	else if(ValorLidoADEixoY() > posYFrente25PorCento) 
		valorPorCentoEixoY = 50;
 3e4:	22 e3       	ldi	r18, 0x32	; 50
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <CalculaPorcentoPosicaoEixoY+0x4c>
		
	else if(ValorLidoADEixoY() > posYFrente0PorCento) 
		valorPorCentoEixoY = 25;
	
	else 
		valorPorCentoEixoY = 0;
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
	
	return valorPorCentoEixoY;
}
 3ee:	82 2f       	mov	r24, r18
 3f0:	93 2f       	mov	r25, r19
 3f2:	08 95       	ret

000003f4 <CalculaDutyCycleLadoEsq>:
}

//---------------------------------------------------------------------------

uint16_t CalculaDutyCycleLadoEsq()
{
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
 3fc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ValorLidoADEixoX>
 400:	8c 01       	movw	r16, r24
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
 402:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 406:	ec 01       	movw	r28, r24
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
 408:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <CalculaPorcentoPosicaoEixoY>
	
	uint16_t duty = 0;
	/*Andando Reverse*/
	if (valorLidoADEixoY < limInfPontoInicY_g) 
 40c:	80 91 09 01 	lds	r24, 0x0109
 410:	90 91 0a 01 	lds	r25, 0x010A
 414:	c8 17       	cp	r28, r24
 416:	d9 07       	cpc	r29, r25
 418:	90 f0       	brcs	.+36     	; 0x43e <CalculaDutyCycleLadoEsq+0x4a>
		duty = 100;
		
	/*Andando reto frente*/
	else if (PontoXNaPosInic() && !PontoYNaPosInic())
 41a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PontoXNaPosInic>
 41e:	88 23       	and	r24, r24
 420:	21 f0       	breq	.+8      	; 0x42a <CalculaDutyCycleLadoEsq+0x36>
 422:	0e 94 87 01 	call	0x30e	; 0x30e <PontoYNaPosInic>
 426:	88 23       	and	r24, r24
 428:	69 f0       	breq	.+26     	; 0x444 <CalculaDutyCycleLadoEsq+0x50>
		duty = 100;
			
	/*Andando para direita*/
	else if ((valorLidoADEixoX > limSupPontoInicX_g)) 
 42a:	80 91 05 01 	lds	r24, 0x0105
 42e:	90 91 06 01 	lds	r25, 0x0106
 432:	80 17       	cp	r24, r16
 434:	91 07       	cpc	r25, r17
 436:	48 f4       	brcc	.+18     	; 0x44a <CalculaDutyCycleLadoEsq+0x56>
		duty = 100;
 438:	24 e6       	ldi	r18, 0x64	; 100
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	08 c0       	rjmp	.+16     	; 0x44e <CalculaDutyCycleLadoEsq+0x5a>
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
	
	uint16_t duty = 0;
	/*Andando Reverse*/
	if (valorLidoADEixoY < limInfPontoInicY_g) 
		duty = 100;
 43e:	24 e6       	ldi	r18, 0x64	; 100
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	05 c0       	rjmp	.+10     	; 0x44e <CalculaDutyCycleLadoEsq+0x5a>
		
	/*Andando reto frente*/
	else if (PontoXNaPosInic() && !PontoYNaPosInic())
		duty = 100;
 444:	24 e6       	ldi	r18, 0x64	; 100
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <CalculaDutyCycleLadoEsq+0x5a>
{
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
	
	uint16_t duty = 0;
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
	/*Andando para esquerda*/
	else if ((valorLidoADEixoX < limInfPontoInicX_g)) 
		duty = 0;
		
	return duty;
}
 44e:	82 2f       	mov	r24, r18
 450:	93 2f       	mov	r25, r19
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <CalculaDutyCycleLadoDir>:
}

//---------------------------------------------------------------------------

uint16_t CalculaDutyCycleLadoDir()
{
 45c:	cf 92       	push	r12
 45e:	df 92       	push	r13
 460:	ef 92       	push	r14
 462:	ff 92       	push	r15
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	00 d0       	rcall	.+0      	; 0x46e <CalculaDutyCycleLadoDir+0x12>
 46e:	00 d0       	rcall	.+0      	; 0x470 <CalculaDutyCycleLadoDir+0x14>
 470:	0f 92       	push	r0
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
	uint16_t valorLidoADEixoX = ValorLidoADEixoX(); 
 476:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ValorLidoADEixoX>
 47a:	6c 01       	movw	r12, r24
	uint16_t valorLidoADEixoY = ValorLidoADEixoY();
 47c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ValorLidoADEixoY>
 480:	7c 01       	movw	r14, r24
	uint8_t valorPorCentoEixoY = CalculaPorcentoPosicaoEixoY(valorLidoADEixoY);
 482:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <CalculaPorcentoPosicaoEixoY>
	
	unsigned char convertido[5];
	Usart_Transmit('[');
 486:	8b e5       	ldi	r24, 0x5B	; 91
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
	CvrtNum2CaracterIndividual(valorLidoADEixoX, convertido);
 48e:	c6 01       	movw	r24, r12
 490:	8e 01       	movw	r16, r28
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	b8 01       	movw	r22, r16
 498:	0e 94 48 01 	call	0x290	; 0x290 <CvrtNum2CaracterIndividual>
	Usart_Write(convertido);
 49c:	c8 01       	movw	r24, r16
 49e:	0e 94 b8 02 	call	0x570	; 0x570 <Usart_Write>
	Usart_Transmit(',');
 4a2:	8c e2       	ldi	r24, 0x2C	; 44
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
	CvrtNum2CaracterIndividual(valorLidoADEixoY, convertido);
 4aa:	c7 01       	movw	r24, r14
 4ac:	b8 01       	movw	r22, r16
 4ae:	0e 94 48 01 	call	0x290	; 0x290 <CvrtNum2CaracterIndividual>
	Usart_Write(convertido);
 4b2:	c8 01       	movw	r24, r16
 4b4:	0e 94 b8 02 	call	0x570	; 0x570 <Usart_Write>
	Usart_Transmit(']');
 4b8:	8d e5       	ldi	r24, 0x5D	; 93
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
	
	uint16_t duty = 0;
	/*Andando Reverse*/
	if (valorLidoADEixoY < limInfPontoInicY_g) 
 4c0:	80 91 09 01 	lds	r24, 0x0109
 4c4:	90 91 0a 01 	lds	r25, 0x010A
 4c8:	e8 16       	cp	r14, r24
 4ca:	f9 06       	cpc	r15, r25
 4cc:	c8 f0       	brcs	.+50     	; 0x500 <CalculaDutyCycleLadoDir+0xa4>
		duty = 100;
		
	/*Andando reto frente*/
	else if (PontoXNaPosInic() && !PontoYNaPosInic())
 4ce:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PontoXNaPosInic>
 4d2:	88 23       	and	r24, r24
 4d4:	21 f0       	breq	.+8      	; 0x4de <CalculaDutyCycleLadoDir+0x82>
 4d6:	0e 94 87 01 	call	0x30e	; 0x30e <PontoYNaPosInic>
 4da:	88 23       	and	r24, r24
 4dc:	a1 f0       	breq	.+40     	; 0x506 <CalculaDutyCycleLadoDir+0xaa>
		duty = 100;
			
	/*Andando para direita*/
	else if ((valorLidoADEixoX > limSupPontoInicX_g)) 
 4de:	80 91 05 01 	lds	r24, 0x0105
 4e2:	90 91 06 01 	lds	r25, 0x0106
 4e6:	8c 15       	cp	r24, r12
 4e8:	9d 05       	cpc	r25, r13
 4ea:	80 f0       	brcs	.+32     	; 0x50c <CalculaDutyCycleLadoDir+0xb0>
		duty = 0;
	
	/*Andando para esquerda*/
	else if ((valorLidoADEixoX < limInfPontoInicX_g)) 
 4ec:	80 91 03 01 	lds	r24, 0x0103
 4f0:	90 91 04 01 	lds	r25, 0x0104
 4f4:	c8 16       	cp	r12, r24
 4f6:	d9 06       	cpc	r13, r25
 4f8:	60 f0       	brcs	.+24     	; 0x512 <CalculaDutyCycleLadoDir+0xb6>
	Usart_Transmit(',');
	CvrtNum2CaracterIndividual(valorLidoADEixoY, convertido);
	Usart_Write(convertido);
	Usart_Transmit(']');
	
	uint16_t duty = 0;
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	0b c0       	rjmp	.+22     	; 0x516 <CalculaDutyCycleLadoDir+0xba>
	/*Andando Reverse*/
	if (valorLidoADEixoY < limInfPontoInicY_g) 
		duty = 100;
 500:	24 e6       	ldi	r18, 0x64	; 100
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	08 c0       	rjmp	.+16     	; 0x516 <CalculaDutyCycleLadoDir+0xba>
		
	/*Andando reto frente*/
	else if (PontoXNaPosInic() && !PontoYNaPosInic())
		duty = 100;
 506:	24 e6       	ldi	r18, 0x64	; 100
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	05 c0       	rjmp	.+10     	; 0x516 <CalculaDutyCycleLadoDir+0xba>
			
	/*Andando para direita*/
	else if ((valorLidoADEixoX > limSupPontoInicX_g)) 
		duty = 0;
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <CalculaDutyCycleLadoDir+0xba>
	
	/*Andando para esquerda*/
	else if ((valorLidoADEixoX < limInfPontoInicX_g)) 
		duty = 100;
 512:	24 e6       	ldi	r18, 0x64	; 100
 514:	30 e0       	ldi	r19, 0x00	; 0
		
	return duty;
}
 516:	82 2f       	mov	r24, r18
 518:	93 2f       	mov	r25, r19
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	cf 91       	pop	r28
 526:	df 91       	pop	r29
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	08 95       	ret

00000536 <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 536:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 53a:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
 53e:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b10011000;
 542:	88 e9       	ldi	r24, 0x98	; 152
 544:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	80 93 c2 00 	sts	0x00C2, r24
	//		   ||||||||
	//		   76543210		
}
 54e:	08 95       	ret

00000550 <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 550:	e0 ec       	ldi	r30, 0xC0	; 192
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	90 81       	ld	r25, Z
 556:	95 ff       	sbrs	r25, 5
 558:	fd cf       	rjmp	.-6      	; 0x554 <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 55a:	80 93 c6 00 	sts	0x00C6, r24
}
 55e:	08 95       	ret

00000560 <Usart_Receive>:
//---------------------------------------------------------------------------

unsigned char Usart_Receive()
{
	/*wait for data to be receive*/
	while (!(UCSR0A & (1<<RXC0)));	
 560:	e0 ec       	ldi	r30, 0xC0	; 192
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	88 23       	and	r24, r24
 568:	ec f7       	brge	.-6      	; 0x564 <Usart_Receive+0x4>
	
	/*read data into buffer, receive the data*/
	return UDR0; 				
 56a:	80 91 c6 00 	lds	r24, 0x00C6
}
 56e:	08 95       	ret

00000570 <Usart_Write>:

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
{
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) Usart_Transmit(*c);
 576:	88 81       	ld	r24, Y
 578:	88 23       	and	r24, r24
 57a:	31 f0       	breq	.+12     	; 0x588 <Usart_Write+0x18>
	return UDR0; 				
}

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
 57c:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) Usart_Transmit(*c);
 57e:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
 582:	89 91       	ld	r24, Y+
 584:	88 23       	and	r24, r24
 586:	d9 f7       	brne	.-10     	; 0x57e <Usart_Write+0xe>
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <Usart_Write_Flash>:

//---------------------------------------------------------------------------

void Usart_Write_Flash(const char *c)	
{
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) Usart_Transmit(pgm_read_byte(&(*c)));
 594:	fe 01       	movw	r30, r28
 596:	24 91       	lpm	r18, Z+
 598:	22 23       	and	r18, r18
 59a:	51 f0       	breq	.+20     	; 0x5b0 <Usart_Write_Flash+0x22>
 59c:	fc 01       	movw	r30, r24
 59e:	84 91       	lpm	r24, Z+
 5a0:	0e 94 a8 02 	call	0x550	; 0x550 <Usart_Transmit>
 5a4:	21 96       	adiw	r28, 0x01	; 1
 5a6:	ce 01       	movw	r24, r28
 5a8:	fe 01       	movw	r30, r28
 5aa:	24 91       	lpm	r18, Z+
 5ac:	22 23       	and	r18, r18
 5ae:	b1 f7       	brne	.-20     	; 0x59c <Usart_Write_Flash+0xe>
}
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <__udivmodhi4>:
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	51 e1       	ldi	r21, 0x11	; 17
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <__udivmodhi4_ep>

000005be <__udivmodhi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	a6 17       	cp	r26, r22
 5c4:	b7 07       	cpc	r27, r23
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__udivmodhi4_ep>
 5c8:	a6 1b       	sub	r26, r22
 5ca:	b7 0b       	sbc	r27, r23

000005cc <__udivmodhi4_ep>:
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	5a 95       	dec	r21
 5d2:	a9 f7       	brne	.-22     	; 0x5be <__udivmodhi4_loop>
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	bc 01       	movw	r22, r24
 5da:	cd 01       	movw	r24, r26
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
