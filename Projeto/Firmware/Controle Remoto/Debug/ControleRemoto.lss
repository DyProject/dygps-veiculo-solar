
ControleRemoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ce  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000502  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000280  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c2  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000219  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000092  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_3>:
extern volatile TEstadoCarro estadoCarro;

//----------------------------------------------------------------------------
 
 ISR(PCINT0_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	4f 93       	push	r20
  aa:	5f 93       	push	r21
  ac:	6f 93       	push	r22
  ae:	7f 93       	push	r23
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	//Desabilita interrupção PCINT[7..0]
	PCICR	&= (~(1 << PCIE0));
  c0:	c8 e6       	ldi	r28, 0x68	; 104
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	88 81       	ld	r24, Y
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	88 83       	st	Y, r24
	PCMSK0 = 0x00;
  ca:	0b e6       	ldi	r16, 0x6B	; 107
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	f8 01       	movw	r30, r16
  d0:	10 82       	st	Z, r1
	
	EnviaDirecaoCarro();
  d2:	0e 94 a3 00 	call	0x146	; 0x146 <EnviaDirecaoCarro>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	83 ed       	ldi	r24, 0xD3	; 211
  d8:	90 e3       	ldi	r25, 0x30	; 48
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_3+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__vector_3+0x4a>
  e0:	00 00       	nop
	
	_delay_ms(50);
	PCMSK0	|= (1 << BT_FRENTE) | (1 << BT_RE)  | (1 << BT_DIREITA) | (1 << BT_ESQUERDA);
  e2:	f8 01       	movw	r30, r16
  e4:	80 81       	ld	r24, Z
  e6:	8f 60       	ori	r24, 0x0F	; 15
  e8:	80 83       	st	Z, r24
	PCICR	|= (1 << PCIE0);
  ea:	88 81       	ld	r24, Y
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	88 83       	st	Y, r24
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

//----------------------------------------------------------------------------

int main()
{	
	DDRB	= 0x00;			
 11a:	14 b8       	out	0x04, r1	; 4
	PORTB	= 0x0F;	
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	85 b9       	out	0x05, r24	; 5
	
	//Habilita interrupção PCINT[7..0]
	PCICR	|= (1 << PCIE0);
 120:	e8 e6       	ldi	r30, 0x68	; 104
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	//Habilita interrupção nos pino PCINT
	PCMSK0	|= (1 << BT_FRENTE) | (1 << BT_RE)  | (1 << BT_DIREITA) | (1 << BT_ESQUERDA);		
 12a:	eb e6       	ldi	r30, 0x6B	; 107
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	80 83       	st	Z, r24
		
	Usart_Init(MYUBRR);
 134:	87 e6       	ldi	r24, 0x67	; 103
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 1b 01 	call	0x236	; 0x236 <Usart_Init>
	//Para garantir que o carro sempre inicie parado.
	Usart_Transmit('P');
 13c:	80 e5       	ldi	r24, 0x50	; 80
 13e:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
	sei();
 142:	78 94       	sei
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x2a>

00000146 <EnviaDirecaoCarro>:

//----------------------------------------------------------------------------

void EnviaDirecaoCarro()
{
	switch (estadoCarro) {
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	09 f4       	brne	.+2      	; 0x150 <EnviaDirecaoCarro+0xa>
 14e:	41 c0       	rjmp	.+130    	; 0x1d2 <EnviaDirecaoCarro+0x8c>
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	30 f4       	brcc	.+12     	; 0x160 <EnviaDirecaoCarro+0x1a>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	59 f0       	breq	.+22     	; 0x16e <EnviaDirecaoCarro+0x28>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	09 f0       	breq	.+2      	; 0x15e <EnviaDirecaoCarro+0x18>
 15c:	6b c0       	rjmp	.+214    	; 0x234 <EnviaDirecaoCarro+0xee>
 15e:	1b c0       	rjmp	.+54     	; 0x196 <EnviaDirecaoCarro+0x50>
 160:	84 30       	cpi	r24, 0x04	; 4
 162:	09 f4       	brne	.+2      	; 0x166 <EnviaDirecaoCarro+0x20>
 164:	40 c0       	rjmp	.+128    	; 0x1e6 <EnviaDirecaoCarro+0xa0>
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	09 f0       	breq	.+2      	; 0x16c <EnviaDirecaoCarro+0x26>
 16a:	64 c0       	rjmp	.+200    	; 0x234 <EnviaDirecaoCarro+0xee>
 16c:	50 c0       	rjmp	.+160    	; 0x20e <EnviaDirecaoCarro+0xc8>
		case PARADO:
			if(BT_FRENTE_ISPRESSED()) {
 16e:	18 99       	sbic	0x03, 0	; 3
 170:	08 c0       	rjmp	.+16     	; 0x182 <EnviaDirecaoCarro+0x3c>
				Usart_Transmit('F');
 172:	86 e4       	ldi	r24, 0x46	; 70
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = ANDANDO_FRENTE;
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 00 01 	sts	0x0100, r24
 180:	08 95       	ret
			}else if(BT_RE_ISPRESSED()) {
 182:	19 99       	sbic	0x03, 1	; 3
 184:	57 c0       	rjmp	.+174    	; 0x234 <EnviaDirecaoCarro+0xee>
				Usart_Transmit('R');
 186:	82 e5       	ldi	r24, 0x52	; 82
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = ANDANDO_TRAS;	
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 93 00 01 	sts	0x0100, r24
 194:	08 95       	ret
			}			
			break;	
			
		case ANDANDO_FRENTE:
			if(!BT_FRENTE_ISPRESSED()) {
 196:	18 9b       	sbis	0x03, 0	; 3
 198:	08 c0       	rjmp	.+16     	; 0x1aa <EnviaDirecaoCarro+0x64>
				Usart_Transmit('P');
 19a:	80 e5       	ldi	r24, 0x50	; 80
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = PARADO;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 00 01 	sts	0x0100, r24
 1a8:	08 95       	ret
				
			} else if(BT_DIREITA_ISPRESSED()) {
 1aa:	1a 99       	sbic	0x03, 2	; 3
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <EnviaDirecaoCarro+0x78>
				Usart_Transmit('D');
 1ae:	84 e4       	ldi	r24, 0x44	; 68
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = ANDANDO_DIREITA;
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	80 93 00 01 	sts	0x0100, r24
 1bc:	08 95       	ret
				
			} else if(BT_ESQUERDA_ISPRESSED()) {
 1be:	1b 99       	sbic	0x03, 3	; 3
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <EnviaDirecaoCarro+0xee>
				Usart_Transmit('E');
 1c2:	85 e4       	ldi	r24, 0x45	; 69
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = ANDANDO_ESQUERDA;	
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	80 93 00 01 	sts	0x0100, r24
 1d0:	08 95       	ret
			}	
			break;
			
		case ANDANDO_TRAS:
			if(!BT_RE_ISPRESSED()) {
 1d2:	19 9b       	sbis	0x03, 1	; 3
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <EnviaDirecaoCarro+0xee>
				Usart_Transmit('P');
 1d6:	80 e5       	ldi	r24, 0x50	; 80
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = PARADO;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 00 01 	sts	0x0100, r24
 1e4:	08 95       	ret
			}			
			break;
			
		case ANDANDO_DIREITA:
			if(!BT_FRENTE_ISPRESSED()) {
 1e6:	18 9b       	sbis	0x03, 0	; 3
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <EnviaDirecaoCarro+0xb4>
				Usart_Transmit('P');
 1ea:	80 e5       	ldi	r24, 0x50	; 80
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = PARADO;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 00 01 	sts	0x0100, r24
 1f8:	08 95       	ret
								
			} else if(!BT_DIREITA_ISPRESSED()) {
 1fa:	1a 9b       	sbis	0x03, 2	; 3
 1fc:	1b c0       	rjmp	.+54     	; 0x234 <EnviaDirecaoCarro+0xee>
				Usart_Transmit('C');
 1fe:	83 e4       	ldi	r24, 0x43	; 67
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = ANDANDO_FRENTE;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 00 01 	sts	0x0100, r24
 20c:	08 95       	ret
			}	
			break;
		
		case ANDANDO_ESQUERDA:
			if(!BT_FRENTE_ISPRESSED()) {
 20e:	18 9b       	sbis	0x03, 0	; 3
 210:	08 c0       	rjmp	.+16     	; 0x222 <EnviaDirecaoCarro+0xdc>
				Usart_Transmit('P');
 212:	80 e5       	ldi	r24, 0x50	; 80
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = PARADO;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 00 01 	sts	0x0100, r24
 220:	08 95       	ret
								
			} else if(!BT_ESQUERDA_ISPRESSED()) {
 222:	1b 9b       	sbis	0x03, 3	; 3
 224:	07 c0       	rjmp	.+14     	; 0x234 <EnviaDirecaoCarro+0xee>
				Usart_Transmit('C');
 226:	83 e4       	ldi	r24, 0x43	; 67
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
				estadoCarro = ANDANDO_FRENTE;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 00 01 	sts	0x0100, r24
 234:	08 95       	ret

00000236 <Usart_Init>:
{
	/*UBRR - Usart Baud Rate Register[UBRR] 12 bits
	* Bit 15:12		Reservado	Para uso futuro. Deve ser escrito 0. 
	* Bit 11:0		UBRR		Baud Rate
	*/
	UBRR0H = (unsigned char) (ubrr >> 8);        
 236:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 23a:	80 93 c4 00 	sts	0x00C4, r24
	* bit 2		0:	  R:	UPEn:	0=Sem erro, 1=Erro de paridade
	* bit 1		0:	R/W:	U2Xn:	0=desabilita, 1=Dobra velocidade TX (apenas modo assincrono)	
	* bit 0		0:	  R:	MPCMn:	0=Desabilita, 1=Modo comunicação multi processo
	*OBS: sempre zerar bit 4:2 quando escrever no UCSR0A.
	*/
	UCSR0A = 0b00000000;
 23e:	10 92 c0 00 	sts	0x00C0, r1
	* bit 3		0:	R/W:	TXENn:		0=Des. TX, 1=Habilita
	* bit 2		0:	R/W:	UCSZn2:		Seta bits tamanho do frame. Combinado com UCSZn1 e UCSZn0
	* bit 1		0:	  R:	RXB8n:		9° bit RX quando frame 9 bits
	* bit 0		0:	R/W:	TXB8n:		9° bit TX quando frame 9 bits
	*/				
	UCSR0B = 0b00011000;
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	80 93 c1 00 	sts	0x00C1, r24
	* bit 2-1	0:	R/W:	UCSZn1:0:	Combinado com UCSZn2:0.	100, 101, 110= Reservados.
	*									000=Frame Cinco bits, 001=Seis, 010= Sete, 011=Oito, 111=Nove
	* bit 0		0:	R/W:	UCPOLn:		Somento modo Sincrono. 0=TX borda subido e RX descida.
															   1=TX borda descida e RX subida.
	*/
	UCSR0C = 0b00000110;
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	80 93 c2 00 	sts	0x00C2, r24
	//		   ||||||||
	//		   76543210		
}
 24e:	08 95       	ret

00000250 <Usart_Transmit>:
//---------------------------------------------------------------------------

void Usart_Transmit(unsigned char dado)
{
	/*wait for empty transmit buffer*/
	while (!( UCSR0A & (1<<UDRE0)) );	
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	95 ff       	sbrs	r25, 5
 258:	fd cf       	rjmp	.-6      	; 0x254 <Usart_Transmit+0x4>
	
	/*put data into buffer, sends the data*/
	UDR0 = dado; 				
 25a:	80 93 c6 00 	sts	0x00C6, r24
}
 25e:	08 95       	ret

00000260 <Usart_Receive>:
//---------------------------------------------------------------------------

unsigned char Usart_Receive()
{
	/*wait for data to be receive*/
	while (!(UCSR0A & (1<<RXC0)));	
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	ec f7       	brge	.-6      	; 0x264 <Usart_Receive+0x4>
	
	/*read data into buffer, receive the data*/
	return UDR0; 				
 26a:	80 91 c6 00 	lds	r24, 0x00C6
}
 26e:	08 95       	ret

00000270 <Usart_Write>:

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) Usart_Transmit(*c);
 276:	88 81       	ld	r24, Y
 278:	88 23       	and	r24, r24
 27a:	31 f0       	breq	.+12     	; 0x288 <Usart_Write+0x18>
	return UDR0; 				
}

//---------------------------------------------------------------------------

void Usart_Write(char *c)		
 27c:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) Usart_Transmit(*c);
 27e:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
 282:	89 91       	ld	r24, Y+
 284:	88 23       	and	r24, r24
 286:	d9 f7       	brne	.-10     	; 0x27e <Usart_Write+0xe>
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <Usart_Write_Flash>:

//---------------------------------------------------------------------------

void Usart_Write_Flash(const char *c)	
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) Usart_Transmit(pgm_read_byte(&(*c)));
 294:	fe 01       	movw	r30, r28
 296:	24 91       	lpm	r18, Z+
 298:	22 23       	and	r18, r18
 29a:	51 f0       	breq	.+20     	; 0x2b0 <Usart_Write_Flash+0x22>
 29c:	fc 01       	movw	r30, r24
 29e:	84 91       	lpm	r24, Z+
 2a0:	0e 94 28 01 	call	0x250	; 0x250 <Usart_Transmit>
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	ce 01       	movw	r24, r28
 2a8:	fe 01       	movw	r30, r28
 2aa:	24 91       	lpm	r18, Z+
 2ac:	22 23       	and	r18, r18
 2ae:	b1 f7       	brne	.-20     	; 0x29c <Usart_Write_Flash+0xe>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
