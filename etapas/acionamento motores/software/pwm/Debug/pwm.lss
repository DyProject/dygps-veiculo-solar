
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006e6  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011a  0080011a  00000794  2**0
                  ALLOC
  3 .stab         00001dac  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007d7  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00002d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000008e  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008fb  00000000  00000000  00002de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ff  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000679  00000000  00000000  000039df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  00004058  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000197  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000248  00000000  00000000  0000426f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000070  00000000  00000000  000044b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  00004527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  9e:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_comando>:

void LCD_comando(unsigned char c, char cd)
{
	unsigned char i = 2;

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c >> 4) << LCD_D4);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	28 2f       	mov	r18, r24
  aa:	22 95       	swap	r18
  ac:	2f 70       	andi	r18, 0x0F	; 15
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	92 2b       	or	r25, r18
  b2:	95 b9       	out	0x05, r25	; 5
//				ou texto (quando cd = 1)
// -----------------------------------------------------------------------------

void LCD_comando(unsigned char c, char cd)
{
	unsigned char i = 2;
  b4:	92 e0       	ldi	r25, 0x02	; 2
		
		pulso_enable;
		
		if((cd == 0) && (c < 4))
			_delay_ms(2);
		LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c & 0x0F) << LCD_D4);
  b6:	38 2f       	mov	r19, r24
  b8:	3f 70       	andi	r19, 0x0F	; 15
	unsigned char i = 2;

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c >> 4) << LCD_D4);
	do
	{
		if(cd == 0)
  ba:	66 23       	and	r22, r22
  bc:	89 f4       	brne	.+34     	; 0xe0 <LCD_comando+0x3a>
			__lcd_clr_bit(LCD_CONTROLE,LCD_RS);
  be:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	25 e0       	ldi	r18, 0x05	; 5
  c2:	2a 95       	dec	r18
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_comando+0x1c>
  c6:	00 00       	nop
		else
			__lcd_set_bit(LCD_CONTROLE,LCD_RS);
		
		pulso_enable;
  c8:	2c 9a       	sbi	0x05, 4	; 5
  ca:	e5 e0       	ldi	r30, 0x05	; 5
  cc:	ea 95       	dec	r30
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_comando+0x26>
  d0:	00 00       	nop
  d2:	2c 98       	cbi	0x05, 4	; 5
  d4:	f0 ef       	ldi	r31, 0xF0	; 240
  d6:	fa 95       	dec	r31
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_comando+0x30>
		
		if((cd == 0) && (c < 4))
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	b0 f4       	brcc	.+44     	; 0x10a <LCD_comando+0x64>
  de:	0f c0       	rjmp	.+30     	; 0xfe <LCD_comando+0x58>
	do
	{
		if(cd == 0)
			__lcd_clr_bit(LCD_CONTROLE,LCD_RS);
		else
			__lcd_set_bit(LCD_CONTROLE,LCD_RS);
  e0:	2d 9a       	sbi	0x05, 5	; 5
  e2:	25 e0       	ldi	r18, 0x05	; 5
  e4:	2a 95       	dec	r18
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_comando+0x3e>
  e8:	00 00       	nop
		
		pulso_enable;
  ea:	2c 9a       	sbi	0x05, 4	; 5
  ec:	e5 e0       	ldi	r30, 0x05	; 5
  ee:	ea 95       	dec	r30
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_comando+0x48>
  f2:	00 00       	nop
  f4:	2c 98       	cbi	0x05, 4	; 5
  f6:	f0 ef       	ldi	r31, 0xF0	; 240
  f8:	fa 95       	dec	r31
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_comando+0x52>
  fc:	06 c0       	rjmp	.+12     	; 0x10a <LCD_comando+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	ef e3       	ldi	r30, 0x3F	; 63
 100:	ff e1       	ldi	r31, 0x1F	; 31
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_comando+0x5c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_comando+0x62>
 108:	00 00       	nop
		
		if((cd == 0) && (c < 4))
			_delay_ms(2);
		LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | ((c & 0x0F) << LCD_D4);
 10a:	25 b1       	in	r18, 0x05	; 5
 10c:	20 7f       	andi	r18, 0xF0	; 240
 10e:	23 2b       	or	r18, r19
 110:	25 b9       	out	0x05, r18	; 5
		i--;
 112:	91 50       	subi	r25, 0x01	; 1
	}while(i > 0);
 114:	91 f6       	brne	.-92     	; 0xba <LCD_comando+0x14>
}
 116:	08 95       	ret

00000118 <LCD_inicia_4bits>:
// Objetivo:	Executa ações para incialização do LCD
// -----------------------------------------------------------------------------

void LCD_inicia_4bits(void)
{
	__lcd_clr_bit(LCD_CONTROLE,LCD_RS);
 118:	2d 98       	cbi	0x05, 5	; 5
	__lcd_clr_bit(LCD_CONTROLE,LCD_E);
 11a:	2c 98       	cbi	0x05, 4	; 5
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	99 ef       	ldi	r25, 0xF9	; 249
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	81 50       	subi	r24, 0x01	; 1
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	a0 40       	sbci	r26, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <LCD_inicia_4bits+0xa>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_inicia_4bits+0x14>
 12c:	00 00       	nop

	_delay_ms(20);

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | (0x03 << LCD_D4);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	83 60       	ori	r24, 0x03	; 3
 134:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	95 e0       	ldi	r25, 0x05	; 5
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_inicia_4bits+0x20>
 13c:	00 00       	nop
	pulso_enable;
 13e:	2c 9a       	sbi	0x05, 4	; 5
 140:	a5 e0       	ldi	r26, 0x05	; 5
 142:	aa 95       	dec	r26
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_inicia_4bits+0x2a>
 146:	00 00       	nop
 148:	2c 98       	cbi	0x05, 4	; 5
 14a:	b0 ef       	ldi	r27, 0xF0	; 240
 14c:	ba 95       	dec	r27
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_inicia_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_inicia_4bits+0x3c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_inicia_4bits+0x42>
 15a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_inicia_4bits+0x46>
 162:	00 00       	nop
	_delay_ms(5);
	pulso_enable;
 164:	2c 9a       	sbi	0x05, 4	; 5
 166:	a5 e0       	ldi	r26, 0x05	; 5
 168:	aa 95       	dec	r26
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_inicia_4bits+0x50>
 16c:	00 00       	nop
 16e:	2c 98       	cbi	0x05, 4	; 5
 170:	b0 ef       	ldi	r27, 0xF0	; 240
 172:	ba 95       	dec	r27
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_inicia_4bits+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	93 ec       	ldi	r25, 0xC3	; 195
 17a:	a9 e0       	ldi	r26, 0x09	; 9
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	a0 40       	sbci	r26, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <LCD_inicia_4bits+0x64>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_inicia_4bits+0x6e>
 186:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_inicia_4bits+0x72>
 18e:	00 00       	nop
	_delay_ms(200);
	pulso_enable;
 190:	2c 9a       	sbi	0x05, 4	; 5
 192:	a5 e0       	ldi	r26, 0x05	; 5
 194:	aa 95       	dec	r26
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_inicia_4bits+0x7c>
 198:	00 00       	nop
 19a:	2c 98       	cbi	0x05, 4	; 5
 19c:	b0 ef       	ldi	r27, 0xF0	; 240
 19e:	ba 95       	dec	r27
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_inicia_4bits+0x86>

	LCD_DADOS = (LCD_DADOS & (0xF0 >> LCD_D4)) | (0x02 << LCD_D4);
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_inicia_4bits+0x94>
 1b0:	00 00       	nop

	pulso_enable;
 1b2:	2c 9a       	sbi	0x05, 4	; 5
 1b4:	95 e0       	ldi	r25, 0x05	; 5
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_inicia_4bits+0x9e>
 1ba:	00 00       	nop
 1bc:	2c 98       	cbi	0x05, 4	; 5
 1be:	a0 ef       	ldi	r26, 0xF0	; 240
 1c0:	aa 95       	dec	r26
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_inicia_4bits+0xa8>


   	LCD_comando(0x28,0);	//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_comando>
						//são enviados os 2 nibbles (0x2 e 0x8)
   	
   	LCD_comando(0x08,0);	//desliga o display
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_comando>
   	LCD_display_limpa();
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_comando>
   	LCD_display_liga();   
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_comando>
   	LCD_move_primeira_linha();
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_comando>
}
 1ec:	08 95       	ret

000001ee <LCD_escreve>:
// Retono:		Nenhum
// Objetivo:	Escreve a string de caracteres no LCD
// -----------------------------------------------------------------------------

void LCD_escreve(char *c)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
	for (;*c != 0;c++)  LCD_comando(*c,1);
 1f4:	88 81       	ld	r24, Y
 1f6:	88 23       	and	r24, r24
 1f8:	39 f0       	breq	.+14     	; 0x208 <LCD_escreve+0x1a>
// Argumentos:	string de texto
// Retono:		Nenhum
// Objetivo:	Escreve a string de caracteres no LCD
// -----------------------------------------------------------------------------

void LCD_escreve(char *c)
 1fa:	21 96       	adiw	r28, 0x01	; 1
{
	for (;*c != 0;c++)  LCD_comando(*c,1);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_comando>
 202:	89 91       	ld	r24, Y+
 204:	88 23       	and	r24, r24
 206:	d1 f7       	brne	.-12     	; 0x1fc <LCD_escreve+0xe>
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <DutyCicle>:
}

//--------------------------------------------------------------

void DutyCicle(unsigned int duty)
{
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	df 93       	push	r29
 214:	cf 93       	push	r28
 216:	00 d0       	rcall	.+0      	; 0x218 <DutyCicle+0xa>
 218:	00 d0       	rcall	.+0      	; 0x21a <DutyCicle+0xc>
 21a:	0f 92       	push	r0
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];
	valorComp = floor(FATOR_COMP * duty);
 220:	bc 01       	movw	r22, r24
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__floatunsisf>
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	37 ed       	ldi	r19, 0xD7	; 215
 22e:	43 e2       	ldi	r20, 0x23	; 35
 230:	50 e4       	ldi	r21, 0x40	; 64
 232:	0e 94 a1 02 	call	0x542	; 0x542 <__mulsf3>
 236:	0e 94 25 02 	call	0x44a	; 0x44a <floor>
 23a:	0e 94 bc 01 	call	0x378	; 0x378 <__fixunssfsi>
 23e:	70 93 17 01 	sts	0x0117, r23
 242:	60 93 16 01 	sts	0x0116, r22
	itoa(valorComp, buffer, 10);
 246:	80 91 16 01 	lds	r24, 0x0116
 24a:	90 91 17 01 	lds	r25, 0x0117
 24e:	8e 01       	movw	r16, r28
 250:	0f 5f       	subi	r16, 0xFF	; 255
 252:	1f 4f       	sbci	r17, 0xFF	; 255
 254:	b8 01       	movw	r22, r16
 256:	4a e0       	ldi	r20, 0x0A	; 10
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	0e 94 2c 03 	call	0x658	; 0x658 <itoa>
	LCD_escreve(buffer);
 25e:	c8 01       	movw	r24, r16
 260:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_escreve>
}
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <__vector_16>:
}

//--------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	static int cont = 0;
	static int duty = 10;
	OCR0A = valorComp;	
 29a:	80 91 16 01 	lds	r24, 0x0116
 29e:	90 91 17 01 	lds	r25, 0x0117
 2a2:	87 bd       	out	0x27, r24	; 39
	
	
	cont++;
 2a4:	80 91 1a 01 	lds	r24, 0x011A
 2a8:	90 91 1b 01 	lds	r25, 0x011B
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	90 93 1b 01 	sts	0x011B, r25
 2b2:	80 93 1a 01 	sts	0x011A, r24
	if (cont == 1000){
 2b6:	23 e0       	ldi	r18, 0x03	; 3
 2b8:	88 3e       	cpi	r24, 0xE8	; 232
 2ba:	92 07       	cpc	r25, r18
 2bc:	79 f4       	brne	.+30     	; 0x2dc <__vector_16+0x64>
		DutyCicle(duty);
 2be:	80 91 18 01 	lds	r24, 0x0118
 2c2:	90 91 19 01 	lds	r25, 0x0119
 2c6:	0e 94 07 01 	call	0x20e	; 0x20e <DutyCicle>
		duty +=10;
 2ca:	80 91 18 01 	lds	r24, 0x0118
 2ce:	90 91 19 01 	lds	r25, 0x0119
 2d2:	0a 96       	adiw	r24, 0x0a	; 10
 2d4:	90 93 19 01 	sts	0x0119, r25
 2d8:	80 93 18 01 	sts	0x0118, r24
	}			
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:
volatile unsigned int valorComp = 210;

//--------------------------------------------------------------

int main(void)
{
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	df 93       	push	r29
 304:	cf 93       	push	r28
 306:	00 d0       	rcall	.+0      	; 0x308 <main+0xa>
 308:	00 d0       	rcall	.+0      	; 0x30a <main+0xc>
 30a:	00 d0       	rcall	.+0      	; 0x30c <main+0xe>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0b11111101;
 310:	8d ef       	ldi	r24, 0xFD	; 253
 312:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xFF;
 318:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); //Fast PWM
 31a:	83 e8       	ldi	r24, 0x83	; 131
 31c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); 
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	85 bd       	out	0x25, r24	; 37
		
	TIMSK0 = (1 << TOIE0);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 6e 00 	sts	0x006E, r24
	
	LCD_inicia_4bits();
 328:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_inicia_4bits>
	
	char texto[6] = "dygps - Veiculo Solar";
 32c:	de 01       	movw	r26, r28
 32e:	11 96       	adiw	r26, 0x01	; 1
 330:	e0 e0       	ldi	r30, 0x00	; 0
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	01 90       	ld	r0, Z+
 338:	0d 92       	st	X+, r0
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x38>
	
	LCD_escreve(texto);
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_escreve>
	
	sei();
 346:	78 94       	sei
	
	int valorDuty = 0;
 348:	00 e0       	ldi	r16, 0x00	; 0
 34a:	10 e0       	ldi	r17, 0x00	; 0
	
    while(1)
    {
		if(!tst_bit(PIND, PIND1)){
 34c:	49 99       	sbic	0x09, 1	; 9
 34e:	fe cf       	rjmp	.-4      	; 0x34c <main+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 350:	83 ec       	ldi	r24, 0xC3	; 195
 352:	99 e0       	ldi	r25, 0x09	; 9
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x56>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x5c>
 35a:	00 00       	nop
			_delay_ms(10);
			DutyCicle(valorDuty);
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 07 01 	call	0x20e	; 0x20e <DutyCicle>
			valorDuty += 10;
 362:	06 5f       	subi	r16, 0xF6	; 246
 364:	1f 4f       	sbci	r17, 0xFF	; 255

			while(!tst_bit(PIND, PIND1)){}
 366:	49 9b       	sbis	0x09, 1	; 9
 368:	fe cf       	rjmp	.-4      	; 0x366 <main+0x68>
 36a:	83 ec       	ldi	r24, 0xC3	; 195
 36c:	99 e0       	ldi	r25, 0x09	; 9
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x70>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x76>
 374:	00 00       	nop
 376:	ea cf       	rjmp	.-44     	; 0x34c <main+0x4e>

00000378 <__fixunssfsi>:
 378:	ac d0       	rcall	.+344    	; 0x4d2 <__fp_splitA>
 37a:	88 f0       	brcs	.+34     	; 0x39e <__fixunssfsi+0x26>
 37c:	9f 57       	subi	r25, 0x7F	; 127
 37e:	90 f0       	brcs	.+36     	; 0x3a4 <__fixunssfsi+0x2c>
 380:	b9 2f       	mov	r27, r25
 382:	99 27       	eor	r25, r25
 384:	b7 51       	subi	r27, 0x17	; 23
 386:	a0 f0       	brcs	.+40     	; 0x3b0 <__fixunssfsi+0x38>
 388:	d1 f0       	breq	.+52     	; 0x3be <__fixunssfsi+0x46>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	88 1f       	adc	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	1a f0       	brmi	.+6      	; 0x39a <__fixunssfsi+0x22>
 394:	ba 95       	dec	r27
 396:	c9 f7       	brne	.-14     	; 0x38a <__fixunssfsi+0x12>
 398:	12 c0       	rjmp	.+36     	; 0x3be <__fixunssfsi+0x46>
 39a:	b1 30       	cpi	r27, 0x01	; 1
 39c:	81 f0       	breq	.+32     	; 0x3be <__fixunssfsi+0x46>
 39e:	ca d0       	rcall	.+404    	; 0x534 <__fp_zero>
 3a0:	b1 e0       	ldi	r27, 0x01	; 1
 3a2:	08 95       	ret
 3a4:	c7 c0       	rjmp	.+398    	; 0x534 <__fp_zero>
 3a6:	67 2f       	mov	r22, r23
 3a8:	78 2f       	mov	r23, r24
 3aa:	88 27       	eor	r24, r24
 3ac:	b8 5f       	subi	r27, 0xF8	; 248
 3ae:	39 f0       	breq	.+14     	; 0x3be <__fixunssfsi+0x46>
 3b0:	b9 3f       	cpi	r27, 0xF9	; 249
 3b2:	cc f3       	brlt	.-14     	; 0x3a6 <__fixunssfsi+0x2e>
 3b4:	86 95       	lsr	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	b3 95       	inc	r27
 3bc:	d9 f7       	brne	.-10     	; 0x3b4 <__fixunssfsi+0x3c>
 3be:	3e f4       	brtc	.+14     	; 0x3ce <__fixunssfsi+0x56>
 3c0:	90 95       	com	r25
 3c2:	80 95       	com	r24
 3c4:	70 95       	com	r23
 3c6:	61 95       	neg	r22
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	8f 4f       	sbci	r24, 0xFF	; 255
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	08 95       	ret

000003d0 <__floatunsisf>:
 3d0:	e8 94       	clt
 3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <__floatsisf+0x12>

000003d4 <__floatsisf>:
 3d4:	97 fb       	bst	r25, 7
 3d6:	3e f4       	brtc	.+14     	; 0x3e6 <__floatsisf+0x12>
 3d8:	90 95       	com	r25
 3da:	80 95       	com	r24
 3dc:	70 95       	com	r23
 3de:	61 95       	neg	r22
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	99 23       	and	r25, r25
 3e8:	a9 f0       	breq	.+42     	; 0x414 <__floatsisf+0x40>
 3ea:	f9 2f       	mov	r31, r25
 3ec:	96 e9       	ldi	r25, 0x96	; 150
 3ee:	bb 27       	eor	r27, r27
 3f0:	93 95       	inc	r25
 3f2:	f6 95       	lsr	r31
 3f4:	87 95       	ror	r24
 3f6:	77 95       	ror	r23
 3f8:	67 95       	ror	r22
 3fa:	b7 95       	ror	r27
 3fc:	f1 11       	cpse	r31, r1
 3fe:	f8 cf       	rjmp	.-16     	; 0x3f0 <__floatsisf+0x1c>
 400:	fa f4       	brpl	.+62     	; 0x440 <__floatsisf+0x6c>
 402:	bb 0f       	add	r27, r27
 404:	11 f4       	brne	.+4      	; 0x40a <__floatsisf+0x36>
 406:	60 ff       	sbrs	r22, 0
 408:	1b c0       	rjmp	.+54     	; 0x440 <__floatsisf+0x6c>
 40a:	6f 5f       	subi	r22, 0xFF	; 255
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	8f 4f       	sbci	r24, 0xFF	; 255
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	16 c0       	rjmp	.+44     	; 0x440 <__floatsisf+0x6c>
 414:	88 23       	and	r24, r24
 416:	11 f0       	breq	.+4      	; 0x41c <__floatsisf+0x48>
 418:	96 e9       	ldi	r25, 0x96	; 150
 41a:	11 c0       	rjmp	.+34     	; 0x43e <__floatsisf+0x6a>
 41c:	77 23       	and	r23, r23
 41e:	21 f0       	breq	.+8      	; 0x428 <__floatsisf+0x54>
 420:	9e e8       	ldi	r25, 0x8E	; 142
 422:	87 2f       	mov	r24, r23
 424:	76 2f       	mov	r23, r22
 426:	05 c0       	rjmp	.+10     	; 0x432 <__floatsisf+0x5e>
 428:	66 23       	and	r22, r22
 42a:	71 f0       	breq	.+28     	; 0x448 <__floatsisf+0x74>
 42c:	96 e8       	ldi	r25, 0x86	; 134
 42e:	86 2f       	mov	r24, r22
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	2a f0       	brmi	.+10     	; 0x440 <__floatsisf+0x6c>
 436:	9a 95       	dec	r25
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	da f7       	brpl	.-10     	; 0x436 <__floatsisf+0x62>
 440:	88 0f       	add	r24, r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	97 f9       	bld	r25, 7
 448:	08 95       	ret

0000044a <floor>:
 44a:	5d d0       	rcall	.+186    	; 0x506 <__fp_trunc>
 44c:	80 f0       	brcs	.+32     	; 0x46e <floor+0x24>
 44e:	9f 37       	cpi	r25, 0x7F	; 127
 450:	40 f4       	brcc	.+16     	; 0x462 <floor+0x18>
 452:	91 11       	cpse	r25, r1
 454:	0e f0       	brts	.+2      	; 0x458 <floor+0xe>
 456:	6f c0       	rjmp	.+222    	; 0x536 <__fp_szero>
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	9f eb       	ldi	r25, 0xBF	; 191
 460:	08 95       	ret
 462:	26 f4       	brtc	.+8      	; 0x46c <floor+0x22>
 464:	1b 16       	cp	r1, r27
 466:	61 1d       	adc	r22, r1
 468:	71 1d       	adc	r23, r1
 46a:	81 1d       	adc	r24, r1
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__fp_mintl>
 46e:	1b c0       	rjmp	.+54     	; 0x4a6 <__fp_mpack>

00000470 <__fp_mintl>:
 470:	88 23       	and	r24, r24
 472:	71 f4       	brne	.+28     	; 0x490 <__fp_mintl+0x20>
 474:	77 23       	and	r23, r23
 476:	21 f0       	breq	.+8      	; 0x480 <__fp_mintl+0x10>
 478:	98 50       	subi	r25, 0x08	; 8
 47a:	87 2b       	or	r24, r23
 47c:	76 2f       	mov	r23, r22
 47e:	07 c0       	rjmp	.+14     	; 0x48e <__fp_mintl+0x1e>
 480:	66 23       	and	r22, r22
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_mintl+0x18>
 484:	99 27       	eor	r25, r25
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <__fp_mintl+0x32>
 488:	90 51       	subi	r25, 0x10	; 16
 48a:	86 2b       	or	r24, r22
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	2a f0       	brmi	.+10     	; 0x49c <__fp_mintl+0x2c>
 492:	9a 95       	dec	r25
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	da f7       	brpl	.-10     	; 0x492 <__fp_mintl+0x22>
 49c:	88 0f       	add	r24, r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	97 f9       	bld	r25, 7
 4a4:	08 95       	ret

000004a6 <__fp_mpack>:
 4a6:	9f 3f       	cpi	r25, 0xFF	; 255
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <__fp_mpack_finite+0xc>

000004aa <__fp_mpack_finite>:
 4aa:	91 50       	subi	r25, 0x01	; 1
 4ac:	20 f4       	brcc	.+8      	; 0x4b6 <__fp_mpack_finite+0xc>
 4ae:	87 95       	ror	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	b7 95       	ror	r27
 4b6:	88 0f       	add	r24, r24
 4b8:	91 1d       	adc	r25, r1
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret

000004c2 <__fp_split3>:
 4c2:	57 fd       	sbrc	r21, 7
 4c4:	90 58       	subi	r25, 0x80	; 128
 4c6:	44 0f       	add	r20, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	59 f0       	breq	.+22     	; 0x4e2 <__fp_splitA+0x10>
 4cc:	5f 3f       	cpi	r21, 0xFF	; 255
 4ce:	71 f0       	breq	.+28     	; 0x4ec <__fp_splitA+0x1a>
 4d0:	47 95       	ror	r20

000004d2 <__fp_splitA>:
 4d2:	88 0f       	add	r24, r24
 4d4:	97 fb       	bst	r25, 7
 4d6:	99 1f       	adc	r25, r25
 4d8:	61 f0       	breq	.+24     	; 0x4f2 <__fp_splitA+0x20>
 4da:	9f 3f       	cpi	r25, 0xFF	; 255
 4dc:	79 f0       	breq	.+30     	; 0x4fc <__fp_splitA+0x2a>
 4de:	87 95       	ror	r24
 4e0:	08 95       	ret
 4e2:	12 16       	cp	r1, r18
 4e4:	13 06       	cpc	r1, r19
 4e6:	14 06       	cpc	r1, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	f2 cf       	rjmp	.-28     	; 0x4d0 <__fp_split3+0xe>
 4ec:	46 95       	lsr	r20
 4ee:	f1 df       	rcall	.-30     	; 0x4d2 <__fp_splitA>
 4f0:	08 c0       	rjmp	.+16     	; 0x502 <__fp_splitA+0x30>
 4f2:	16 16       	cp	r1, r22
 4f4:	17 06       	cpc	r1, r23
 4f6:	18 06       	cpc	r1, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	f1 cf       	rjmp	.-30     	; 0x4de <__fp_splitA+0xc>
 4fc:	86 95       	lsr	r24
 4fe:	71 05       	cpc	r23, r1
 500:	61 05       	cpc	r22, r1
 502:	08 94       	sec
 504:	08 95       	ret

00000506 <__fp_trunc>:
 506:	e5 df       	rcall	.-54     	; 0x4d2 <__fp_splitA>
 508:	a0 f0       	brcs	.+40     	; 0x532 <__fp_trunc+0x2c>
 50a:	be e7       	ldi	r27, 0x7E	; 126
 50c:	b9 17       	cp	r27, r25
 50e:	88 f4       	brcc	.+34     	; 0x532 <__fp_trunc+0x2c>
 510:	bb 27       	eor	r27, r27
 512:	9f 38       	cpi	r25, 0x8F	; 143
 514:	60 f4       	brcc	.+24     	; 0x52e <__fp_trunc+0x28>
 516:	16 16       	cp	r1, r22
 518:	b1 1d       	adc	r27, r1
 51a:	67 2f       	mov	r22, r23
 51c:	78 2f       	mov	r23, r24
 51e:	88 27       	eor	r24, r24
 520:	98 5f       	subi	r25, 0xF8	; 248
 522:	f7 cf       	rjmp	.-18     	; 0x512 <__fp_trunc+0xc>
 524:	86 95       	lsr	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b1 1d       	adc	r27, r1
 52c:	93 95       	inc	r25
 52e:	96 39       	cpi	r25, 0x96	; 150
 530:	c8 f3       	brcs	.-14     	; 0x524 <__fp_trunc+0x1e>
 532:	08 95       	ret

00000534 <__fp_zero>:
 534:	e8 94       	clt

00000536 <__fp_szero>:
 536:	bb 27       	eor	r27, r27
 538:	66 27       	eor	r22, r22
 53a:	77 27       	eor	r23, r23
 53c:	cb 01       	movw	r24, r22
 53e:	97 f9       	bld	r25, 7
 540:	08 95       	ret

00000542 <__mulsf3>:
 542:	0b d0       	rcall	.+22     	; 0x55a <__mulsf3x>
 544:	78 c0       	rjmp	.+240    	; 0x636 <__fp_round>
 546:	69 d0       	rcall	.+210    	; 0x61a <__fp_pscA>
 548:	28 f0       	brcs	.+10     	; 0x554 <__mulsf3+0x12>
 54a:	6e d0       	rcall	.+220    	; 0x628 <__fp_pscB>
 54c:	18 f0       	brcs	.+6      	; 0x554 <__mulsf3+0x12>
 54e:	95 23       	and	r25, r21
 550:	09 f0       	breq	.+2      	; 0x554 <__mulsf3+0x12>
 552:	5a c0       	rjmp	.+180    	; 0x608 <__fp_inf>
 554:	5f c0       	rjmp	.+190    	; 0x614 <__fp_nan>
 556:	11 24       	eor	r1, r1
 558:	ee cf       	rjmp	.-36     	; 0x536 <__fp_szero>

0000055a <__mulsf3x>:
 55a:	b3 df       	rcall	.-154    	; 0x4c2 <__fp_split3>
 55c:	a0 f3       	brcs	.-24     	; 0x546 <__mulsf3+0x4>

0000055e <__mulsf3_pse>:
 55e:	95 9f       	mul	r25, r21
 560:	d1 f3       	breq	.-12     	; 0x556 <__mulsf3+0x14>
 562:	95 0f       	add	r25, r21
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	55 1f       	adc	r21, r21
 568:	62 9f       	mul	r22, r18
 56a:	f0 01       	movw	r30, r0
 56c:	72 9f       	mul	r23, r18
 56e:	bb 27       	eor	r27, r27
 570:	f0 0d       	add	r31, r0
 572:	b1 1d       	adc	r27, r1
 574:	63 9f       	mul	r22, r19
 576:	aa 27       	eor	r26, r26
 578:	f0 0d       	add	r31, r0
 57a:	b1 1d       	adc	r27, r1
 57c:	aa 1f       	adc	r26, r26
 57e:	64 9f       	mul	r22, r20
 580:	66 27       	eor	r22, r22
 582:	b0 0d       	add	r27, r0
 584:	a1 1d       	adc	r26, r1
 586:	66 1f       	adc	r22, r22
 588:	82 9f       	mul	r24, r18
 58a:	22 27       	eor	r18, r18
 58c:	b0 0d       	add	r27, r0
 58e:	a1 1d       	adc	r26, r1
 590:	62 1f       	adc	r22, r18
 592:	73 9f       	mul	r23, r19
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	62 1f       	adc	r22, r18
 59a:	83 9f       	mul	r24, r19
 59c:	a0 0d       	add	r26, r0
 59e:	61 1d       	adc	r22, r1
 5a0:	22 1f       	adc	r18, r18
 5a2:	74 9f       	mul	r23, r20
 5a4:	33 27       	eor	r19, r19
 5a6:	a0 0d       	add	r26, r0
 5a8:	61 1d       	adc	r22, r1
 5aa:	23 1f       	adc	r18, r19
 5ac:	84 9f       	mul	r24, r20
 5ae:	60 0d       	add	r22, r0
 5b0:	21 1d       	adc	r18, r1
 5b2:	82 2f       	mov	r24, r18
 5b4:	76 2f       	mov	r23, r22
 5b6:	6a 2f       	mov	r22, r26
 5b8:	11 24       	eor	r1, r1
 5ba:	9f 57       	subi	r25, 0x7F	; 127
 5bc:	50 40       	sbci	r21, 0x00	; 0
 5be:	8a f0       	brmi	.+34     	; 0x5e2 <__mulsf3_pse+0x84>
 5c0:	e1 f0       	breq	.+56     	; 0x5fa <__mulsf3_pse+0x9c>
 5c2:	88 23       	and	r24, r24
 5c4:	4a f0       	brmi	.+18     	; 0x5d8 <__mulsf3_pse+0x7a>
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	bb 1f       	adc	r27, r27
 5cc:	66 1f       	adc	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	50 40       	sbci	r21, 0x00	; 0
 5d6:	a9 f7       	brne	.-22     	; 0x5c2 <__mulsf3_pse+0x64>
 5d8:	9e 3f       	cpi	r25, 0xFE	; 254
 5da:	51 05       	cpc	r21, r1
 5dc:	70 f0       	brcs	.+28     	; 0x5fa <__mulsf3_pse+0x9c>
 5de:	14 c0       	rjmp	.+40     	; 0x608 <__fp_inf>
 5e0:	aa cf       	rjmp	.-172    	; 0x536 <__fp_szero>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	ec f3       	brlt	.-6      	; 0x5e0 <__mulsf3_pse+0x82>
 5e6:	98 3e       	cpi	r25, 0xE8	; 232
 5e8:	dc f3       	brlt	.-10     	; 0x5e0 <__mulsf3_pse+0x82>
 5ea:	86 95       	lsr	r24
 5ec:	77 95       	ror	r23
 5ee:	67 95       	ror	r22
 5f0:	b7 95       	ror	r27
 5f2:	f7 95       	ror	r31
 5f4:	e7 95       	ror	r30
 5f6:	9f 5f       	subi	r25, 0xFF	; 255
 5f8:	c1 f7       	brne	.-16     	; 0x5ea <__mulsf3_pse+0x8c>
 5fa:	fe 2b       	or	r31, r30
 5fc:	88 0f       	add	r24, r24
 5fe:	91 1d       	adc	r25, r1
 600:	96 95       	lsr	r25
 602:	87 95       	ror	r24
 604:	97 f9       	bld	r25, 7
 606:	08 95       	ret

00000608 <__fp_inf>:
 608:	97 f9       	bld	r25, 7
 60a:	9f 67       	ori	r25, 0x7F	; 127
 60c:	80 e8       	ldi	r24, 0x80	; 128
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	08 95       	ret

00000614 <__fp_nan>:
 614:	9f ef       	ldi	r25, 0xFF	; 255
 616:	80 ec       	ldi	r24, 0xC0	; 192
 618:	08 95       	ret

0000061a <__fp_pscA>:
 61a:	00 24       	eor	r0, r0
 61c:	0a 94       	dec	r0
 61e:	16 16       	cp	r1, r22
 620:	17 06       	cpc	r1, r23
 622:	18 06       	cpc	r1, r24
 624:	09 06       	cpc	r0, r25
 626:	08 95       	ret

00000628 <__fp_pscB>:
 628:	00 24       	eor	r0, r0
 62a:	0a 94       	dec	r0
 62c:	12 16       	cp	r1, r18
 62e:	13 06       	cpc	r1, r19
 630:	14 06       	cpc	r1, r20
 632:	05 06       	cpc	r0, r21
 634:	08 95       	ret

00000636 <__fp_round>:
 636:	09 2e       	mov	r0, r25
 638:	03 94       	inc	r0
 63a:	00 0c       	add	r0, r0
 63c:	11 f4       	brne	.+4      	; 0x642 <__fp_round+0xc>
 63e:	88 23       	and	r24, r24
 640:	52 f0       	brmi	.+20     	; 0x656 <__fp_round+0x20>
 642:	bb 0f       	add	r27, r27
 644:	40 f4       	brcc	.+16     	; 0x656 <__fp_round+0x20>
 646:	bf 2b       	or	r27, r31
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_round+0x18>
 64a:	60 ff       	sbrs	r22, 0
 64c:	04 c0       	rjmp	.+8      	; 0x656 <__fp_round+0x20>
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	08 95       	ret

00000658 <itoa>:
 658:	fb 01       	movw	r30, r22
 65a:	9f 01       	movw	r18, r30
 65c:	e8 94       	clt
 65e:	42 30       	cpi	r20, 0x02	; 2
 660:	c4 f0       	brlt	.+48     	; 0x692 <itoa+0x3a>
 662:	45 32       	cpi	r20, 0x25	; 37
 664:	b4 f4       	brge	.+44     	; 0x692 <itoa+0x3a>
 666:	4a 30       	cpi	r20, 0x0A	; 10
 668:	29 f4       	brne	.+10     	; 0x674 <itoa+0x1c>
 66a:	97 fb       	bst	r25, 7
 66c:	1e f4       	brtc	.+6      	; 0x674 <itoa+0x1c>
 66e:	90 95       	com	r25
 670:	81 95       	neg	r24
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	64 2f       	mov	r22, r20
 676:	77 27       	eor	r23, r23
 678:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__udivmodhi4>
 67c:	80 5d       	subi	r24, 0xD0	; 208
 67e:	8a 33       	cpi	r24, 0x3A	; 58
 680:	0c f0       	brlt	.+2      	; 0x684 <itoa+0x2c>
 682:	89 5d       	subi	r24, 0xD9	; 217
 684:	81 93       	st	Z+, r24
 686:	cb 01       	movw	r24, r22
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	a1 f7       	brne	.-24     	; 0x674 <itoa+0x1c>
 68c:	16 f4       	brtc	.+4      	; 0x692 <itoa+0x3a>
 68e:	5d e2       	ldi	r21, 0x2D	; 45
 690:	51 93       	st	Z+, r21
 692:	10 82       	st	Z, r1
 694:	c9 01       	movw	r24, r18
 696:	0c 94 4d 03 	jmp	0x69a	; 0x69a <strrev>

0000069a <strrev>:
 69a:	dc 01       	movw	r26, r24
 69c:	fc 01       	movw	r30, r24
 69e:	67 2f       	mov	r22, r23
 6a0:	71 91       	ld	r23, Z+
 6a2:	77 23       	and	r23, r23
 6a4:	e1 f7       	brne	.-8      	; 0x69e <strrev+0x4>
 6a6:	32 97       	sbiw	r30, 0x02	; 2
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <strrev+0x18>
 6aa:	7c 91       	ld	r23, X
 6ac:	6d 93       	st	X+, r22
 6ae:	70 83       	st	Z, r23
 6b0:	62 91       	ld	r22, -Z
 6b2:	ae 17       	cp	r26, r30
 6b4:	bf 07       	cpc	r27, r31
 6b6:	c8 f3       	brcs	.-14     	; 0x6aa <strrev+0x10>
 6b8:	08 95       	ret

000006ba <__udivmodhi4>:
 6ba:	aa 1b       	sub	r26, r26
 6bc:	bb 1b       	sub	r27, r27
 6be:	51 e1       	ldi	r21, 0x11	; 17
 6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <__udivmodhi4_ep>

000006c2 <__udivmodhi4_loop>:
 6c2:	aa 1f       	adc	r26, r26
 6c4:	bb 1f       	adc	r27, r27
 6c6:	a6 17       	cp	r26, r22
 6c8:	b7 07       	cpc	r27, r23
 6ca:	10 f0       	brcs	.+4      	; 0x6d0 <__udivmodhi4_ep>
 6cc:	a6 1b       	sub	r26, r22
 6ce:	b7 0b       	sbc	r27, r23

000006d0 <__udivmodhi4_ep>:
 6d0:	88 1f       	adc	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	5a 95       	dec	r21
 6d6:	a9 f7       	brne	.-22     	; 0x6c2 <__udivmodhi4_loop>
 6d8:	80 95       	com	r24
 6da:	90 95       	com	r25
 6dc:	bc 01       	movw	r22, r24
 6de:	cd 01       	movw	r24, r26
 6e0:	08 95       	ret

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>
