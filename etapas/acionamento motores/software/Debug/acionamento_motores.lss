
acionamento_motores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000074  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000219  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000121  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001aa  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <para>:
	set_bit(PORTB, IN3);
	clr_bit(PORTB, IN4);
}
void para (void)
{
	set_bit(PORTB, IN1);
  80:	28 9a       	sbi	0x05, 0	; 5
	set_bit(PORTB, IN2);
  82:	29 9a       	sbi	0x05, 1	; 5
	set_bit(PORTB, IN3);
  84:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB, IN4);
  86:	2b 9a       	sbi	0x05, 3	; 5
}
  88:	08 95       	ret

0000008a <anda_atras>:
	clr_bit(PORTB, IN3);
	set_bit(PORTB, IN4);
}
void anda_atras (void)
{
	para();
  8a:	0e 94 40 00 	call	0x80	; 0x80 <para>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	87 ea       	ldi	r24, 0xA7	; 167
  90:	91 e6       	ldi	r25, 0x61	; 97
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <anda_atras+0x8>
  96:	00 c0       	rjmp	.+0      	; 0x98 <anda_atras+0xe>
  98:	00 00       	nop
	_delay_ms(100);
	set_bit(PORTB, IN1);
  9a:	28 9a       	sbi	0x05, 0	; 5
	clr_bit(PORTB, IN2);
  9c:	29 98       	cbi	0x05, 1	; 5
	set_bit(PORTB, IN3);
  9e:	2a 9a       	sbi	0x05, 2	; 5
	clr_bit(PORTB, IN4);
  a0:	2b 98       	cbi	0x05, 3	; 5
}
  a2:	08 95       	ret

000000a4 <anda_frente>:
	}	
}

void anda_frente (void)
{
	para();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <para>
  a8:	87 ea       	ldi	r24, 0xA7	; 167
  aa:	91 e6       	ldi	r25, 0x61	; 97
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <anda_frente+0x8>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <anda_frente+0xe>
  b2:	00 00       	nop
	_delay_ms(100);	
	clr_bit(PORTB, IN1);
  b4:	28 98       	cbi	0x05, 0	; 5
	set_bit(PORTB, IN2);
  b6:	29 9a       	sbi	0x05, 1	; 5
	clr_bit(PORTB, IN3);
  b8:	2a 98       	cbi	0x05, 2	; 5
	set_bit(PORTB, IN4);
  ba:	2b 9a       	sbi	0x05, 3	; 5
}
  bc:	08 95       	ret

000000be <vira_direita>:
	set_bit(PORTB, IN3);
	set_bit(PORTB, IN4);
}
void vira_direita(void)
{
	clr_bit(PORTB, ENA);
  be:	2c 98       	cbi	0x05, 4	; 5
	set_bit(PORTB, ENB);
  c0:	2d 9a       	sbi	0x05, 5	; 5
}
  c2:	08 95       	ret

000000c4 <vira_esquerda>:
void vira_esquerda(void)
{
	set_bit(PORTB, ENA);
  c4:	2c 9a       	sbi	0x05, 4	; 5
	clr_bit(PORTB, ENB);
  c6:	2d 98       	cbi	0x05, 5	; 5
}
  c8:	08 95       	ret

000000ca <anda_reto>:
void anda_reto(void)
{
	set_bit(PORTB, ENA);
  ca:	2c 9a       	sbi	0x05, 4	; 5
	set_bit(PORTB, ENB);
  cc:	2d 9a       	sbi	0x05, 5	; 5
  ce:	08 95       	ret

000000d0 <main>:
void vira_esquerda(void);
void anda_reto(void);

int main(void)
{
    DDRB	= 0xFF;			//Saídas para acionamento L298
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 b9       	out	0x04, r24	; 4
	PORTB	= 0x00;			//Saídas do PORTB com nível lógico baixo
  d4:	15 b8       	out	0x05, r1	; 5
	DDRD	= 0x00;			//Botões de acionamento
  d6:	1a b8       	out	0x0a, r1	; 10
	PORTD	= 0xFF;			//Pull-up habilitado
  d8:	8b b9       	out	0x0b, r24	; 11
		
	while(1)
	{
		while(tst_bit(PIND, B_ENABLE));
  da:	4e 99       	sbic	0x09, 6	; 9
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0xa>
		set_bit(PORTB, ENA);
  de:	2c 9a       	sbi	0x05, 4	; 5
		set_bit(PORTB, ENB);		
  e0:	2d 9a       	sbi	0x05, 5	; 5
		while(!tst_bit(PIND, B_ENABLE))
  e2:	18 c0       	rjmp	.+48     	; 0x114 <main+0x44>
		{
			if(!tst_bit(PIND, B_FRENTE))
  e4:	48 99       	sbic	0x09, 0	; 9
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x1c>
				anda_frente();
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <anda_frente>
			if(!tst_bit(PIND, B_TRAZ))
  ec:	49 99       	sbic	0x09, 1	; 9
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <main+0x24>
				anda_atras();
  f0:	0e 94 45 00 	call	0x8a	; 0x8a <anda_atras>
			if(!tst_bit(PIND, B_PARA))
  f4:	4a 99       	sbic	0x09, 2	; 9
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x2c>
				para();
  f8:	0e 94 40 00 	call	0x80	; 0x80 <para>
			if(!tst_bit(PIND, B_DIREITA))
  fc:	4b 99       	sbic	0x09, 3	; 9
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x34>
				vira_direita();
 100:	0e 94 5f 00 	call	0xbe	; 0xbe <vira_direita>
			if(!tst_bit(PIND, B_ESQUERDA))
 104:	4c 99       	sbic	0x09, 4	; 9
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x3c>
				vira_esquerda();
 108:	0e 94 62 00 	call	0xc4	; 0xc4 <vira_esquerda>
			if(!tst_bit(PIND, B_RETO))
 10c:	4d 99       	sbic	0x09, 5	; 9
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x44>
				anda_reto();
 110:	0e 94 65 00 	call	0xca	; 0xca <anda_reto>
	while(1)
	{
		while(tst_bit(PIND, B_ENABLE));
		set_bit(PORTB, ENA);
		set_bit(PORTB, ENB);		
		while(!tst_bit(PIND, B_ENABLE))
 114:	4e 9b       	sbis	0x09, 6	; 9
 116:	e6 cf       	rjmp	.-52     	; 0xe4 <main+0x14>
			if(!tst_bit(PIND, B_ESQUERDA))
				vira_esquerda();
			if(!tst_bit(PIND, B_RETO))
				anda_reto();
		}
		clr_bit(PORTB, ENA);
 118:	2c 98       	cbi	0x05, 4	; 5
		clr_bit(PORTB, ENB);		
 11a:	2d 98       	cbi	0x05, 5	; 5
 11c:	de cf       	rjmp	.-68     	; 0xda <main+0xa>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
